{"pages":[{"title":"","date":"2018-07-09T08:30:19.721Z","updated":"2018-07-09T08:30:19.721Z","comments":true,"path":"404.html","permalink":"http://yoursite.com/404.html","excerpt":"","text":""}],"posts":[{"title":"使用GitHub+Hexo搭建免费博客","text":"使用GitHub + Hexo 搭建免费博客搭建博客扩展功能评论Gitmenthttps://segmentfault.com/a/1190000009664550 参考链接 Hexo 个性化配置(三) https://blog.csdn.net/tianbo_zhang/article/details/79137355","content":"<h1 id=\"使用GitHub-Hexo-搭建免费博客\"><a href=\"#使用GitHub-Hexo-搭建免费博客\" class=\"headerlink\" title=\"使用GitHub + Hexo 搭建免费博客\"></a>使用GitHub + Hexo 搭建免费博客</h1><h2 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h2><h2 id=\"扩展功能\"><a href=\"#扩展功能\" class=\"headerlink\" title=\"扩展功能\"></a>扩展功能</h2><h3 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h3><h4 id=\"Gitment\"><a href=\"#Gitment\" class=\"headerlink\" title=\"Gitment\"></a>Gitment</h4><p><a href=\"https://segmentfault.com/a/1190000009664550\" target=\"_blank\" rel=\"noopener\">https://segmentfault.com/a/1190000009664550</a></p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ul>\n<li><a href=\"https://blog.csdn.net/kunkun5love/article/details/79403176\" target=\"_blank\" rel=\"noopener\">Hexo 个性化配置(三)</a></li>\n</ul>\n<p><a href=\"https://blog.csdn.net/tianbo_zhang/article/details/79137355\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/tianbo_zhang/article/details/79137355</a></p>\n"},{"title":"Tomcat配置定时启动","text":"Tomcat配置定时启动一、设置tomcat定时启动1、首先将tomcat注册为服务 先打开tomcat的bin目录下service.bat文件，修改下面的值，这是sevvice的注册名称和显示名称，一般可使用默认值。 1set SERVICE_NAME=Tomcat-DPlatform-Server``set DISPLAYNAME=Apache Tomcat 8.5 %SERVICE_NAME% ​ 然后修改jvm大小， 搜索到–JvmMs 128 –JvmMx 256 进行修改，因为做成服务启动，启动的时候就不会用到 catalina.bat，也就不会读取里面的jvm设置了。】（可选，可以不设置） 然后运行cmd命令窗口，cd 到tomcat的bin目录下，运行下面的命令 1service.bat install ​ 运行成功过后，会提示服务已经安装成功。如下图所示： 2、制作重启脚本restart.bat，文件内容如下： 123456789101112131415161718192021@echo off echo ***********************************************echo start time %DATE% %TIME% echo ***********************************************echo Start closing the service net stop Tomcat-DPlatform-Serverecho service has been closedecho *** echo start clean up catchingrd /q/s &quot;D:\\tomcat\\ydkq-tomcat-server\\work\\Catalina&quot;echo clean up end echo start clean up temp for /f &quot;delims=&quot; %%a in (&apos;dir /ad/b/s D:\\tomcat\\ydkq-tomcat-server\\temp&apos;) do (rd /q /s &quot;%%a&quot;)&gt;nulrem del /q/s &quot;D:\\tomcat\\ydkq-tomcat-server\\temp\\*.*&quot; echo clean up end echo Start the start of the service net start Tomcat-DPlatform-Server echo service has been startedecho ***********************************************echo end time %DATE% %TIME% echo *********************************************** 3、配置定时任务 （win7）开始–&gt;附件——&gt;系统工具——&gt;任务计划与程序，然后设置对应的脚本运行时间计划 【注意】 使用net stop / net start 命令的时候需要使用管理员权限也就是任务中的最高权限，否则会提示发生系统错误，拒绝访问。 4、删除服务 如果想要删除服务，也很简单，先把服务停掉，然后在cmd窗口运行下面的命令即可，后面那个Tomcat7是服务名。 sc delete Tomcat7 需要注意的是，需要先把服务停掉，才能一次删除成功，或者删除之后再停止服务，就会发现服务已经删除成功了。 【参考】 http://blog.csdn.net/lovelong8808/article/details/52052423","content":"<h1 id=\"Tomcat配置定时启动\"><a href=\"#Tomcat配置定时启动\" class=\"headerlink\" title=\"Tomcat配置定时启动\"></a>Tomcat配置定时启动</h1><h2 id=\"一、设置tomcat定时启动\"><a href=\"#一、设置tomcat定时启动\" class=\"headerlink\" title=\"一、设置tomcat定时启动\"></a>一、设置tomcat定时启动</h2><p>1、首先将tomcat注册为服务      先打开tomcat的bin目录下service.bat文件，修改下面的值，这是sevvice的注册名称和显示名称，一般可使用默认值。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set SERVICE_NAME=Tomcat-DPlatform-Server``set DISPLAYNAME=Apache Tomcat 8.5 %SERVICE_NAME%</span><br></pre></td></tr></table></figure>\n<p>​     然后修改jvm大小， 搜索到–JvmMs 128 –JvmMx 256 进行修改，因为做成服务启动，启动的时候就不会用到 catalina.bat，也就不会读取里面的jvm设置了。】（可选，可以不设置）<br>     然后运行cmd命令窗口，cd 到tomcat的bin目录下，运行下面的命令 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service.bat install</span><br></pre></td></tr></table></figure>\n<p>​       运行成功过后，会提示服务已经安装成功。如下图所示：<br> <img src=\"file:///C:/Users/cheryl/Documents/My Knowledge/temp/3876c524-2e1d-4692-b26e-4642dd15485c/128/index_files/92bc70f4-85a4-4bc5-87db-9fb697dc3d20.png\" alt=\"img\"><br>2、制作重启脚本restart.bat，文件内容如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off </span><br><span class=\"line\">echo ***********************************************</span><br><span class=\"line\">echo start time %DATE% %TIME% </span><br><span class=\"line\">echo ***********************************************</span><br><span class=\"line\">echo Start closing the service </span><br><span class=\"line\">net stop Tomcat-DPlatform-Server</span><br><span class=\"line\">echo service has been closed</span><br><span class=\"line\">echo  *** </span><br><span class=\"line\">echo start clean up catching</span><br><span class=\"line\">rd /q/s &quot;D:\\tomcat\\ydkq-tomcat-server\\work\\Catalina&quot;</span><br><span class=\"line\">echo clean up end </span><br><span class=\"line\">echo start clean up temp </span><br><span class=\"line\">for /f &quot;delims=&quot; %%a in (&apos;dir /ad/b/s D:\\tomcat\\ydkq-tomcat-server\\temp&apos;) do (rd /q /s &quot;%%a&quot;)&gt;nul</span><br><span class=\"line\">rem del /q/s &quot;D:\\tomcat\\ydkq-tomcat-server\\temp\\*.*&quot;   </span><br><span class=\"line\">echo clean up end </span><br><span class=\"line\">echo Start the start of the service </span><br><span class=\"line\">net start Tomcat-DPlatform-Server </span><br><span class=\"line\">echo service has been started</span><br><span class=\"line\">echo ***********************************************</span><br><span class=\"line\">echo end time %DATE% %TIME% </span><br><span class=\"line\">echo ***********************************************</span><br></pre></td></tr></table></figure>\n<p>3、配置定时任务<br>    （win7）开始–&gt;附件——&gt;系统工具——&gt;任务计划与程序，然后设置对应的脚本运行时间计划   【注意】 使用net stop / net start 命令的时候需要使用管理员权限也就是任务中的最高权限，否则会提示发生系统错误，拒绝访问。</p>\n<p>4、删除服务</p>\n<p> 如果想要删除服务，也很简单，先把服务停掉，然后在cmd窗口运行下面的命令即可，后面那个Tomcat7是服务名。 sc delete Tomcat7</p>\n<p>需要注意的是，需要先把服务停掉，才能一次删除成功，或者删除之后再停止服务，就会发现服务已经删除成功了。</p>\n<p>【参考】 <a href=\"http://blog.csdn.net/lovelong8808/article/details/52052423\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/lovelong8808/article/details/52052423</a></p>\n"},{"title":"'Stream API'","text":"Stream API Java8中有两大最为重要的改变。第一个是 Lambda 表达式 ;另外一 个则是 Stream API(java.util.stream.*) 。Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对 集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数 据库查询。也可以使用 Stream API 来并行执行操作。简而言之， Stream API 供了一种高效且易于使用的处理数据的方式。 一、什么是 Stream流(Stream) 到底是什么呢? 是数据渠道，用于操作数据源(集合、数组等)所生成的元素序列。集合讲的是数据，流讲的是计算!注意: Stream自己不会存储元素。 Stream不会改变原对象。相反，他们会返回一个持有结果的新Stream。 Stream操作是延迟执行。这意味着他们会等到需要结果的时候才执行。 二、Stream操作的三个步骤2.1 创建stream 一个数据源（如：集合或数组），获取一个流 2.2 中间操作 一个中间操作链，对数据源的数据进行处理。 2.3 终止操作 一个终止操作，执行中间操作链，并产生结果。 三、创建Stream的四种方式3.1 由Collection创建流Java8 中的 Collection 接口被扩展， 供了两个获取流的方法: default Stream&lt; E&gt; stream() : 返回一个顺序流 default Stream&lt; E&gt; parallelStream() : 返回一个并行流 案例： 123List&lt;Employee&gt; list = new ArrayList&lt;&gt;();Stream&lt;Employee&gt; stream = list.stream();Stream&lt;Employee&gt; parallelStream = list.parallelStream(); 3.2 由数组创建流通过 Arrays中的静态方法 stream() 创建数据源 。static &lt; T&gt; Stream&lt; T&gt; stream(T[] array): 返回一个流 重载形式，能够处理对应基本类型的数组: public static IntStream stream(int[] array) public static LongStream stream(long[] array) public static DoubleStream stream(double[] array) 案例： 12Integer[] num = new Integer[23];Stream&lt;Integer&gt; stream1 = Arrays.stream(num);12 3.3 由值创建流可以使用静态方法 Stream.of(), 通过显示值 创建一个流。它可以接收任意数量的参数。public static&lt; T&gt; Stream&lt; T&gt; of(T… values) : 返回一个流 案例： 1Stream&lt;Integer&gt; stream2 = Stream.of(1, 5, 7); 3.4 由函数创建流可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。 迭代：public static&lt; T&gt; Stream&lt; T&gt; iterate(final T seed, final UnaryOperator&lt; T&gt; f) 生成：public static&lt; T&gt; Stream&lt; T&gt; generate(Supplier&lt; T&gt; s) 案例： 123456789// 迭代Stream&lt;Integer&gt; stream3 = Stream.iterate(0, (x) -&gt; x + 2).limit(2);stream3.forEach(System.out::println);System.out.println(&quot;-------------&quot;);// 生成Stream&lt;Double&gt; stream4 = Stream.generate(Math::random).limit(4);stream4.forEach(System.out::println);123456789 执行结果： 123456702-------------0.80093413282642290.33937273167260450.164029418307976570.189839641538307121234567 四、Stream的中间操作多个 中间操作 可以连接起来形成一个流水线，除非流水 线上触发终止操作，否则中间操作不会执行任何的处理! 而在终止操作时一次性全部处理，称为“惰性求值”。 4.1 筛选与切片 方法 描述 filter(Predicate p) 接收 Lambda ， 从流中排除某些元素。 distinct() 筛选，通过流所生成元素的 hashCode() 和 equals() 去 除重复元素 limit(long maxSize) 截断流，使其元素不超过给定数量 skip(long n) 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素 不足 n 个，则返回一个空流。与 limit(n) 互补 案例： 定义一个集合： Employee 重写 hashcode ， equals — 去重时使用 12345678List&lt;Employee&gt; emps = Arrays.asList( new Employee(101, &quot;林青霞&quot;, 28, 9889.99), new Employee(102, &quot;东方不败&quot;, 29, 4329.85), new Employee(103, &quot;周星驰&quot;, 40, 1233.88), new Employee(104, &quot;大圣&quot;, 500, 5000.44), new Employee(105, &quot;张无忌&quot;, 15, 3000.09), new Employee(102, &quot;东方不败&quot;, 29, 4329.85) );12345678 执行操作： 1.内部迭代 - 迭代操作由Stream API 完成操作 12345678910111213@Testpublic void test2() &#123; // 中间操作不会做任何处理 Stream&lt;Employee&gt; stream = emps.stream() .filter((e) -&gt; &#123; System.out.println(&quot;惰性求值&quot;); return e.getAge() &lt; 30; &#125;); System.out.println(&quot;--------------------&quot;); // 终止操作，一次性执行全部功能， 称为 &quot;惰性求值&quot; stream.forEach(System.out::println);&#125;12345678910111213 执行结果： 1234567891011--------------------惰性求值Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;惰性求值Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;惰性求值惰性求值惰性求值Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;惰性求值Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;1234567891011 2.外部迭代 12345678@Testpublic void test3() &#123; Iterator&lt;Employee&gt; iterator = emps.iterator(); while (iterator.hasNext()) &#123; System.out.println(iterator.next()); &#125; &#125;12345678 执行结果： 123456Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;Employee&#123;id=104, name=&apos;大圣&apos;, age=500, salary=5000.44, status=null&#125;Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;123456 3.中间操作 - 截断流 1234567@Testpublic void test4() &#123; emps.stream() .filter(employee -&gt; employee.getAge() &lt; 30) // 过滤年龄小于30的人 .limit(1) // 截取一个 .forEach(System.out::println); &#125;1234567 执行结果： 12Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;12 4.中间操作 - 跳过 12345678@Testpublic void test5() &#123; emps.stream() .filter(employee -&gt; employee.getAge() &lt; 30) .skip(2) .forEach(System.out::println); &#125;12345678 执行结果： 123Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;123 5.中间操作 - 筛选去重 123456@Testpublic void test6() &#123; emps.stream() .distinct() .forEach(System.out::println); &#125;123456 执行结果： 12345Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;Employee&#123;id=104, name=&apos;大圣&apos;, age=500, salary=5000.44, status=null&#125;Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;12345 4.2 映射 方法 描述 map(Function f) 接收一个函数作为参数，该函数会被应用到每个元 素上，并将其映射成一个新的元素。 mapToDouble(ToDoubleFunction f) 接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 DoubleStream。 mapToInt(ToIntFunction f) 接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 IntStream。 mapToLong(ToLongFunction f) 接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 LongStream。 flatMap(Function f) 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流 案例：1.map操作 1234567891011121314@Testpublic void test7() &#123; List&lt;String&gt; list = Arrays.asList(&quot;aaa&quot;, &quot;java&quot;, &quot;ccc&quot;, &quot;java8&quot;, &quot;hello world&quot;); list.stream() .map((x) -&gt; x.toUpperCase()) .forEach(System.out::println); System.out.println(&quot;-------------&quot;); emps.stream() .map(Employee::getAge) .forEach(System.out::println);&#125;1234567891011121314 执行结果： 123456789101112AAAJAVACCCJAVA8HELLO WORLD-------------2829405001529123456789101112 2.flatMap操作 先定义一个 filterCharacter(String str) 方法： 12345678private static Stream&lt;Character&gt; filterCharacter(String str) &#123; List&lt;Character&gt; characters = new ArrayList&lt;&gt;(); for (Character character : str.toCharArray()) &#123; characters.add(character); &#125; return characters.stream(); &#125;12345678 执行测试代码： 1234567891011121314151617181920@Testpublic void test8() &#123; List&lt;String&gt; list = Arrays.asList(&quot;aaa&quot;, &quot;hello world&quot;); Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream() .map(LambdaStramAPI::filterCharacter); streamStream.forEach((s) -&gt; &#123; s.forEach((c) -&gt; System.out.println(c + &quot;&quot;)); System.out.println(); &#125;); System.out.println(&quot;----------------------&quot;); list.stream() .flatMap(LambdaStramAPI::filterCharacter) .forEach(System.out::println);&#125;1234567891011121314151617181920 执行结果： 12345678910111213141516171819202122232425262728293031aaahelloworld----------------------aaahelloworld12345678910111213141516171819202122232425262728293031 4.3 排序 方法 描述 sorted() 产生一个新流，其中按自然顺序排序 sorted(Comparator comp) 产生一个新流，其中按比较器顺序排序 案例： 1234567891011121314@Testpublic void test9() &#123; emps.stream() .map(Employee::getSalary) .sorted() .forEach(System.out::println); System.out.println(&quot;-----------------&quot;); emps.stream() .map(Employee::getAge) .sorted(Integer::compare) .forEach(System.out::println);&#125;1234567891011121314 执行结果： 123456789101112131233.883000.094329.854329.855000.449889.99-----------------152829294050012345678910111213 五、 Stream的终止操作终止操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如:List、Integer，甚至是 void 。 5.1 查找与匹配 方法 描述 allMatch(Predicate p) 检查是否匹配所有元素 anyMatch(Predicate p) 检查是否至少匹配一个元素 noneMatch(Predicate p) 检查是否没有匹配所有元素 findFirst() 返回第一个元素 findAny() 返回当前流中的任意元素 count() 返回流中元素总数 max(Comparator c) 返回流中最大值 min(Comparator c) 返回流中最小值 forEach(Consumer c) 内部迭代(使用 Collection 接口需要用户去做迭 代，称为外部迭代。相反，Stream API 使用内部 迭代——它帮你把迭代做了) 案例：1.匹配 123456789101112131415161718@Testpublic void test10() &#123; boolean allMatch = emps.stream() .allMatch((employee -&gt; employee.getName().equals(&quot;林青霞&quot;))); System.out.println(allMatch); System.out.println(&quot;-----------------&quot;); boolean anyMatch = emps.stream() .anyMatch(employee -&gt; employee.getName().equals(&quot;林青霞&quot;)); System.out.println(anyMatch); System.out.println(&quot;-----------------&quot;); boolean noneMatch = emps.stream() .noneMatch(employee -&gt; employee.getName().equals(&quot;林青霞&quot;)); System.out.println(noneMatch);&#125;123456789101112131415161718 执行结果： 12345false-----------------true-----------------false12345 2.第一个元素 、 任意一个元素 123456789101112131415 @Testpublic void test12() &#123; Optional&lt;String&gt; first = emps.stream() .map(Employee::getName) .sorted() .findFirst(); // 获取第一个元素 System.out.println(first.get()); System.out.println(&quot;-----------------&quot;); Optional&lt;Employee&gt; findAny = emps.parallelStream() .filter(employee -&gt; employee.getName().equals(&quot;林青霞&quot;)) .findAny(); //任意一个元素 System.out.println(findAny.get());&#125;123456789101112131415 执行结果： 123东方不败-----------------Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;123 3.统计总个数、 最大、 最小值 1234567891011121314151617181920// 注意： 流一旦执行终止操作后， 就不能在重复使用@Testpublic void test13() &#123; Stream&lt;Employee&gt; stream = emps.stream(); long count = stream.count(); System.out.println(count); System.out.println(&quot;-----------------&quot;); Optional&lt;Double&gt; doubleOptional = emps.stream() .map(Employee::getSalary) .max(Double::compare); //最大值 System.out.println(doubleOptional.get()); System.out.println(&quot;-----------------&quot;); Optional&lt;Employee&gt; employeeOptional = emps.stream() .min((x, y) -&gt; Double.compare(x.getSalary(), y.getSalary())); // 最小值 System.out.println(employeeOptional.get());&#125;1234567891011121314151617181920 执行结果： 123456-----------------9889.99-----------------Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;12345 5.2 归约备注:map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它 来进行网络搜索而出名。 方法 描述 reduce(T iden, BinaryOperator b) 可以将流中元素反复结合起来，得到一个值。 返回 T reduce(BinaryOperator b) 可以将流中元素反复结合起来，得到一个值。 返回 Optional&lt; T&gt; 案例：1.求和 12345678@Testpublic void test14() &#123; List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); Integer sum = list.stream() .reduce(0, (x, y) -&gt; x + y); System.out.println(sum); &#125;12345678 执行结果： 1551 2.计算次数 12345678910111213141516171819@Testpublic void test15() &#123; Optional&lt;Double&gt; doubleOptional = emps.stream() .map(Employee::getSalary) .reduce(Double::max); System.out.println(doubleOptional); System.out.println(&quot;-----------------&quot;); //查看 东方不败 出现的次数 -- 【此处还有点毛病】 Optional&lt;Integer&gt; sumOptional = emps.stream() .map(Employee::getName) .flatMap(LambdaStramAPI::filterCharacter) .map((c) -&gt; &#123; if (c.equals(&quot;东&quot;)) return 1; else return 0; &#125;).reduce(Integer::sum); System.out.println(sumOptional.get());&#125;12345678910111213141516171819 执行结果： 123Optional[9889.99]-----------------0123 5.3 收集 方法 描述 collect(Collector c) 将流转换为其他形式。接收一个 Collector接口的 实现，用于给Stream中元素做汇总的方法 案例：1.收集 123456789101112131415161718192021@Testpublic void test16()&#123; List&lt;String&gt; collect = emps.stream() .map(Employee::getName) .collect(Collectors.toList()); collect.forEach(System.out::println); System.out.println(&quot;-------------------&quot;); Set&lt;String&gt; set = emps.stream() .map(Employee::getName) .collect(Collectors.toSet()); set.forEach(System.out::println); System.out.println(&quot;-------------------&quot;); HashSet&lt;String&gt; hashSet = emps.stream() .map(Employee::getName) .collect(Collectors.toCollection(HashSet::new)); hashSet.forEach(System.out::println);&#125;123456789101112131415161718192021 执行结果： 123456789101112131415161718林青霞东方不败周星驰大圣张无忌东方不败-------------------周星驰林青霞大圣东方不败张无忌-------------------周星驰林青霞大圣东方不败张无忌123456789101112131415161718 2.收集统计 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// 收集统计 @Test public void test17()&#123; // 统计总个数 Long count = emps.stream() .collect(Collectors.counting()); System.out.println(count); System.out.println(&quot;-------------------&quot;); // 求平均值 Double avg = emps.stream() .collect(Collectors.averagingDouble(Employee::getSalary)); System.out.println(avg); System.out.println(&quot;-------------------&quot;); // 求和 Double sum = emps.stream() .collect(Collectors.summingDouble(Employee::getSalary)); System.out.println(sum); System.out.println(&quot;-------------------&quot;); //求最大值 Optional&lt;Employee&gt; max = emps.stream() .collect(Collectors.maxBy((x, y) -&gt; Double.compare(x.getSalary(), y.getSalary()))); System.out.println(max.get()); System.out.println(&quot;-------------------&quot;); //求最小值 Optional&lt;Double&gt; min = emps.stream() .map(Employee::getSalary) .collect(Collectors.minBy(Double::compare)); System.out.println(min.get()); System.out.println(&quot;-------------------&quot;); //统计分析 DoubleSummaryStatistics doubleSummaryStatistics = emps.stream() .collect(Collectors.summarizingDouble(Employee::getSalary)); System.out.println(doubleSummaryStatistics.getAverage()); System.out.println(&quot;-------------------&quot;); //拼接 String join = emps.stream() .map(Employee::getName) .collect(Collectors.joining(&quot;,&quot;, &quot;--&quot;, &quot;--&quot;)); System.out.println(join); &#125;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253 执行结果： 123456789101112136-------------------4630.683333333333-------------------27784.1-------------------Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;-------------------1233.88-------------------4630.683333333333---------------------林青霞,东方不败,周星驰,大圣,张无忌,东方不败--12345678910111213 3.收集-分组 1234567// 分组@Testpublic void test18()&#123; Map&lt;String, List&lt;Employee&gt;&gt; group = emps.stream() .collect(Collectors.groupingBy(Employee::getName)); System.out.println(group);&#125;1234567 执行结果： 123456789&#123;周星驰=[Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;], 林青霞=[Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;], 大圣=[Employee&#123;id=104, name=&apos;大圣&apos;, age=500, salary=5000.44, status=null&#125;], 东方不败=[Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;, Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;], 张无忌=[Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;]&#125;123456789 4.收集-多级分组 1234567891011// 多级分组@Testpublic void test19()&#123; Map&lt;String, Map&lt;String, List&lt;Employee&gt;&gt;&gt; group = emps.stream() .collect(Collectors.groupingBy(Employee::getName, Collectors.groupingBy((e) -&gt; &#123; if (e.getAge() &lt; 30) return &quot;青年&quot;; else if (e.getAge() &lt; 50) return &quot;中年&quot;; else return &quot;老年&quot;; &#125;))); System.out.println(group);&#125;1234567891011 执行结果： 123456789&#123;周星驰=&#123;中年=[Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;]&#125;, 林青霞=&#123;青年=[Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;]&#125;, 大圣=&#123;老年=[Employee&#123;id=104, name=&apos;大圣&apos;, age=500, salary=5000.44, status=null&#125;]&#125;, 东方不败=&#123;青年=[Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;, Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;]&#125;, 张无忌=&#123;青年=[Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;]&#125;&#125;123456789 Collector 接口中方法的实现决定了如何对流执行收集操作(如收 集到 List、Set、Map)。但是 Collectors 实用类 供了很多静态 方法，可以方便地创建常见收集器实例，具体方法与实例如下表: 方法 返回类型 作用 toList List 把流中元素收集到List List emps= list.stream().collect(Collectors.toList()); toSet Set 把流中元素收集到Set Set emps= list.stream().collect(Collectors.toSet()); toCollection Collection 把流中元素收集到创建的集合 Collectionemps=list.stream().collect(Collectors.toCollection(ArrayList::new)); counting Long 计算流中元素的个数 long count = list.stream().collect(Collectors.counting()); summingInt Integer 对流中元素的整数属性求和 inttotal=list.stream().collect(Collectors.summingInt(Employee::getSalary)); averagingInt Double 计算流中元素Integer属性的平均 值 doubleavg= list.stream().collect(Collectors.averagingInt(Employee::getSalary)); summarizingInt IntSummaryStatistics 收集流中Integer属性的统计值。 如:平均值 IntSummaryStatisticsiss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary)); joining String 连接流中每个字符串 String str= list.stream().map(Employee::getName).collect(Collectors.joining()); maxBy Optional 根据比较器选择最大值 Optionalmax= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary))); minBy Optional 根据比较器选择最小值 Optional min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary))); reducing 归约产生的类型 从一个作为累加器的初始值 开始，利用BinaryOperator与 流中元素逐个结合，从而归 约成单个值 inttotal=list.stream().collect(Collectors.reducing(0, Employee::getSalar, Integer::sum)); collectingAndThen 转换函数返回的类型 包裹另一个收集器，对其结 果转换函数 inthow= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size)); groupingBy Map&lt;K, List&gt; 根据某属性值对流分组，属 性为K，结果为V Map&lt;Emp.Status, List&gt; map= list.stream() .collect(Collectors.groupingBy(Employee::getStatus)); partitioningBy Map&lt;Boolean, List&gt; 根据true或false进行分区 Map&lt;Boolean,List&gt;vd= list.stream().collect(Collectors.partitioningBy(Employee::getManage)); 相关源码地址：https://github.com/liudongdong0909/java8/tree/master/java8-Lambda/src/com/donggua 以上就是全文的内容，由于水平有限，文章中难免会有错误，希望大家指正。谢谢~ 参考文章JAVA8新特性——StreamAPI","content":"<h1 id=\"Stream-API\"><a href=\"#Stream-API\" class=\"headerlink\" title=\"Stream API\"></a>Stream API</h1><blockquote>\n<p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式 ;另外一 个则是 Stream API(java.util.stream.*) 。<br>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对 集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。<br>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数 据库查询。也可以使用 Stream API 来并行执行操作。简而言之， Stream API 供了一种高效且易于使用的处理数据的方式。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"一、什么是-Stream\"><a href=\"#一、什么是-Stream\" class=\"headerlink\" title=\"一、什么是 Stream\"></a>一、什么是 Stream</h2><p>流(Stream) 到底是什么呢? 是数据渠道，用于操作数据源(集合、数组等)所生成的元素序列。集合讲的是数据，流讲的是计算!<br><strong>注意:</strong> </p>\n<ol>\n<li>Stream自己不会存储元素。 </li>\n<li>Stream不会改变原对象。相反，他们会返回一个持有结果的新Stream。 </li>\n<li>Stream操作是延迟执行。这意味着他们会等到需要结果的时候才执行。</li>\n</ol>\n<h2 id=\"二、Stream操作的三个步骤\"><a href=\"#二、Stream操作的三个步骤\" class=\"headerlink\" title=\"二、Stream操作的三个步骤\"></a>二、Stream操作的三个步骤</h2><h3 id=\"2-1-创建stream\"><a href=\"#2-1-创建stream\" class=\"headerlink\" title=\"2.1 创建stream\"></a>2.1 创建stream</h3><blockquote>\n<p>一个数据源（如：集合或数组），获取一个流</p>\n</blockquote>\n<h3 id=\"2-2-中间操作\"><a href=\"#2-2-中间操作\" class=\"headerlink\" title=\"2.2 中间操作\"></a>2.2 中间操作</h3><blockquote>\n<p>一个中间操作链，对数据源的数据进行处理。</p>\n</blockquote>\n<h3 id=\"2-3-终止操作\"><a href=\"#2-3-终止操作\" class=\"headerlink\" title=\"2.3 终止操作\"></a>2.3 终止操作</h3><blockquote>\n<p>一个终止操作，执行中间操作链，并产生结果。</p>\n</blockquote>\n<h2 id=\"三、创建Stream的四种方式\"><a href=\"#三、创建Stream的四种方式\" class=\"headerlink\" title=\"三、创建Stream的四种方式\"></a>三、创建Stream的四种方式</h2><h3 id=\"3-1-由Collection创建流\"><a href=\"#3-1-由Collection创建流\" class=\"headerlink\" title=\"3.1 由Collection创建流\"></a>3.1 由Collection创建流</h3><p>Java8 中的 Collection 接口被扩展， 供了两个获取流的方法: </p>\n<ul>\n<li>default Stream&lt; E&gt; stream() : 返回一个顺序流 </li>\n<li>default Stream&lt; E&gt; parallelStream() : 返回一个并行流</li>\n</ul>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">Stream&lt;Employee&gt; stream = list.stream();</span><br><span class=\"line\">Stream&lt;Employee&gt; parallelStream = list.parallelStream();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-由数组创建流\"><a href=\"#3-2-由数组创建流\" class=\"headerlink\" title=\"3.2 由数组创建流\"></a>3.2 由数组创建流</h3><p>通过 Arrays中的静态方法 stream() 创建数据源 。<br>static &lt; T&gt; Stream&lt; T&gt; stream(T[] array): 返回一个流</p>\n<p>重载形式，能够处理对应基本类型的数组: </p>\n<ul>\n<li>public static IntStream stream(int[] array) </li>\n<li>public static LongStream stream(long[] array) </li>\n<li>public static DoubleStream stream(double[] array)</li>\n</ul>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer[] num = new Integer[23];</span><br><span class=\"line\">Stream&lt;Integer&gt; stream1 = Arrays.stream(num);12</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-由值创建流\"><a href=\"#3-3-由值创建流\" class=\"headerlink\" title=\"3.3 由值创建流\"></a>3.3 由值创建流</h3><p>可以使用静态方法 Stream.of(), 通过显示值 创建一个流。它可以接收任意数量的参数。<br>public static&lt; T&gt; Stream&lt; T&gt; of(T… values) : 返回一个流</p>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Stream&lt;Integer&gt; stream2 = Stream.of(1, 5, 7);</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-由函数创建流\"><a href=\"#3-4-由函数创建流\" class=\"headerlink\" title=\"3.4 由函数创建流\"></a>3.4 由函数创建流</h3><p>可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。 </p>\n<ul>\n<li>迭代：public static&lt; T&gt; Stream&lt; T&gt; iterate(final T seed, final UnaryOperator&lt; T&gt; f) </li>\n<li>生成：public static&lt; T&gt; Stream&lt; T&gt; generate(Supplier&lt; T&gt; s)</li>\n</ul>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 迭代</span><br><span class=\"line\">Stream&lt;Integer&gt; stream3 = Stream.iterate(0, (x) -&gt; x + 2).limit(2);</span><br><span class=\"line\">stream3.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.println(&quot;-------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成</span><br><span class=\"line\">Stream&lt;Double&gt; stream4 = Stream.generate(Math::random).limit(4);</span><br><span class=\"line\">stream4.forEach(System.out::println);123456789</span><br></pre></td></tr></table></figure>\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">2</span><br><span class=\"line\">-------------</span><br><span class=\"line\">0.8009341328264229</span><br><span class=\"line\">0.3393727316726045</span><br><span class=\"line\">0.16402941830797657</span><br><span class=\"line\">0.189839641538307121234567</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、Stream的中间操作\"><a href=\"#四、Stream的中间操作\" class=\"headerlink\" title=\"四、Stream的中间操作\"></a>四、Stream的中间操作</h2><p>多个 中间操作 可以连接起来形成一个流水线，除非流水 线上触发终止操作，否则中间操作不会执行任何的处理! 而在终止操作时一次性全部处理，称为“惰性求值”。</p>\n<h3 id=\"4-1-筛选与切片\"><a href=\"#4-1-筛选与切片\" class=\"headerlink\" title=\"4.1 筛选与切片\"></a>4.1 筛选与切片</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter(Predicate p)</td>\n<td>接收 Lambda ， 从流中排除某些元素。</td>\n</tr>\n<tr>\n<td>distinct()</td>\n<td>筛选，通过流所生成元素的 hashCode() 和 equals() 去 除重复元素</td>\n</tr>\n<tr>\n<td>limit(long maxSize)</td>\n<td>截断流，使其元素不超过给定数量</td>\n</tr>\n<tr>\n<td>skip(long n)</td>\n<td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素 不足 n 个，则返回一个空流。与 limit(n) 互补</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong></p>\n<p>定义一个集合： Employee 重写 hashcode ， equals — 去重时使用</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class=\"line\">          new Employee(101, &quot;林青霞&quot;, 28, 9889.99),</span><br><span class=\"line\">          new Employee(102, &quot;东方不败&quot;, 29, 4329.85),</span><br><span class=\"line\">          new Employee(103, &quot;周星驰&quot;, 40, 1233.88),</span><br><span class=\"line\">          new Employee(104, &quot;大圣&quot;, 500, 5000.44),</span><br><span class=\"line\">          new Employee(105, &quot;张无忌&quot;, 15, 3000.09),</span><br><span class=\"line\">          new Employee(102, &quot;东方不败&quot;, 29, 4329.85)</span><br><span class=\"line\">  );12345678</span><br></pre></td></tr></table></figure>\n<p><strong>执行操作：</strong></p>\n<p>1.内部迭代 - 迭代操作由Stream API 完成操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test2() &#123;</span><br><span class=\"line\">    // 中间操作不会做任何处理</span><br><span class=\"line\">    Stream&lt;Employee&gt; stream = emps.stream()</span><br><span class=\"line\">            .filter((e) -&gt; &#123;</span><br><span class=\"line\">                System.out.println(&quot;惰性求值&quot;);</span><br><span class=\"line\">                return e.getAge() &lt; 30;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    System.out.println(&quot;--------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 终止操作，一次性执行全部功能， 称为 &quot;惰性求值&quot;</span><br><span class=\"line\">    stream.forEach(System.out::println);</span><br><span class=\"line\">&#125;12345678910111213</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;1234567891011</span><br></pre></td></tr></table></figure>\n<p>2.外部迭代</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test3() &#123;</span><br><span class=\"line\">     Iterator&lt;Employee&gt; iterator = emps.iterator();</span><br><span class=\"line\"></span><br><span class=\"line\">     while (iterator.hasNext()) &#123;</span><br><span class=\"line\">         System.out.println(iterator.next());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;12345678</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=104, name=&apos;大圣&apos;, age=500, salary=5000.44, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;123456</span><br></pre></td></tr></table></figure>\n<p>3.中间操作 - 截断流</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test4() &#123;</span><br><span class=\"line\">     emps.stream()</span><br><span class=\"line\">             .filter(employee -&gt; employee.getAge() &lt; 30) // 过滤年龄小于30的人</span><br><span class=\"line\">             .limit(1) // 截取一个</span><br><span class=\"line\">             .forEach(System.out::println);</span><br><span class=\"line\"> &#125;1234567</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<p>4.中间操作 - 跳过</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test5() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     emps.stream()</span><br><span class=\"line\">             .filter(employee -&gt; employee.getAge() &lt; 30)</span><br><span class=\"line\">             .skip(2)</span><br><span class=\"line\">             .forEach(System.out::println);</span><br><span class=\"line\"> &#125;12345678</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n<p>5.中间操作 - 筛选去重</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test6() &#123;</span><br><span class=\"line\">     emps.stream()</span><br><span class=\"line\">             .distinct()</span><br><span class=\"line\">             .forEach(System.out::println);</span><br><span class=\"line\"> &#125;123456</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=104, name=&apos;大圣&apos;, age=500, salary=5000.44, status=null&#125;</span><br><span class=\"line\">Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;12345</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-映射\"><a href=\"#4-2-映射\" class=\"headerlink\" title=\"4.2 映射\"></a>4.2 映射</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>map(Function f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元 素上，并将其映射成一个新的元素。</td>\n</tr>\n<tr>\n<td>mapToDouble(ToDoubleFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 DoubleStream。</td>\n</tr>\n<tr>\n<td>mapToInt(ToIntFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 IntStream。</td>\n</tr>\n<tr>\n<td>mapToLong(ToLongFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 LongStream。</td>\n</tr>\n<tr>\n<td>flatMap(Function f)</td>\n<td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong><br>1.map操作</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test7() &#123;</span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(&quot;aaa&quot;, &quot;java&quot;, &quot;ccc&quot;, &quot;java8&quot;, &quot;hello world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    list.stream()</span><br><span class=\"line\">            .map((x) -&gt; x.toUpperCase())</span><br><span class=\"line\">            .forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;-------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    emps.stream()</span><br><span class=\"line\">            .map(Employee::getAge)</span><br><span class=\"line\">            .forEach(System.out::println);</span><br><span class=\"line\">&#125;1234567891011121314</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AAA</span><br><span class=\"line\">JAVA</span><br><span class=\"line\">CCC</span><br><span class=\"line\">JAVA8</span><br><span class=\"line\">HELLO WORLD</span><br><span class=\"line\">-------------</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">40</span><br><span class=\"line\">500</span><br><span class=\"line\">15</span><br><span class=\"line\">29123456789101112</span><br></pre></td></tr></table></figure>\n<p>2.flatMap操作</p>\n<p>先定义一个 filterCharacter(String str) 方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static Stream&lt;Character&gt; filterCharacter(String str) &#123;</span><br><span class=\"line\">        List&lt;Character&gt; characters = new ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        for (Character character : str.toCharArray()) &#123;</span><br><span class=\"line\">            characters.add(character);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return characters.stream();</span><br><span class=\"line\">    &#125;12345678</span><br></pre></td></tr></table></figure>\n<p>执行测试代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test8() &#123;</span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(&quot;aaa&quot;, &quot;hello world&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream()</span><br><span class=\"line\">            .map(LambdaStramAPI::filterCharacter);</span><br><span class=\"line\"></span><br><span class=\"line\">    streamStream.forEach((s) -&gt; &#123;</span><br><span class=\"line\">        s.forEach((c) -&gt; System.out.println(c + &quot;&quot;));</span><br><span class=\"line\">        System.out.println();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;----------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    list.stream()</span><br><span class=\"line\">            .flatMap(LambdaStramAPI::filterCharacter)</span><br><span class=\"line\">            .forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;1234567891011121314151617181920</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">a</span><br><span class=\"line\">a</span><br><span class=\"line\"></span><br><span class=\"line\">h</span><br><span class=\"line\">e</span><br><span class=\"line\">l</span><br><span class=\"line\">l</span><br><span class=\"line\">o</span><br><span class=\"line\"></span><br><span class=\"line\">w</span><br><span class=\"line\">o</span><br><span class=\"line\">r</span><br><span class=\"line\">l</span><br><span class=\"line\">d</span><br><span class=\"line\"></span><br><span class=\"line\">----------------------</span><br><span class=\"line\">a</span><br><span class=\"line\">a</span><br><span class=\"line\">a</span><br><span class=\"line\">h</span><br><span class=\"line\">e</span><br><span class=\"line\">l</span><br><span class=\"line\">l</span><br><span class=\"line\">o</span><br><span class=\"line\"></span><br><span class=\"line\">w</span><br><span class=\"line\">o</span><br><span class=\"line\">r</span><br><span class=\"line\">l</span><br><span class=\"line\">d12345678910111213141516171819202122232425262728293031</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-排序\"><a href=\"#4-3-排序\" class=\"headerlink\" title=\"4.3 排序\"></a>4.3 排序</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sorted()</td>\n<td>产生一个新流，其中按自然顺序排序</td>\n</tr>\n<tr>\n<td>sorted(Comparator comp)</td>\n<td>产生一个新流，其中按比较器顺序排序</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test9() &#123;</span><br><span class=\"line\">    emps.stream()</span><br><span class=\"line\">            .map(Employee::getSalary)</span><br><span class=\"line\">            .sorted()</span><br><span class=\"line\">            .forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;-----------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    emps.stream()</span><br><span class=\"line\">            .map(Employee::getAge)</span><br><span class=\"line\">            .sorted(Integer::compare)</span><br><span class=\"line\">            .forEach(System.out::println);</span><br><span class=\"line\">&#125;1234567891011121314</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1233.88</span><br><span class=\"line\">3000.09</span><br><span class=\"line\">4329.85</span><br><span class=\"line\">4329.85</span><br><span class=\"line\">5000.44</span><br><span class=\"line\">9889.99</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">15</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">29</span><br><span class=\"line\">40</span><br><span class=\"line\">50012345678910111213</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、-Stream的终止操作\"><a href=\"#五、-Stream的终止操作\" class=\"headerlink\" title=\"五、 Stream的终止操作\"></a>五、 Stream的终止操作</h2><p>终止操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如:List、Integer，甚至是 void 。</p>\n<h3 id=\"5-1-查找与匹配\"><a href=\"#5-1-查找与匹配\" class=\"headerlink\" title=\"5.1 查找与匹配\"></a>5.1 查找与匹配</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allMatch(Predicate p)</td>\n<td>检查是否匹配所有元素</td>\n</tr>\n<tr>\n<td>anyMatch(Predicate p)</td>\n<td>检查是否至少匹配一个元素</td>\n</tr>\n<tr>\n<td>noneMatch(Predicate p)</td>\n<td>检查是否没有匹配所有元素</td>\n</tr>\n<tr>\n<td>findFirst()</td>\n<td>返回第一个元素</td>\n</tr>\n<tr>\n<td>findAny()</td>\n<td>返回当前流中的任意元素</td>\n</tr>\n<tr>\n<td>count()</td>\n<td>返回流中元素总数</td>\n</tr>\n<tr>\n<td>max(Comparator c)</td>\n<td>返回流中最大值</td>\n</tr>\n<tr>\n<td>min(Comparator c)</td>\n<td>返回流中最小值</td>\n</tr>\n<tr>\n<td>forEach(Consumer c)</td>\n<td>内部迭代(使用 Collection 接口需要用户去做迭 代，称为外部迭代。相反，Stream API 使用内部 迭代——它帮你把迭代做了)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong><br>1.匹配</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test10() &#123;</span><br><span class=\"line\">    boolean allMatch = emps.stream()</span><br><span class=\"line\">            .allMatch((employee -&gt; employee.getName().equals(&quot;林青霞&quot;)));</span><br><span class=\"line\">    System.out.println(allMatch);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;-----------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean anyMatch = emps.stream()</span><br><span class=\"line\">            .anyMatch(employee -&gt; employee.getName().equals(&quot;林青霞&quot;));</span><br><span class=\"line\">    System.out.println(anyMatch);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;-----------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean noneMatch = emps.stream()</span><br><span class=\"line\">            .noneMatch(employee -&gt; employee.getName().equals(&quot;林青霞&quot;));</span><br><span class=\"line\">    System.out.println(noneMatch);</span><br><span class=\"line\">&#125;123456789101112131415161718</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">true</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">false12345</span><br></pre></td></tr></table></figure>\n<p>2.第一个元素 、 任意一个元素</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> @Test</span><br><span class=\"line\">public void test12() &#123;</span><br><span class=\"line\">    Optional&lt;String&gt; first = emps.stream()</span><br><span class=\"line\">            .map(Employee::getName)</span><br><span class=\"line\">            .sorted()</span><br><span class=\"line\">            .findFirst(); // 获取第一个元素</span><br><span class=\"line\">    System.out.println(first.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;-----------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Employee&gt; findAny = emps.parallelStream()</span><br><span class=\"line\">            .filter(employee -&gt; employee.getName().equals(&quot;林青霞&quot;))</span><br><span class=\"line\">            .findAny(); //任意一个元素</span><br><span class=\"line\">    System.out.println(findAny.get());</span><br><span class=\"line\">&#125;123456789101112131415</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">东方不败</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;123</span><br></pre></td></tr></table></figure>\n<p>3.统计总个数、 最大、 最小值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 注意： 流一旦执行终止操作后， 就不能在重复使用</span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void test13() &#123;</span><br><span class=\"line\">    Stream&lt;Employee&gt; stream = emps.stream();</span><br><span class=\"line\">    long count = stream.count();</span><br><span class=\"line\">    System.out.println(count);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;-----------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Double&gt; doubleOptional = emps.stream()</span><br><span class=\"line\">            .map(Employee::getSalary)</span><br><span class=\"line\">            .max(Double::compare); //最大值</span><br><span class=\"line\">    System.out.println(doubleOptional.get());</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;-----------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Employee&gt; employeeOptional = emps.stream()</span><br><span class=\"line\">            .min((x, y) -&gt; Double.compare(x.getSalary(),  y.getSalary())); // 最小值</span><br><span class=\"line\">    System.out.println(employeeOptional.get());</span><br><span class=\"line\">&#125;1234567891011121314151617181920</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">9889.99</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;12345</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-归约\"><a href=\"#5-2-归约\" class=\"headerlink\" title=\"5.2 归约\"></a>5.2 归约</h3><p><strong>备注:map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它 来进行网络搜索而出名。</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reduce(T iden, BinaryOperator b)</td>\n<td>可以将流中元素反复结合起来，得到一个值。 返回 T</td>\n</tr>\n<tr>\n<td>reduce(BinaryOperator b)</td>\n<td>可以将流中元素反复结合起来，得到一个值。 返回 Optional&lt; T&gt;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong><br>1.求和</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test14() &#123;</span><br><span class=\"line\">     List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);</span><br><span class=\"line\"></span><br><span class=\"line\">     Integer sum = list.stream()</span><br><span class=\"line\">             .reduce(0, (x, y) -&gt; x + y);</span><br><span class=\"line\">     System.out.println(sum);</span><br><span class=\"line\"> &#125;12345678</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">551</span><br></pre></td></tr></table></figure>\n<p>2.计算次数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test15() &#123;</span><br><span class=\"line\">    Optional&lt;Double&gt; doubleOptional = emps.stream()</span><br><span class=\"line\">            .map(Employee::getSalary)</span><br><span class=\"line\">            .reduce(Double::max);</span><br><span class=\"line\">    System.out.println(doubleOptional);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(&quot;-----------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">    //查看 东方不败 出现的次数 -- 【此处还有点毛病】</span><br><span class=\"line\">    Optional&lt;Integer&gt; sumOptional = emps.stream()</span><br><span class=\"line\">            .map(Employee::getName)</span><br><span class=\"line\">            .flatMap(LambdaStramAPI::filterCharacter)</span><br><span class=\"line\">            .map((c) -&gt; &#123;</span><br><span class=\"line\">                if (c.equals(&quot;东&quot;)) return 1;</span><br><span class=\"line\">                else return 0;</span><br><span class=\"line\">            &#125;).reduce(Integer::sum);</span><br><span class=\"line\">    System.out.println(sumOptional.get());</span><br><span class=\"line\">&#125;12345678910111213141516171819</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[9889.99]</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">0123</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-收集\"><a href=\"#5-3-收集\" class=\"headerlink\" title=\"5.3 收集\"></a>5.3 收集</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>collect(Collector c)</td>\n<td>将流转换为其他形式。接收一个 Collector接口的 实现，用于给Stream中元素做汇总的方法</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong><br>1.收集</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test16()&#123;</span><br><span class=\"line\">   List&lt;String&gt; collect = emps.stream()</span><br><span class=\"line\">           .map(Employee::getName)</span><br><span class=\"line\">           .collect(Collectors.toList());</span><br><span class=\"line\">   collect.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">   System.out.println(&quot;-------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   Set&lt;String&gt; set = emps.stream()</span><br><span class=\"line\">           .map(Employee::getName)</span><br><span class=\"line\">           .collect(Collectors.toSet());</span><br><span class=\"line\">   set.forEach(System.out::println);</span><br><span class=\"line\"></span><br><span class=\"line\">   System.out.println(&quot;-------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">   HashSet&lt;String&gt; hashSet = emps.stream()</span><br><span class=\"line\">           .map(Employee::getName)</span><br><span class=\"line\">           .collect(Collectors.toCollection(HashSet::new));</span><br><span class=\"line\">   hashSet.forEach(System.out::println);</span><br><span class=\"line\">&#125;123456789101112131415161718192021</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">林青霞</span><br><span class=\"line\">东方不败</span><br><span class=\"line\">周星驰</span><br><span class=\"line\">大圣</span><br><span class=\"line\">张无忌</span><br><span class=\"line\">东方不败</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">周星驰</span><br><span class=\"line\">林青霞</span><br><span class=\"line\">大圣</span><br><span class=\"line\">东方不败</span><br><span class=\"line\">张无忌</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">周星驰</span><br><span class=\"line\">林青霞</span><br><span class=\"line\">大圣</span><br><span class=\"line\">东方不败</span><br><span class=\"line\">张无忌123456789101112131415161718</span><br></pre></td></tr></table></figure>\n<p>2.收集统计</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 收集统计</span><br><span class=\"line\"> @Test</span><br><span class=\"line\"> public  void test17()&#123;</span><br><span class=\"line\">     // 统计总个数</span><br><span class=\"line\">     Long count = emps.stream()</span><br><span class=\"line\">             .collect(Collectors.counting());</span><br><span class=\"line\">     System.out.println(count);</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(&quot;-------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">     // 求平均值</span><br><span class=\"line\">     Double avg = emps.stream()</span><br><span class=\"line\">             .collect(Collectors.averagingDouble(Employee::getSalary));</span><br><span class=\"line\">     System.out.println(avg);</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(&quot;-------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">     // 求和</span><br><span class=\"line\">     Double sum = emps.stream()</span><br><span class=\"line\">             .collect(Collectors.summingDouble(Employee::getSalary));</span><br><span class=\"line\">     System.out.println(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(&quot;-------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">     //求最大值</span><br><span class=\"line\">     Optional&lt;Employee&gt; max = emps.stream()</span><br><span class=\"line\">             .collect(Collectors.maxBy((x, y) -&gt; Double.compare(x.getSalary(), y.getSalary())));</span><br><span class=\"line\">     System.out.println(max.get());</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(&quot;-------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">     //求最小值</span><br><span class=\"line\">     Optional&lt;Double&gt; min = emps.stream()</span><br><span class=\"line\">             .map(Employee::getSalary)</span><br><span class=\"line\">             .collect(Collectors.minBy(Double::compare));</span><br><span class=\"line\">     System.out.println(min.get());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(&quot;-------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">     //统计分析</span><br><span class=\"line\">     DoubleSummaryStatistics doubleSummaryStatistics = emps.stream()</span><br><span class=\"line\">             .collect(Collectors.summarizingDouble(Employee::getSalary));</span><br><span class=\"line\">     System.out.println(doubleSummaryStatistics.getAverage());</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.println(&quot;-------------------&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">     //拼接</span><br><span class=\"line\">     String join = emps.stream()</span><br><span class=\"line\">             .map(Employee::getName)</span><br><span class=\"line\">             .collect(Collectors.joining(&quot;,&quot;, &quot;--&quot;, &quot;--&quot;));</span><br><span class=\"line\">     System.out.println(join);</span><br><span class=\"line\"> &#125;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">4630.683333333333</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">27784.1</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">1233.88</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">4630.683333333333</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">--林青霞,东方不败,周星驰,大圣,张无忌,东方不败--12345678910111213</span><br></pre></td></tr></table></figure>\n<p>3.收集-分组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 分组</span><br><span class=\"line\">@Test</span><br><span class=\"line\">public  void test18()&#123;</span><br><span class=\"line\">    Map&lt;String, List&lt;Employee&gt;&gt; group = emps.stream()</span><br><span class=\"line\">            .collect(Collectors.groupingBy(Employee::getName));</span><br><span class=\"line\">    System.out.println(group);</span><br><span class=\"line\">&#125;1234567</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">周星驰=[Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;], </span><br><span class=\"line\">林青霞=[Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;], </span><br><span class=\"line\">大圣=[Employee&#123;id=104, name=&apos;大圣&apos;, age=500, salary=5000.44, status=null&#125;], </span><br><span class=\"line\">东方不败=[</span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;, </span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;</span><br><span class=\"line\">], </span><br><span class=\"line\">张无忌=[Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;]&#125;123456789</span><br></pre></td></tr></table></figure>\n<p>4.收集-多级分组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 多级分组</span><br><span class=\"line\">@Test</span><br><span class=\"line\">public void test19()&#123;</span><br><span class=\"line\">    Map&lt;String, Map&lt;String, List&lt;Employee&gt;&gt;&gt; group = emps.stream()</span><br><span class=\"line\">            .collect(Collectors.groupingBy(Employee::getName, Collectors.groupingBy((e) -&gt; &#123;</span><br><span class=\"line\">                if (e.getAge() &lt; 30) return &quot;青年&quot;;</span><br><span class=\"line\">                else if (e.getAge() &lt; 50) return &quot;中年&quot;;</span><br><span class=\"line\">                else return &quot;老年&quot;;</span><br><span class=\"line\">            &#125;)));</span><br><span class=\"line\">    System.out.println(group);</span><br><span class=\"line\">&#125;1234567891011</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;周星驰=&#123;中年=[Employee&#123;id=103, name=&apos;周星驰&apos;, age=40, salary=1233.88, status=null&#125;]&#125;, </span><br><span class=\"line\">林青霞=&#123;青年=[Employee&#123;id=101, name=&apos;林青霞&apos;, age=28, salary=9889.99, status=null&#125;]&#125;, </span><br><span class=\"line\">大圣=&#123;老年=[Employee&#123;id=104, name=&apos;大圣&apos;, age=500, salary=5000.44, status=null&#125;]&#125;, </span><br><span class=\"line\">东方不败=&#123;青年=[</span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;, </span><br><span class=\"line\">Employee&#123;id=102, name=&apos;东方不败&apos;, age=29, salary=4329.85, status=null&#125;</span><br><span class=\"line\">]&#125;, </span><br><span class=\"line\">张无忌=&#123;青年=[Employee&#123;id=105, name=&apos;张无忌&apos;, age=15, salary=3000.09, status=null&#125;]&#125;&#125;</span><br><span class=\"line\">123456789</span><br></pre></td></tr></table></figure>\n<p><strong>Collector 接口中方法的实现决定了如何对流执行收集操作(如收 集到 List、Set、Map)。但是 Collectors 实用类 供了很多静态 方法，可以方便地创建常见收集器实例，具体方法与实例如下表:</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>toList</td>\n<td>List<t></t></td>\n<td>把流中元素收集到List</td>\n</tr>\n<tr>\n<td>List<employee> emps= list.stream().collect(Collectors.toList());</employee></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>toSet</td>\n<td>Set<t></t></td>\n<td>把流中元素收集到Set</td>\n</tr>\n<tr>\n<td>Set<employee> emps= list.stream().collect(Collectors.toSet());</employee></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>toCollection</td>\n<td>Collection<t></t></td>\n<td>把流中元素收集到创建的集合</td>\n</tr>\n<tr>\n<td>Collection<employee>emps=list.stream().collect(Collectors.toCollection(ArrayList::new));</employee></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>counting</td>\n<td>Long</td>\n<td>计算流中元素的个数</td>\n</tr>\n<tr>\n<td>long count = list.stream().collect(Collectors.counting());</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>summingInt</td>\n<td>Integer</td>\n<td>对流中元素的整数属性求和</td>\n</tr>\n<tr>\n<td>inttotal=list.stream().collect(Collectors.summingInt(Employee::getSalary));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>averagingInt</td>\n<td>Double</td>\n<td>计算流中元素Integer属性的平均 值</td>\n</tr>\n<tr>\n<td>doubleavg= list.stream().collect(Collectors.averagingInt(Employee::getSalary));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>summarizingInt</td>\n<td>IntSummaryStatistics</td>\n<td>收集流中Integer属性的统计值。 如:平均值</td>\n</tr>\n<tr>\n<td>IntSummaryStatisticsiss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>joining</td>\n<td>String</td>\n<td>连接流中每个字符串</td>\n</tr>\n<tr>\n<td>String str= list.stream().map(Employee::getName).collect(Collectors.joining());</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>maxBy</td>\n<td>Optional<t></t></td>\n<td>根据比较器选择最大值</td>\n</tr>\n<tr>\n<td>Optional<emp>max= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));</emp></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>minBy</td>\n<td>Optional<t></t></td>\n<td>根据比较器选择最小值</td>\n</tr>\n<tr>\n<td>Optional<emp> min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));</emp></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>reducing</td>\n<td>归约产生的类型</td>\n<td>从一个作为累加器的初始值 开始，利用BinaryOperator与 流中元素逐个结合，从而归 约成单个值</td>\n</tr>\n<tr>\n<td>inttotal=list.stream().collect(Collectors.reducing(0, Employee::getSalar, Integer::sum));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>collectingAndThen</td>\n<td>转换函数返回的类型</td>\n<td>包裹另一个收集器，对其结 果转换函数</td>\n</tr>\n<tr>\n<td>inthow= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>groupingBy</td>\n<td>Map&lt;K, List<t>&gt;</t></td>\n<td>根据某属性值对流分组，属 性为K，结果为V</td>\n</tr>\n<tr>\n<td>Map&lt;Emp.Status, List<emp>&gt; map= list.stream() .collect(Collectors.groupingBy(Employee::getStatus));</emp></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>partitioningBy</td>\n<td>Map&lt;Boolean, List<t>&gt;</t></td>\n<td>根据true或false进行分区</td>\n</tr>\n<tr>\n<td>Map&lt;Boolean,List<emp>&gt;vd= list.stream().collect(Collectors.partitioningBy(Employee::getManage));</emp></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://github.com/liudongdong0909/java8/tree/master/java8-Lambda/src/com/donggua\" target=\"_blank\" rel=\"noopener\">相关源码地址：https://github.com/liudongdong0909/java8/tree/master/java8-Lambda/src/com/donggua</a></p>\n<p>以上就是全文的内容，由于水平有限，文章中难免会有错误，希望大家指正。谢谢~</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://blog.csdn.net/liudongdong0909/article/details/77429875\" target=\"_blank\" rel=\"noopener\">JAVA8新特性——StreamAPI</a></p>\n"},{"title":"Hello World","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"}]}