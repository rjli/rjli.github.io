{"pages":[{"title":"","date":"2018-07-12T07:06:42.860Z","updated":"2018-07-12T07:03:11.989Z","comments":true,"path":"images/流媒体.html","permalink":"http://yoursite.com/images/流媒体.html","excerpt":"","text":"流媒体 流媒体（Streaming media）是指将一连串的媒体数据压缩后，经过网络分段发送数据，在网络上即时传输影音以供观赏的一种技术与过程，此技术使得数据包得以像流水一样发送；如果不使用此技术，就必须在使用前下载整个媒体文件。 流媒体协议介绍常见的流媒体协议有很多比如: RTP(Real-time Transport Protocol), 常用语电话会议, 网络电话等场景, 但是缺点是不提供网络保障 RTCP(Real-time Transport Control Protocol), 是实时传输协议（RTP）的一个姐妹协议, 也常用于语电话会议, 网络电话等场景. RTMP(Real Time Streaming Protocol), RTMP是Adobe开发的协议 HLS(HTTP Live Streaming)是苹果公司(Apple Inc.)实现的基于HTTP的流媒体传输协议，可实现流媒体的直播和点播 RTMPReal Time Messaging Protocol（简称 RTMP）是 Macromedia 开发的一套视频直播协议，现在属于 Adobe。和HLS一样都可以应用于视频直播，区别是RTMP基于flash无法在ios的浏览器里播放，但是实时性比HLS要好。所以一般使用这种协议来上传视频流，也就是视频流推送到服务器。 RTSP协议（ 实时流协议)是一种基于文本的应用层协议，在语法及一些消息参数等方面，RTSP协议与HTTP协议类似。 RTSP 以客户服务器方式工作，它是一个多媒体播放控制协议，用来使用户在播放从因特网下载的实时数据时能够进行控制，如：暂停/继续、后退、前进等。因此 RTSP 又称为“因特网录像机遥控协议”。 要实现 RTSP 的控制功能，不仅要有协议，而且要有专门的媒体播放器(media player)和媒体服务器(media server)。媒体服务器与媒体播放器的关系是服务器与客户的关系。 HLS备注用于视频录制和直播: OBS [http://www.obsapp.net/#] ffmpeg vlc 【相关文章】 1.H5在线直播"},{"title":"","date":"2018-07-12T11:46:50.990Z","updated":"2018-07-12T07:03:11.991Z","comments":true,"path":"images/海康摄像头获取rtsp.html","permalink":"http://yoursite.com/images/海康摄像头获取rtsp.html","excerpt":"","text":"海康视屏获取rtsp1、登录企业视屏管理平台，系统登录界面如下所示： 企 业 名 称：虹桥药用访 问 地 址：http://www.hik-online.com/rchongqiao用户名/密码：admin/hbj3022810 2.登录成功之后的在配置中查找都赢的RTSP对应的端口号，此处为外网端口为2554。 3.查看视频编码设置,此处的视频采用H.264编码实现。 4.登录9800平台，查看对应的摄像头的通道信息（可省略） 访问地址：10.1.12.3:8090 用户名/密码： admin /Rchb2016 5.查看设备型号（可省略） 6.查看系统对应的摄像头的通道号：（可省略） 7.得到rtsp地址 URL规定： 1rtsp://username:password@&lt;ipaddress&gt;/&lt;videotype&gt;/ch&lt;number&gt;/&lt;streamtype&gt; 注： 1.VLC可以支持解析URL里的用户名密码，实际发给设备的RTSP请求不支持带用户名密码。 2.videotype:视屏编码格式[h6264/mpeg4] 3.ch 通道号 （ch33:IP通道1，ch34：IP通道2…/ ch1:模拟通道1, ch2:模拟通道2…） 4.streamtype:码流类型[主码流（main/av_stream） 子码流（sub/av_stream）] 我们的rtsp取流地址为： 1rtsp://admin:hbj3022810@171.121.218.169:2554/h264/ch33/main/av_stream 8、测试 使用vlc播放器在添加网络流地址中输入上述地址即可播放。 [相关文章] 最新海康摄像机、NVR、流媒体服务器、回放取流RTSP地址规则说明 海康大华RTSP取流URL格式"}],"posts":[{"title":"小程序自定义组件","text":"从小程序基础库版本 1.6.3 开始，小程序支持简洁的组件化编程。开发者可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用；也可以将复杂的页面拆分成多个低耦合的模块，有助于代码维护。自定义组件在使用时与基础组件非常相似。接下来我们通过创建一个在页面上的弹屏组件，来看一下如何创建并使用一个自定义组件。 创建组件声明组件类似于页面，一个自定义组件由 json wxml wxss js 4个文件组成。要编写一个自定义组件，首先需要在 json 文件中进行自定义组件声明（将 component 字段设为 true 可这一组文件设为自定义组件） 123&#123; \"component\": true&#125; 编写组件模板和样式同时，还要在 wxml 文件中编写组件模版，在 wxss 文件中加入组件样式，它们的写法与页面的写法类似。详情可参考 组件模版和样式 。 组件模板 代码示例： 12345678910111213141516&lt;view class=\"pop-alert-box dialog\"&gt; &lt;view class=\"alert-content-box\"&gt; &lt;image src=\"../../images/icon_alert.jpg\" class=\"icon-image\"&gt;&lt;/image&gt; &lt;view class=\"alert-content\"&gt; &lt;!-- &lt;image src=\"../../images/icon_alert.jpg\" class=\"icon_alert_dialog\"&gt;&lt;/image&gt; --&gt; &lt;view class=\"title\"&gt;红包大派送&lt;/view&gt; &lt;view class=\"title-doc\"&gt;恭喜您获得&#123;&#123;count&#125;&#125;元红包，快快领取吧&lt;/view&gt; &lt;view class=\"btn_box\"&gt; &lt;view class=\"button type_red\" catchtap=\"callback\"&gt;立即领取&lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;/view&gt; &lt;i class=\"iconfont icon-close\" catchtap=\"close\"&gt;&lt;/i&gt; &lt;/view&gt; &lt;/view&gt; &lt;view class=\"alert_mask\" catchtap=\"close\"&gt;&lt;/view&gt; 在组件模板中可以提供一个 节点，用于承载组件引用时提供的子节点。用于承载组件使用者提供的wxml结构。可以使组件的内容更加灵活。 组件样式 代码示例： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100.pop-alert-box &#123; position: fixed; width: 550rpx; height: 650rpx; margin-left: -275rpx; top: 20%; left: 50%; z-index: 2001; text-align: center;&#125;.alert-content-box &#123; width: 100%; height: 100%; position: relative; background: #fff; border-radius: 10rpx; text-align: center;&#125;.alert-content &#123; padding: 20rpx; position: absolute; top: 30rpx; text-align: center;&#125;.title &#123; font-weight: bold; color: #ffdd25;&#125;.title-doc &#123; padding-top: 20rpx; color: white;&#125;.btn_box &#123; width: 100%; /* position: absolute; top: 80rpx; */ padding-top: 40rpx; display: flex; justify-content: center;&#125;.button &#123; /* padding: 20rpx 0; border-radius: 2%; */ background: #fff26f; padding: 10rpx 20rpx; border-radius: 10rpx;&#125;.type_red &#123; color: #a04d03; font-weight: bold;&#125;.icon_alert &#123; width: 100%;&#125;.icon-image &#123; width: 100%; height: 100%; border-radius: 10rpx;&#125;.icon_alert_dialog &#123; width: 200rpx; height: 200rpx; margin: 0 auto;&#125;.icon-close &#123; display: inline-block; font-size: 60rpx; color: #dedede; margin-top: 50rpx;&#125;.alert_mask &#123; background-color: rgba(0, 0, 0, 0.6); position: fixed; z-index: 2000; bottom: 0; right: 0; left: 0; top: 0; display: -webkit-box; display: -ms-flexbox; display: flex; -webkit-box-pack: center; -ms-flex-pack: center; justify-content: center; -webkit-box-align: center; -ms-flex-align: center; align-items: center;&#125; 注意： 在组件wxss中不应使用ID选择器、属性选择器和标签名选择器。 组件和引用组件的页面中使用后代选择器（.a .b）在一些极端情况下会有非预期的表现，如遇，请避免使用。 子元素选择器（.a&gt;.b）只能用于 view 组件与其子节点之间，用于其他组件可能导致非预期的情况。 继承样式，如 font 、 color ，会从组件外继承到组件内。 除继承样式外， app.wxss 中的样式、组件所在页面的的样式对自定义组件无效。 注册组件在自定义组件的 js 文件中和页面的js不同，需要使用 Component() 来注册组件，并提供组件的属性定义、内部数据和自定义方法。 组件的属性值和内部数据将被用于组件 wxml 的渲染，其中，属性值是可由组件外部传入的。详情可参见 Component构造器 。 代码示例： 12345678910111213141516171819202122232425262728293031323334353637Component(&#123; /** * 组件的属性列表 */ properties: &#123; show: &#123; type: String, value: false &#125;, count: &#123; type: String, value: '' &#125; &#125;, /** * 组件的初始数据 */ data: &#123; &#125;, /** * 组件的方法列表 */ methods: &#123; //弹屏关闭 close() &#123; this.setData(&#123; show: \"false\" &#125;) &#125;, //组件按钮点击方法 callback() &#123; console.log(\"\"); this.triggerEvent('customevent', &#123;&#125;) &#125; &#125;&#125;) 自定义组件触发事件时，需要使用 triggerEvent 方法，指定事件名、detail对象和事件选项，例如上述代码的callback方法，其中customevent 是在引用组件时通过bindcustomevent指出的： 1&lt;bottom-screen show=\"true\" count=\"10\" bindcustomevent=\"onReceivingTap\"&gt;&lt;/bottom-screen&gt; 使用组件引入组件使用已注册的自定义组件前，首先要在页面的 json 文件中进行引用声明。此时需要提供每个自定义组件的标签名和对应的自定义组件文件路径： 12345&#123; \"usingComponents\": &#123; \"bottom-screen\": \"/components/bottom-screen/bottom-screen\" &#125;&#125; 使用组件在引入组件之后，在页面的 wxml 中就可以像使用基础组件一样使用自定义组件。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。 代码示例： 1234&lt;view&gt; &lt;!-- 以下是对一个自定义组件的引用 --&gt; &lt;bottom-screen show=\"true\" count=\"10\" bindcustomevent=\"onReceivingTap\"&gt;&lt;/bottom-screen&gt;&lt;/view&gt; 自定义组件的 wxml 节点结构在与数据结合之后，将被插入到引用位置内。 Tip 对于基础库的1.5.x版本， 1.5.7 也同样支持自定义组件。 因为WXML节点标签名只能是小写字母和下划线的组合，所以自定义组件的标签名也只能包含小写字母和下划线。 自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式（使用 usingComponents 字段）。 自定义组件和使用自定义组件的页面所在项目根目录名不能以“wx-”为前缀，否则会报错。 旧版本的基础库不支持自定义组件，此时，引用自定义组件的节点会变为默认的空节点。 结果展示当组件显示的时候，显示的是如下的效果： 参考文章1、小程序自定义组件","content":"<p>从小程序基础库版本 1.6.3 开始，小程序支持简洁的组件化编程。开发者可以将页面内的功能模块抽象成自定义组件，以便在不同的页面中重复使用；也可以将复杂的页面拆分成多个低耦合的模块，有助于代码维护。自定义组件在使用时与基础组件非常相似。接下来我们通过创建一个在页面上的弹屏组件，来看一下如何创建并使用一个自定义组件。</p>\n<h1 id=\"创建组件\"><a href=\"#创建组件\" class=\"headerlink\" title=\"创建组件\"></a>创建组件</h1><h2 id=\"声明组件\"><a href=\"#声明组件\" class=\"headerlink\" title=\"声明组件\"></a>声明组件</h2><p>类似于页面，一个自定义组件由 <code>json</code> <code>wxml</code> <code>wxss</code> <code>js</code> 4个文件组成。要编写一个自定义组件，<strong>首先需要在 json 文件中进行自定义组件声明</strong>（将 <code>component</code> 字段设为 <code>true</code> 可这一组文件设为自定义组件）</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"component\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"编写组件模板和样式\"><a href=\"#编写组件模板和样式\" class=\"headerlink\" title=\"编写组件模板和样式\"></a>编写组件模板和样式</h2><p>同时，<strong>还要在 wxml 文件中编写组件模版</strong>，<strong>在 wxss 文件中加入组件样式</strong>，它们的写法与页面的写法类似。详情可参考 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/custom-component/wxml-wxss.html\" target=\"_blank\" rel=\"noopener\">组件模版和样式</a> 。</p>\n<h2 id=\"组件模板\"><a href=\"#组件模板\" class=\"headerlink\" title=\"组件模板\"></a>组件模板</h2><ul>\n<li>代码示例：</li>\n</ul>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pop-alert-box dialog\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert-content-box\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../../images/icon_alert.jpg\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icon-image\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert-content\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"comment\">&lt;!-- &lt;image src=\"../../images/icon_alert.jpg\" class=\"icon_alert_dialog\"&gt;&lt;/image&gt; --&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title\"</span>&gt;</span>红包大派送<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"title-doc\"</span>&gt;</span>恭喜您获得</span><span class=\"template-variable\">&#123;&#123;count&#125;&#125;</span><span class=\"xml\">元红包，快快领取吧<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn_box\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">            <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"button type_red\"</span> <span class=\"attr\">catchtap</span>=<span class=\"string\">\"callback\"</span>&gt;</span>立即领取<span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">          <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iconfont icon-close\"</span> <span class=\"attr\">catchtap</span>=<span class=\"string\">\"close\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"alert_mask\"</span> <span class=\"attr\">catchtap</span>=<span class=\"string\">\"close\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 在组件模板中可以提供一个 <strong><slot></slot></strong> 节点，用于承载组件引用时提供的<strong>子节点</strong>。用于承载组件使用者提供的wxml结构。可以使组件的内容更加灵活。</p>\n</blockquote>\n<h2 id=\"组件样式\"><a href=\"#组件样式\" class=\"headerlink\" title=\"组件样式\"></a>组件样式</h2><ul>\n<li>代码示例：</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.pop-alert-box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">550</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">650</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: -<span class=\"number\">275</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">20%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">50%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">2001</span>;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.alert-content-box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.alert-content</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">20</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">30</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.title</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ffdd25</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.title-doc</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">20</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: white;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.btn_box</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* position: absolute;</span></span><br><span class=\"line\"><span class=\"comment\">  top: 80rpx; */</span></span><br><span class=\"line\">  <span class=\"attribute\">padding-top</span>: <span class=\"number\">40</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.button</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/* padding: 20rpx 0;</span></span><br><span class=\"line\"><span class=\"comment\">  border-radius: 2%; */</span></span><br><span class=\"line\">  <span class=\"attribute\">background</span>: <span class=\"number\">#fff26f</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10</span>rpx <span class=\"number\">20</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.type_red</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#a04d03</span>;</span><br><span class=\"line\">  <span class=\"attribute\">font-weight</span>: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon_alert</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon-image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border-radius</span>: <span class=\"number\">10</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon_alert_dialog</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">200</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> auto;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.icon-close</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">60</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#dedede</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin-top</span>: <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.alert_mask</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(0, 0, 0, 0.6);</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: fixed;</span><br><span class=\"line\">  <span class=\"attribute\">z-index</span>: <span class=\"number\">2000</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: -ms-flexbox;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-pack</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-flex-pack</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-flex-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意：</p>\n<ul>\n<li><p>在组件wxss中<strong>不应使用ID选择器、属性选择器和标签名选择器</strong>。</p>\n</li>\n<li><p>组件和引用组件的页面中使用后<strong>代选择器（.a .b）</strong>在一些极端情况下会有非预期的表现，如遇，请避免使用。</p>\n</li>\n<li><strong>子元素选择器（.a&gt;.b）</strong>只能用于 <strong>view 组件与其子节点</strong>之间，用于其他组件可能导致非预期的情况。</li>\n<li><strong>继承样式</strong>，如 <strong>font 、 color</strong> ，会从组件外继承到组件内。</li>\n<li><strong>除继承样式外</strong>， <code>app.wxss</code> 中的样式、组件所在页面的的样式<strong>对自定义组件无效</strong>。</li>\n<li></li>\n</ul>\n</blockquote>\n<h2 id=\"注册组件\"><a href=\"#注册组件\" class=\"headerlink\" title=\"注册组件\"></a>注册组件</h2><p>在自定义组件的 <code>js</code> 文件中和页面的js不同，需要使用 <strong>Component() 来注册组件</strong>，并提<strong>供组件的属性定义、内部数据和自定义方法</strong>。</p>\n<p>组件的属性值和内部数据将被用于组件 <code>wxml</code> 的渲染，其中，属性值是可由组件外部传入的。详情可参见 <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/custom-component/component.html\" target=\"_blank\" rel=\"noopener\">Component构造器</a> 。</p>\n<ul>\n<li>代码示例：</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Component</span>(&#123;</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的属性列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attribute\">properties</span>: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">show</span>: &#123;</span><br><span class=\"line\">      <span class=\"attribute\">type</span>: String,</span><br><span class=\"line\">      <span class=\"attribute\">value</span>: false</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attribute\">count</span>: &#123;</span><br><span class=\"line\">      <span class=\"attribute\">type</span>: String,</span><br><span class=\"line\">      <span class=\"attribute\">value</span>: <span class=\"string\">''</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的初始数据</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attribute\">data</span>: &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">   * 组件的方法列表</span></span><br><span class=\"line\"><span class=\"comment\">   */</span></span><br><span class=\"line\">  <span class=\"attribute\">methods</span>: &#123;</span><br><span class=\"line\">   <span class=\"comment\">//弹屏关闭</span></span><br><span class=\"line\">    <span class=\"selector-tag\">close</span>() &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">this</span><span class=\"selector-class\">.setData</span>(&#123;</span><br><span class=\"line\">        <span class=\"attribute\">show</span>: <span class=\"string\">\"false\"</span></span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"comment\">//组件按钮点击方法</span></span><br><span class=\"line\">    callback() &#123;</span><br><span class=\"line\">      <span class=\"selector-tag\">console</span><span class=\"selector-class\">.log</span>(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">      <span class=\"selector-tag\">this</span><span class=\"selector-class\">.triggerEvent</span>(<span class=\"string\">'customevent'</span>, &#123;&#125;)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p> 自定义组件触发事件时，需要使用 <strong>triggerEvent</strong> 方法，<strong>指定事件名、detail对象和事件选项</strong>，例如上述代码的callback方法，其中customevent 是在引用组件时通过bindcustomevent指出的：</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;bottom-screen <span class=\"attribute\">show</span>=<span class=\"string\">\"true\"</span> <span class=\"attribute\">count</span>=<span class=\"string\">\"10\"</span> <span class=\"attribute\">bindcustomevent</span>=<span class=\"string\">\"onReceivingTap\"</span>&gt;&lt;/bottom-screen&gt;</span><br></pre></td></tr></table></figure>\n<h1 id=\"使用组件\"><a href=\"#使用组件\" class=\"headerlink\" title=\"使用组件\"></a>使用组件</h1><h2 id=\"引入组件\"><a href=\"#引入组件\" class=\"headerlink\" title=\"引入组件\"></a>引入组件</h2><p>使用已注册的自定义组件前，<strong>首先要在页面的 json 文件中进行引用声明</strong>。此时需要<strong>提供每个自定义组件的标签名和对应的自定义组件文件路径</strong>：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"usingComponents\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"bottom-screen\"</span>: <span class=\"string\">\"/components/bottom-screen/bottom-screen\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用组件-1\"><a href=\"#使用组件-1\" class=\"headerlink\" title=\"使用组件\"></a>使用组件</h2><p>在引入组件之后，在页面的 <code>wxml</code> 中就可以像<strong>使用基础组件一样使用自定义组件</strong>。节点名即自定义组件的标签名，节点属性即传递给组件的属性值。</p>\n<ul>\n<li>代码示例：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 以下是对一个自定义组件的引用 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">bottom-screen</span> <span class=\"attr\">show</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">count</span>=<span class=\"string\">\"10\"</span> <span class=\"attr\">bindcustomevent</span>=<span class=\"string\">\"onReceivingTap\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">bottom-screen</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>自定义组件的 <strong>wxml 节点结构在与数据结合之后</strong>，<strong>将被插入到引用位置内</strong>。</p>\n<h2 id=\"Tip\"><a href=\"#Tip\" class=\"headerlink\" title=\"Tip\"></a>Tip</h2><ul>\n<li>对于基础库的1.5.x版本， <a href=\"https://mp.weixin.qq.com/debug/wxadoc/dev/framework/compatibility.html\" target=\"_blank\" rel=\"noopener\">1.5.7</a> 也同样支持自定义组件。</li>\n<li>因为WXML<strong>节点标签名只能是小写字母和下划线的组合</strong>，所以自定义组件的标签名也只能包含小写字母和下划线。</li>\n<li>自定义组件也是可以引用自定义组件的，引用方法类似于页面引用自定义组件的方式（使用 <code>usingComponents</code> 字段）。</li>\n<li>自定义组件和使用自定义组件的页面所在<strong>项目根目录名不能以“wx-”为前缀，否则会报错</strong>。</li>\n<li>旧版本的基础库不支持自定义组件，此时，<strong>引用自定义组件的节点会变为默认的空节点</strong>。</li>\n</ul>\n<h1 id=\"结果展示\"><a href=\"#结果展示\" class=\"headerlink\" title=\"结果展示\"></a>结果展示</h1><p>当组件显示的时候，显示的是如下的效果：</p>\n<p><img src=\"/images/miniprogram/component1.png\" alt=\"avatar\"></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><p>1、<a href=\"https://www.cnblogs.com/storebook/p/8111618.html\" target=\"_blank\" rel=\"noopener\">小程序自定义组件</a> </p>\n"},{"title":"https经过nginx后struts跳转成http","text":"用户登录后会跳转到登录后页面，由于经过了nginx，后端tomcat实际上被访问的是http协议，所以出现了 用 https://xxx.ecample.com/login.st 的请求，登录后跳转到 http://xxx.com/login.st 这样的情况。代码使用的是struts2 的 redirect方法。 123&lt;action name=\"login_*\" method=\"&#123;1&#125;\" class=\"loginAction\"&gt; &lt;result name=\"nextjsp\" type=\"redirect\"&gt;/skin/main/main.jsp&lt;/result&gt;&lt;/action&gt; 系统只用https访问 ​ 在tomcat的server.xml 的 connector 标签页里，增加 secure=”true” scheme=”https” proxyPort=”443” 三个选项，直接重启tomcat即可。 123&lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8449\" URIEncoding=\"UTF-8\" secure=\"true\" scheme=\"https\" proxyPort=\"443\" /&gt; 这样所有访问到tomcat的请求，如果使用struts的redirect方法，都会跳转成https的方法。 两种方式都可以访问 如果项目有特殊要求，需要项目既可以使用http也可以使用https访问，可以采用如下的方法： ​ 在tomcat的server.xml配置文件中增加一个connector标签，内容和之前的一样即可，唯一的区别就是一个里面有https的三个参数，一个不带（这里要注意一下，2个connector的port不能一样，要不然端口冲突，tomcat起不来）。 123456 &lt;Connector port=\"8080\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8449\" URIEncoding=\"UTF-8\" /&gt;&lt;Connector port=\"8881\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8449\" URIEncoding=\"UTF-8\" secure=\"true\" scheme=\"https\" proxyPort=\"443\" /&gt; 在前端配置nginx的时候，可以选择把来自http的请求转发到后端 不带https参数的connector 端口上， 把https的请求转发到带https参数的connector 端口上。","content":"<p>用户登录后会跳转到登录后页面，由于经过了nginx，后端tomcat实际上被访问的是http协议，所以出现了 用 <a href=\"https://xxx.ecample.com/login.st\" target=\"_blank\" rel=\"noopener\">https://xxx.ecample.com/login.st</a> 的请求，登录后跳转到 <a href=\"http://xxx.com/login.st\" target=\"_blank\" rel=\"noopener\">http://xxx.com/login.st</a> 这样的情况。代码使用的是struts2 的 redirect方法。</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;action <span class=\"built_in\">name</span>=<span class=\"string\">\"login_*\"</span> method=<span class=\"string\">\"&#123;1&#125;\"</span> <span class=\"built_in\">class</span>=<span class=\"string\">\"loginAction\"</span>&gt;</span><br><span class=\"line\">\t&lt;<span class=\"literal\">result</span> <span class=\"built_in\">name</span>=<span class=\"string\">\"nextjsp\"</span> type=<span class=\"string\">\"redirect\"</span>&gt;/skin/main/main.jsp&lt;/<span class=\"literal\">result</span>&gt;</span><br><span class=\"line\">&lt;/action&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>系统只用https访问</li>\n</ul>\n<p>​      在tomcat的server.xml 的 connector 标签页里，增加 secure=”true” scheme=”https” proxyPort=”443” 三个选项，直接重启tomcat即可。 </p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector <span class=\"attribute\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attribute\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span><br><span class=\"line\">           <span class=\"attribute\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></span><br><span class=\"line\">           <span class=\"attribute\">redirectPort</span>=<span class=\"string\">\"8449\"</span> <span class=\"attribute\">URIEncoding</span>=<span class=\"string\">\"UTF-8\"</span>  <span class=\"attribute\">secure</span>=<span class=\"string\">\"true\"</span> <span class=\"attribute\">scheme</span>=<span class=\"string\">\"https\"</span> <span class=\"attribute\">proxyPort</span>=<span class=\"string\">\"443\"</span>  /&gt;</span><br></pre></td></tr></table></figure>\n<p>这样所有访问到tomcat的请求，如果使用struts的redirect方法，都会跳转成https的方法。</p>\n<ul>\n<li>两种方式都可以访问</li>\n</ul>\n<p>如果项目有特殊要求，需要项目既可以使用http也可以使用https访问，可以采用如下的方法： </p>\n<p>​      在tomcat的server.xml配置文件中增加一个connector标签，内容和之前的一样即可，唯一的区别就是一个里面有https的三个参数，一个不带（这里要注意一下，2个connector的port不能一样，要不然端口冲突，tomcat起不来）。 </p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;Connector <span class=\"attribute\">port</span>=<span class=\"string\">\"8080\"</span> <span class=\"attribute\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span><br><span class=\"line\">            <span class=\"attribute\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></span><br><span class=\"line\">            <span class=\"attribute\">redirectPort</span>=<span class=\"string\">\"8449\"</span> <span class=\"attribute\">URIEncoding</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span><br><span class=\"line\">&lt;Connector <span class=\"attribute\">port</span>=<span class=\"string\">\"8881\"</span> <span class=\"attribute\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span><br><span class=\"line\">               <span class=\"attribute\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></span><br><span class=\"line\">               <span class=\"attribute\">redirectPort</span>=<span class=\"string\">\"8449\"</span> <span class=\"attribute\">URIEncoding</span>=<span class=\"string\">\"UTF-8\"</span>  <span class=\"attribute\">secure</span>=<span class=\"string\">\"true\"</span> <span class=\"attribute\">scheme</span>=<span class=\"string\">\"https\"</span> <span class=\"attribute\">proxyPort</span>=<span class=\"string\">\"443\"</span>  /&gt;</span><br></pre></td></tr></table></figure>\n<p>在前端配置nginx的时候，可以选择把来自http的请求转发到后端 不带https参数的connector 端口上， 把https的请求转发到带https参数的connector 端口上。</p>\n"},{"title":"linux安装nginx","text":"安装依赖 yum install gcc yum install pcre-devel yum install zlib zlib-devel yum install openssl openssl-devel 一键安装上面四个依赖 1yum -y install gcc zlib zlib-devel pcre-devel openssl openssl-devel 下载nginx的tar包1234567//创建一个文件夹cd /usr/localmkdir nginxcd nginx//下载tar包wget http://nginx.org/download/nginx-1.14.0.tar.gztar -xvf nginx-1.14.0.tar.g 安装nginx执行.confugure1234//进入nginx目录cd /usr/local/nginx//执行命令，这步是关键 ./configure --user=nobody --group=nobody --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_gzip_static_module --with-http_realip_module --with-http_sub_module --with-http_ssl_module 如果执行.configure ,如果不加后面的参数的话在配置nginx.conf的时候会报类似这样的错误： nginx: [emerg] unknown directive “ssl” in /usr/local/nginx/conf/vhost/nginx.conf:8 nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed 执行make1make 执行make install命令1make install Nginx常用命令 测试配置文件 -t1安装路径下的/nginx/sbin/nginx -t 启动命令 1安装路径下的/nginx/sbin/nginx 停止命令 1安装路径下的/nginx/sbin/nginx -s stop 或者 : nginx -s quit 重启命令 1安装路径下的/nginx/sbin/nginx -s reload 查看进程命令 1ps -ef | grep nginx 平滑重启 1kill -HUP Nginx主进程号 配置防火墙 1234//打开防火墙文件sudo vim /etc/sysconfig/iptables//新增行 开放80端口-A INPUT -p tcp -m state --state NEW -m tcp --dport 90 -j ACCEPT 12//重启防火墙sudo service iptables restart 这里可以直接使用service iptables stop。 把防火墙关闭了。 Nginx转发配置及测试验证 编辑conf文件，节点中增加入响应的配置 端口转发 123456789101112131415161718192021222324server &#123;listen 443;server_name www.example.com;server_name_in_redirect off; ssl on;ssl_certificate cert/123456.pem;ssl_certificate_key cert/123456.key;ssl_session_timeout 5m;ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_prefer_server_ciphers on;location /&#123; root html; index index.html index.htm;&#125;location /Example &#123; tcp_nodelay on; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://127.0.0.1:90/Example; &#125; &#125; 测试 1安装路径下的/nginx/sbin/nginx -t 出现如下的提示，则表示安装成功了： 12nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is oknginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful Nginx启动 启动 1安装路径下的/nginx/sbin/nginx 测试访问","content":"<h1 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h1><ul>\n<li><p><code>yum install gcc</code></p>\n</li>\n<li><p><code>yum install pcre-devel</code></p>\n</li>\n<li><code>yum install zlib zlib-devel</code></li>\n<li><code>yum install openssl openssl-devel</code></li>\n<li><p>一键安装上面四个依赖</p>\n<figure class=\"highlight nsis\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gcc <span class=\"literal\">zlib</span> <span class=\"literal\">zlib</span>-devel pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"下载nginx的tar包\"><a href=\"#下载nginx的tar包\" class=\"headerlink\" title=\"下载nginx的tar包\"></a>下载nginx的tar包</h1><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//创建一个文件夹</span></span><br><span class=\"line\"><span class=\"keyword\">cd</span> /usr/<span class=\"keyword\">local</span></span><br><span class=\"line\"><span class=\"keyword\">mkdir</span> nginx</span><br><span class=\"line\"><span class=\"keyword\">cd</span> nginx</span><br><span class=\"line\"><span class=\"comment\">//下载tar包</span></span><br><span class=\"line\">wget http:<span class=\"comment\">//nginx.org/download/nginx-1.14.0.tar.gz</span></span><br><span class=\"line\">tar -xvf nginx-1.14.0.tar.<span class=\"keyword\">g</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"安装nginx\"><a href=\"#安装nginx\" class=\"headerlink\" title=\"安装nginx\"></a>安装nginx</h1><h2 id=\"执行-confugure\"><a href=\"#执行-confugure\" class=\"headerlink\" title=\"执行.confugure\"></a>执行.confugure</h2><figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span>进入nginx目录</span><br><span class=\"line\"><span class=\"keyword\">cd</span> <span class=\"string\">/usr/local/nginx</span></span><br><span class=\"line\"><span class=\"string\">//</span>执行命令，这步是关键</span><br><span class=\"line\">   <span class=\"string\">./configure</span> <span class=\"params\">--user=nobody</span> <span class=\"params\">--group=nobody</span> <span class=\"params\">--prefix=/usr/local/nginx</span> <span class=\"params\">--with-http_stub_status_module</span> <span class=\"params\">--with-http_gzip_static_module</span> <span class=\"params\">--with-http_realip_module</span> <span class=\"params\">--with-http_sub_module</span> <span class=\"params\">--with-http_ssl_module</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果执行.configure ,如果不加后面的参数的话在配置nginx.conf的时候会报类似这样的错误：</p>\n<p>   nginx: [emerg] unknown directive “ssl” in /usr/local/nginx/conf/vhost/nginx.conf:8<br>   nginx: configuration file /usr/local/nginx/conf/nginx.conf test failed </p>\n</blockquote>\n<h2 id=\"执行make\"><a href=\"#执行make\" class=\"headerlink\" title=\"执行make\"></a>执行make</h2><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">make</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"执行make-install命令\"><a href=\"#执行make-install命令\" class=\"headerlink\" title=\"执行make install命令\"></a>执行make install命令</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make <span class=\"keyword\">install</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"Nginx常用命令\"><a href=\"#Nginx常用命令\" class=\"headerlink\" title=\"Nginx常用命令\"></a>Nginx常用命令</h1><ul>\n<li><p>测试配置文件</p>\n<figure class=\"highlight plain\"><figcaption><span>-t</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装路径下的/nginx/sbin/nginx -t</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>启动命令</p>\n</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装路径下的<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>停止命令</li>\n</ul>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装路径下的/nginx/sbin/nginx -s <span class=\"built_in\">stop</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>或者 : nginx -s quit</p>\n</blockquote>\n<ul>\n<li>重启命令</li>\n</ul>\n<figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装路径下的<span class=\"string\">/nginx/sbin/nginx</span> -s <span class=\"keyword\">reload</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>查看进程命令</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">ps</span> -ef | <span class=\"keyword\">grep</span> nginx</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>平滑重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">kill</span> -HUP Nginx主进程号</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1 id=\"配置防火墙\"><a href=\"#配置防火墙\" class=\"headerlink\" title=\"配置防火墙\"></a>配置防火墙</h1>   <figure class=\"highlight jboss-cli\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">//</span>打开防火墙文件</span><br><span class=\"line\">sudo vim <span class=\"string\">/etc/sysconfig/iptables</span></span><br><span class=\"line\"><span class=\"string\">//</span>新增行  开放80端口</span><br><span class=\"line\">-A INPUT -p tcp -m state <span class=\"params\">--state</span> NEW -m tcp <span class=\"params\">--dport</span> 90 -j ACCEPT</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//重启防火墙</span></span><br><span class=\"line\">sudo <span class=\"class\"><span class=\"keyword\">service</span> <span class=\"title\">iptables</span> restart</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里可以直接使用<code>service iptables stop</code>。 把防火墙关闭了。</p>\n</blockquote>\n<h2 id=\"Nginx转发配置及测试验证\"><a href=\"#Nginx转发配置及测试验证\" class=\"headerlink\" title=\"Nginx转发配置及测试验证\"></a>Nginx转发配置及测试验证</h2><ol>\n<li>编辑conf文件，节点中增加入响应的配置 端口转发</li>\n</ol>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\"><span class=\"attribute\">listen</span> <span class=\"number\">443</span>;</span><br><span class=\"line\"><span class=\"attribute\">server_name</span> www.example.com;</span><br><span class=\"line\"><span class=\"attribute\">server_name_in_redirect</span> <span class=\"literal\">off</span>;  </span><br><span class=\"line\"><span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"><span class=\"attribute\">ssl_certificate</span>   cert/<span class=\"number\">123456</span>.pem;</span><br><span class=\"line\"><span class=\"attribute\">ssl_certificate_key</span>  cert/<span class=\"number\">123456</span>.key;</span><br><span class=\"line\"><span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">5m</span>;</span><br><span class=\"line\"><span class=\"attribute\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\"><span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\"><span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attribute\">location</span> /&#123;</span><br><span class=\"line\"> <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">       <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"attribute\">location</span> /Example &#123;  </span><br><span class=\"line\">        <span class=\"attribute\">tcp_nodelay</span>     <span class=\"literal\">on</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host            <span class=\"variable\">$host</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP       <span class=\"variable\">$remote_addr</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://127.0.0.1:90/Example; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>测试</li>\n</ol>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装路径下的<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx -t</span></span><br></pre></td></tr></table></figure>\n<p>出现如下的提示，则表示安装成功了：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx: the configuration <span class=\"keyword\">file</span> /usr/<span class=\"keyword\">local</span>/nginx/<span class=\"keyword\">conf</span>/nginx.<span class=\"keyword\">conf</span> <span class=\"keyword\">syntax</span> is ok</span><br><span class=\"line\">nginx: configuration <span class=\"keyword\">file</span> /usr/<span class=\"keyword\">local</span>/nginx/<span class=\"keyword\">conf</span>/nginx.<span class=\"keyword\">conf</span> <span class=\"keyword\">test</span> is successful</span><br></pre></td></tr></table></figure>\n<h1 id=\"Nginx启动\"><a href=\"#Nginx启动\" class=\"headerlink\" title=\"Nginx启动\"></a>Nginx启动</h1><ul>\n<li>启动</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安装路径下的<span class=\"regexp\">/nginx/</span>sbin<span class=\"regexp\">/nginx</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>测试访问</li>\n</ul>\n<p><img src=\"/images/https/nginx1.png\" alt=\"avatar\"></p>\n"},{"title":"小程序多文件上传","text":"在开发小程序，我们会开发一些意见反馈等等的接口，需要用户去上传图片来说明具体的情况。小程序为我们提供了文件上传的接口，但是一次只能上传一个文件，这样如果需要上传多个文件的时候对于用户的体验是非常不好的，如果解决呢？ 文件上传页面在文件上传页面中定义图片上传的按钮，以及图片选择之后的回显。 页面内容 12345678910......&lt;view class=\"action-photo\"&gt; &lt;block wx:for=\"&#123;&#123;picUrls&#125;&#125;\" wx:key=\"&#123;&#123;item&#125;&#125;\" wx:index=\"&#123;&#123;index&#125;&#125;\"&gt; &lt;image src=\"&#123;&#123;item&#125;&#125;\"&gt; &lt;icon type=\"cancel\" data-index=\"&#123;&#123;index&#125;&#125;\" color=\"red\" size=\"18\" class=\"del\" bindtap=\"delPic\" /&gt; &lt;/image&gt; &lt;/block&gt; &lt;text class=\"add\" bindtap=\"bindCamera\"&gt;&#123;&#123;actionText&#125;&#125;&lt;/text&gt; &lt;/view&gt;...... 页面样式 123456789101112131415161718192021222324252627282930.action-photo &#123; background-color: #fff; padding: 10rpx 0px 30rpx 50rpx;&#125;.action-photo image &#123; position: relative; display: inline-block; width: 120rpx; height: 120rpx; overflow: visible; margin-left: 25rpx;&#125;.action-photo image icon.del &#123; display: block; position: absolute; top: -20rpx; right: -20rpx;&#125;.action-photo text.add &#123; display: inline-block; width: 120rpx; height: 120rpx; line-height: 120rpx; text-align: center; font-size: 24rpx; color: #ccc; border: 2rpx dotted #ccc; /* margin-left: 25rpx; */ vertical-align: top;&#125; 页面效果如下： 初始化相关值1234data: &#123; picUrls: [], // 故障图路径数组 actionText: \"拍照/相册\", // 选取图片提示 &#125; 选择图片选择图片使用的是小程序中wx.chooseImage(Object)，从本地相册选择图片或使用相机拍照。详情参见wx.chooseImage API 123456789101112131415//拍照或选择相册，这里限制用户只能上传4张图片 bindCamera: function() &#123; wx.chooseImage(&#123; count: 4, sizeType: ['original', 'compressed'], sourceType: ['album', 'camera'], success: (res) =&gt; &#123; let tfps = res.tempFilePaths; this.setData(&#123; picUrls: tfps, actionText: \"+\" &#125;); &#125; &#125;) &#125;, 删除图片123456789// 删除选择的图片 delPic: function(e) &#123; let index = e.target.dataset.index; let _picUrls = this.data.picUrls; _picUrls.splice(index, 1); this.setData(&#123; picUrls: _picUrls &#125;) &#125;, 文件上传小程序的文件上传方法只能支持单张图片上传，详情参考文件上传API 。如何实现多文件上传呢？此处使用的是递归的方法，其实本质上还是一张一张的上传，只是对于用户来说看起来像是一起上传的。 123456789101112131415161718192021222324252627282930// 多文件上传函数 uploadFiles(filePaths, successUp, failUp, i, length) &#123; wx.uploadFile(&#123; url: app.globalData.baseUrl + \"/Example/bas/api/fapi0020_uploadfile.st?rkspAutoComplete=true\", filePath: filePaths[i], name: 'file', formData: &#123; 'problemId': this.data.problemId, 'userId': wx.getStorageSync('userInfo').userid &#125;, success: (resp) =&gt; &#123; successUp++; &#125;, fail: (res) =&gt; &#123; failUp++; &#125;, complete: () =&gt; &#123; i++; if (i == length) &#123; console.log('总共' + successUp + '张上传成功,' + failUp + '张上传失败！'); wx.showToast(&#123; title: '操作成功', &#125;) wx.hideLoading(); &#125; else &#123; //递归调用uploadFiles函数 this.uploadFiles(filePaths, successUp, failUp, i, length); &#125; &#125;, &#125;); &#125; 调用在具体的提交方法中调用文件上传函数 12345let length = this.data.picUrls.length; //总共个数let successUp = 0; //成功个数let failUp = 0; //失败个数let i = 0; //第几个this.uploadFiles(this.data.picUrls, successUp, failUp, i, length);","content":"<p>在开发小程序，我们会开发一些意见反馈等等的接口，需要用户去上传图片来说明具体的情况。小程序为我们提供了文件上传的接口，但是一次只能上传一个文件，这样如果需要上传多个文件的时候对于用户的体验是非常不好的，如果解决呢？</p>\n<h2 id=\"文件上传页面\"><a href=\"#文件上传页面\" class=\"headerlink\" title=\"文件上传页面\"></a>文件上传页面</h2><p>在文件上传页面中定义图片上传的按钮，以及图片选择之后的回显。</p>\n<ul>\n<li>页面内容</li>\n</ul>\n<figure class=\"highlight django\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\">......</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">\"action-photo\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">   <span class=\"tag\">&lt;<span class=\"name\">block</span> <span class=\"attr\">wx:for</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;picUrls&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">wx:key</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">wx:index</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;index&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">src</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;item&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">icon</span> <span class=\"attr\">type</span>=<span class=\"string\">\"cancel\"</span> <span class=\"attr\">data-index</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;&#123;index&#125;&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">color</span>=<span class=\"string\">\"red\"</span> <span class=\"attr\">size</span>=<span class=\"string\">\"18\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"del\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"delPic\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">      <span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;/<span class=\"name\">block</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"add\"</span> <span class=\"attr\">bindtap</span>=<span class=\"string\">\"bindCamera\"</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;actionText&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">......</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面样式</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.action-photo</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">background-color</span>: <span class=\"number\">#fff</span>;</span><br><span class=\"line\">  <span class=\"attribute\">padding</span>: <span class=\"number\">10</span>rpx <span class=\"number\">0px</span> <span class=\"number\">30</span>rpx <span class=\"number\">50</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.action-photo</span> <span class=\"selector-tag\">image</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">overflow</span>: visible;</span><br><span class=\"line\">  <span class=\"attribute\">margin-left</span>: <span class=\"number\">25</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.action-photo</span> <span class=\"selector-tag\">image</span> <span class=\"selector-tag\">icon</span><span class=\"selector-class\">.del</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>: absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: -<span class=\"number\">20</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>: -<span class=\"number\">20</span>rpx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.action-photo</span> <span class=\"selector-tag\">text</span><span class=\"selector-class\">.add</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>: inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">120</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">120</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">line-height</span>: <span class=\"number\">120</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>: center;</span><br><span class=\"line\">  <span class=\"attribute\">font-size</span>: <span class=\"number\">24</span>rpx;</span><br><span class=\"line\">  <span class=\"attribute\">color</span>: <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"attribute\">border</span>: <span class=\"number\">2</span>rpx dotted <span class=\"number\">#ccc</span>;</span><br><span class=\"line\">  <span class=\"comment\">/* margin-left: 25rpx; */</span></span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>: top;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面效果如下：</li>\n</ul>\n<p><img src=\"/images/miniprogram/fileupload1.png\" alt=\"avatar\"></p>\n<h2 id=\"初始化相关值\"><a href=\"#初始化相关值\" class=\"headerlink\" title=\"初始化相关值\"></a>初始化相关值</h2><figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">data:</span> &#123;</span><br><span class=\"line\"><span class=\"symbol\">    picUrls:</span> [], <span class=\"comment\">// 故障图路径数组</span></span><br><span class=\"line\"><span class=\"symbol\"> actionText:</span> <span class=\"string\">\"拍照/相册\"</span>, <span class=\"comment\">// 选取图片提示 </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择图片\"><a href=\"#选择图片\" class=\"headerlink\" title=\"选择图片\"></a>选择图片</h2><p>选择图片使用的是小程序中wx.chooseImage(Object)，从本地相册选择图片或使用相机拍照。详情参见<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/media-picture.html#wxchooseimageobject\" target=\"_blank\" rel=\"noopener\">wx.chooseImage API</a></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//拍照或选择相册，这里限制用户只能上传4张图片</span></span><br><span class=\"line\">  bindCamera: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    wx.chooseImage(&#123;</span><br><span class=\"line\">      count: <span class=\"number\">4</span>, </span><br><span class=\"line\">      sizeType: [<span class=\"string\">'original'</span>, <span class=\"string\">'compressed'</span>],</span><br><span class=\"line\">      sourceType: [<span class=\"string\">'album'</span>, <span class=\"string\">'camera'</span>],</span><br><span class=\"line\">      success: <span class=\"function\">(<span class=\"params\">res</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> tfps = res.tempFilePaths;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.setData(&#123;</span><br><span class=\"line\">          picUrls: tfps,</span><br><span class=\"line\">          actionText: <span class=\"string\">\"+\"</span></span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"删除图片\"><a href=\"#删除图片\" class=\"headerlink\" title=\"删除图片\"></a>删除图片</h2><figure class=\"highlight fortran\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 删除选择的图片</span><br><span class=\"line\"> delPic: <span class=\"function\"><span class=\"keyword\">function</span><span class=\"params\">(e)</span></span> &#123;</span><br><span class=\"line\">   let <span class=\"built_in\">index</span> = e.<span class=\"keyword\">target</span>.dataset.<span class=\"built_in\">index</span>;</span><br><span class=\"line\">   let _picUrls = this.<span class=\"keyword\">data</span>.picUrls;</span><br><span class=\"line\">   _picUrls.splice(<span class=\"built_in\">index</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">   this.setData(&#123;</span><br><span class=\"line\">     picUrls: _picUrls</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n<h2 id=\"文件上传\"><a href=\"#文件上传\" class=\"headerlink\" title=\"文件上传\"></a>文件上传</h2><p>小程序的文件上传方法只能支持单张图片上传，详情参考<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/network-file.html#wxuploadfileobject\" target=\"_blank\" rel=\"noopener\">文件上传API</a> 。如何实现多文件上传呢？此处使用的是递归的方法，其实本质上还是一张一张的上传，只是对于用户来说看起来像是一起上传的。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span> 多文件上传函数</span><br><span class=\"line\">  uploadFiles(filePaths, successUp, failUp, i, length) &#123;</span><br><span class=\"line\">    wx.uploadFile(&#123;</span><br><span class=\"line\">      url: app.globalData.baseUrl + <span class=\"string\">\"/Example/bas/api/fapi0020_uploadfile.st?rkspAutoComplete=true\"</span>,</span><br><span class=\"line\">      filePath: filePaths[i],</span><br><span class=\"line\">      name: <span class=\"string\">'file'</span>,</span><br><span class=\"line\">      formData: &#123;</span><br><span class=\"line\">        <span class=\"string\">'problemId'</span>: <span class=\"keyword\">this</span>.data.problemId,</span><br><span class=\"line\">        <span class=\"string\">'userId'</span>: wx.getStorageSync(<span class=\"string\">'userInfo'</span>).userid</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      success: <span class=\"function\"><span class=\"params\">(resp)</span> =&gt;</span> &#123;</span><br><span class=\"line\">        successUp++;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      fail: <span class=\"function\"><span class=\"params\">(res)</span> =&gt;</span> &#123;</span><br><span class=\"line\">        failUp++;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      complete: <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (i == length) &#123;</span><br><span class=\"line\">          <span class=\"built_in\">console</span>.log(<span class=\"string\">'总共'</span> + successUp + <span class=\"string\">'张上传成功,'</span> + failUp + <span class=\"string\">'张上传失败！'</span>);</span><br><span class=\"line\">          wx.showToast(&#123;</span><br><span class=\"line\">            title: <span class=\"string\">'操作成功'</span>,</span><br><span class=\"line\">          &#125;)</span><br><span class=\"line\">          wx.hideLoading();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123; <span class=\"regexp\">//</span>递归调用uploadFiles函数</span><br><span class=\"line\">          <span class=\"keyword\">this</span>.uploadFiles(filePaths, successUp, failUp, i, length);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用\"></a>调用</h2><p>在具体的提交方法中调用文件上传函数</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let length = <span class=\"keyword\">this</span>.<span class=\"keyword\">data</span>.picUrls.length; <span class=\"comment\">//总共个数</span></span><br><span class=\"line\">let successUp = <span class=\"number\">0</span>; <span class=\"comment\">//成功个数</span></span><br><span class=\"line\">let failUp = <span class=\"number\">0</span>; <span class=\"comment\">//失败个数</span></span><br><span class=\"line\">let i = <span class=\"number\">0</span>; <span class=\"comment\">//第几个</span></span><br><span class=\"line\"><span class=\"keyword\">this</span>.uploadFiles(<span class=\"keyword\">this</span>.<span class=\"keyword\">data</span>.picUrls, successUp, failUp, i, length);</span><br></pre></td></tr></table></figure>\n"},{"title":"小程序分享转发实现","text":"小程序分享或转发有两种方式，一种是通过在页面中自定义按钮的形式，另外一种只需要在js中定义 onShareAppMessage 函数，页面右上角就会出现转发的按钮。详细文档请参阅微信官方文档微信转发API。 分享方式12345678910111213Page(&#123; onShareAppMessage: function (res) &#123; //menu 是来自右上角的转发，button是页面内的转发按钮。 if (res.from === 'button') &#123; // 来自页面内转发按钮 console.log(res.target) &#125; return &#123; title: '自定义转发标题', //如不不写默认为小程序的名称 path: '/page/index' &#125; &#125;&#125;) 页面内按钮 首先在页面内定义一个按钮，设置open-type为share12&gt; &lt;button open-type=\"share\"&gt;转发&lt;/button&gt;&gt; 然后点击按钮的时候会自动调用页面中定义好的onShareAppMessage方法。 分享内容在分享内容的时候，我们通常会指定到小程序中具体的某个页面。但是有时页面不是首页的情况下，可能需要进行参数的传递，那么我们把需要的参数存放在data中即可，然后路径中使用即可。这里需要注意的是this指代的问题。 1234567891011121314151617181920212223/* * 右上角转发功能 * */ onShareAppMessage: function(res) &#123; var that = this; console.log(res); if (res.from === 'menu') &#123; // 来自页面内转发按钮 &#125; return &#123; title: \"“书来书往”读书季享好礼，分享即可领红包哦\", path: '/pages/booklists/booklist-detail/booklist-detail?listId=' + that.data.listId, imageUrl: this.data.coverUrl, success: function(res) &#123; // 转发成功 console.log(\"转发成功\") &#125;, fail: function(res) &#123; // 转发失败 console.log(res); &#125; &#125; &#125; 参考文章 微信小程序 转发 微信小程序分享朋友圈的实现思路与解决办法","content":"<p>小程序分享或转发有两种方式，一种是通过在页面中自定义按钮的形式，另外一种只需要在js中定义 onShareAppMessage 函数，页面右上角就会出现转发的按钮。详细文档请参阅微信官方文档<a href=\"https://developers.weixin.qq.com/miniprogram/dev/api/share.html#onshareappmessageoptions\" target=\"_blank\" rel=\"noopener\">微信转发API</a>。</p>\n<h2 id=\"分享方式\"><a href=\"#分享方式\" class=\"headerlink\" title=\"分享方式\"></a>分享方式</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">Page</span>(&#123;</span><br><span class=\"line\">  <span class=\"attribute\">onShareAppMessage</span>: function (res) &#123;</span><br><span class=\"line\">    //menu 是来自右上角的转发，button是页面内的转发按钮。</span><br><span class=\"line\">    if (res.from === <span class=\"string\">'button'</span>) &#123;</span><br><span class=\"line\">      // 来自页面内转发按钮</span><br><span class=\"line\">      console.<span class=\"built_in\">log</span>(res.target)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"selector-tag\">return</span> &#123;</span><br><span class=\"line\">      <span class=\"attribute\">title</span>: <span class=\"string\">'自定义转发标题'</span>, //如不不写默认为小程序的名称</span><br><span class=\"line\">      path: <span class=\"string\">'/page/index'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面内按钮</li>\n</ul>\n<blockquote>\n<ul>\n<li>首先在页面内定义一个按钮，设置open-type为share<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">  &lt;button open-type=<span class=\"string\">\"share\"</span>&gt;转发&lt;/button&gt;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>然后点击按钮的时候会自动调用页面中定义好的onShareAppMessage方法。</li>\n</ul>\n</blockquote>\n<h2 id=\"分享内容\"><a href=\"#分享内容\" class=\"headerlink\" title=\"分享内容\"></a>分享内容</h2><p>在分享内容的时候，我们通常会指定到小程序中具体的某个页面。但是有时页面不是首页的情况下，可能需要进行参数的传递，那么我们把需要的参数存放在data中即可，然后路径中使用即可。这里需要注意的是this指代的问题。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">  * 右上角转发功能 </span></span><br><span class=\"line\"><span class=\"comment\">  * */</span></span><br><span class=\"line\"> onShareAppMessage: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">   <span class=\"keyword\">var</span> that = <span class=\"keyword\">this</span>;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">   <span class=\"keyword\">if</span> (res.from === <span class=\"string\">'menu'</span>) &#123;</span><br><span class=\"line\">     <span class=\"comment\">// 来自页面内转发按钮</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">   <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">     title: <span class=\"string\">\"“书来书往”读书季享好礼，分享即可领红包哦\"</span>,</span><br><span class=\"line\">     path: <span class=\"string\">'/pages/booklists/booklist-detail/booklist-detail?listId='</span> + that.data.listId,</span><br><span class=\"line\">     imageUrl: <span class=\"keyword\">this</span>.data.coverUrl,</span><br><span class=\"line\">     success: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 转发成功</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(<span class=\"string\">\"转发成功\"</span>)</span><br><span class=\"line\">     &#125;,</span><br><span class=\"line\">     fail: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">res</span>) </span>&#123;</span><br><span class=\"line\">       <span class=\"comment\">// 转发失败</span></span><br><span class=\"line\">       <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://blog.csdn.net/xiaochun365/article/details/76546585\" target=\"_blank\" rel=\"noopener\">微信小程序 转发</a></li>\n<li><a href=\"https://www.cnblogs.com/till-the-end/p/8470557.html\" target=\"_blank\" rel=\"noopener\">微信小程序分享朋友圈的实现思路与解决办法</a></li>\n</ul>\n"},{"title":"微信小程序昵称特殊字符的处理","text":"​ 昵称处理 在小程序的开发过程中，我们不可避免的需要保存用户昵称，但是小程序中的昵称是支持特殊字符的。有的用户是很喜欢在昵称中加入emoj表情的。所以我们需要解决微信登录时昵称中包含特殊字符，不能存入数据库问题。 大致思路则是接收到的用户的昵称参数进行编码处理。 对昵称进行编码 首先对于获取到的字符串进行加密 1wc会员.set昵称(Base64.encodeBase64String(btbUser.getNickName().getBytes(\"utf-8\"))); 数据保存之后的结果如下图所示： 解码的时候采用： nickname = new String(Base64.decodeBase64(nickname.getBytes()), “utf-8”); 这里不使用这种方式解码的原因是如果是对页面初始化的中集合进行处理的话，需要对取出来的数据在进行一次遍历操作对字符进行处理，过程比较繁琐。 对昵称进行解码在后台页面展示时，对字符串进行解码操作，这里采用的是crypto-js。（这里试过很多种方法，但是对于包含特殊字符以及中文的编码和解码支持的都不是很好，无法和java、mysql等方式进行衔接） 首先在github上面下在对应的js , 或者使用npm的方式进行安装. 1npm install crypto-js 页面中引入相应的js文件。 12&lt;script type='text/javascript' src=\"$&#123;appPath&#125;/common/btb/js/crypto-js.js\"&gt;&lt;/script&gt;&lt;script type='text/javascript' src=\"$&#123;appPath&#125;/common/btb/js/enc-base64.js\"&gt;&lt;/script&gt; js中定义个一处理昵称的函数： 12345678910111213141516171819function formatNickName(data) &#123; if(data)&#123; data = base64_decode(data); return data; &#125;else&#123; return \"\"; &#125; &#125;//编码function base64_encode(str)&#123; var tempstr=CryptoJS.enc.Utf8.parse($(\"#source\").val()); var base64str=CryptoJS.enc.Base64.stringify(tempstr); return base64str;&#125;//解码function base64_decode(str)&#123; var words = CryptoJS.enc.Base64.parse(str); return words.toString(CryptoJS.enc.Utf8)&#125; 在对应列表中加入格式化函数 1234&lt;st:objList id=\"fusr0010\" tabRowId=\"oid\" tabSearchId=\"fusr0010QuerySearchForm\" tabPath=\"/btb/usr/fusr0010_query.st\" tabInstanceName=\"fusr0010Ap\" tabRowhandler=\"rightHander\" tabTitle=\"用户管理\" tabPageSize=\"7\"&gt; &lt;st:objListColumn columnDisplay=\"昵称\" columnName=\"昵称\" columnSortName=\"昵称\" columnWidth=\"10%\" columnProcess=\"formatNickName\"&gt;&lt;/st:objListColumn&gt;&lt;/st:objList&gt; 结果展示 【扩展】除了java和js中可以对字符进行处理。在mysql5.6及之后也有提供了响应函数支持。 to_base64 123456mysql&gt; select to_base64('helloworld');+-------------------------+| to_base64('helloworld') |+-------------------------+| aGVsbG93b3JsZA== |+-------------------------+ from_base64 123456mysql&gt; select from_base64('aGVsbG93b3JsZA==');+---------------------------------+| from_base64('aGVsbG93b3JsZA==') |+---------------------------------+| helloworld |+---------------------------------+","content":"<p>​    </p>\n<h1 id=\"昵称处理\"><a href=\"#昵称处理\" class=\"headerlink\" title=\"昵称处理\"></a>昵称处理</h1><p>   在小程序的开发过程中，我们不可避免的需要保存用户昵称，但是小程序中的昵称是支持特殊字符的。有的用户是很喜欢在昵称中加入emoj表情的。所以我们需要解决微信登录时昵称中包含特殊字符，不能存入数据库问题。</p>\n<p>大致思路则是接收到的用户的昵称参数进行编码处理。</p>\n<h2 id=\"对昵称进行编码\"><a href=\"#对昵称进行编码\" class=\"headerlink\" title=\"对昵称进行编码\"></a>对昵称进行编码</h2><ul>\n<li>首先对于获取到的字符串进行加密</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">wc</span>会员<span class=\"selector-class\">.set</span>昵称(<span class=\"selector-tag\">Base64</span><span class=\"selector-class\">.encodeBase64String</span>(<span class=\"selector-tag\">btbUser</span><span class=\"selector-class\">.getNickName</span>()<span class=\"selector-class\">.getBytes</span>(\"<span class=\"selector-tag\">utf-8</span>\")));</span><br></pre></td></tr></table></figure>\n<p> 数据保存之后的结果如下图所示：</p>\n<p><img src=\"/images/miniprogram/nickname1.png\" alt=\"avatar\"></p>\n<blockquote>\n<p>解码的时候采用：</p>\n<p>nickname = new String(Base64.decodeBase64(nickname.getBytes()), “utf-8”);</p>\n<p>这里不使用这种方式解码的原因是如果是对页面初始化的中集合进行处理的话，需要对取出来的数据在进行一次遍历操作对字符进行处理，过程比较繁琐。</p>\n</blockquote>\n<h2 id=\"对昵称进行解码\"><a href=\"#对昵称进行解码\" class=\"headerlink\" title=\"对昵称进行解码\"></a>对昵称进行解码</h2><p>在后台页面展示时，对字符串进行解码操作，这里采用的是<a href=\"https://github.com/brix/crypto-js\" target=\"_blank\" rel=\"noopener\">crypto-js</a>。（这里试过很多种方法，但是对于包含特殊字符以及中文的编码和解码支持的都不是很好，无法和java、mysql等方式进行衔接）</p>\n<ul>\n<li>首先在github上面下在对应的js , 或者使用npm的方式进行安装.</li>\n</ul>\n<figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> crypto-js</span><br></pre></td></tr></table></figure>\n<ul>\n<li>页面中引入相应的js文件。</li>\n</ul>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">'text/javascript'</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$</span></span></span><span class=\"template-variable\">&#123;appPath&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">/common/btb/js/crypto-js.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">'text/javascript'</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$</span></span></span><span class=\"template-variable\">&#123;appPath&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">/common/btb/js/enc-base64.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>js中定义个一处理昵称的函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatNickName</span>(<span class=\"params\">data</span>) </span>&#123;\t</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(data)&#123;\t</span><br><span class=\"line\">\t \t\tdata = base64_decode(data);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> data;\t\t</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;\t\t\t</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"string\">\"\"</span>;\t\t</span><br><span class=\"line\">\t\t&#125;\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"><span class=\"comment\">//编码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">base64_encode</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> tempstr=CryptoJS.enc.Utf8.parse($(<span class=\"string\">\"#source\"</span>).val());</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> base64str=CryptoJS.enc.Base64.stringify(tempstr);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> \tbase64str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//解码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">base64_decode</span>(<span class=\"params\">str</span>)</span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> words  = CryptoJS.enc.Base64.parse(str);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> words.toString(CryptoJS.enc.Utf8)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在对应列表中加入格式化函数</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">st:objList</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fusr0010\"</span> <span class=\"attr\">tabRowId</span>=<span class=\"string\">\"oid\"</span> <span class=\"attr\">tabSearchId</span>=<span class=\"string\">\"fusr0010QuerySearchForm\"</span> <span class=\"attr\">tabPath</span>=<span class=\"string\">\"/btb/usr/fusr0010_query.st\"</span>  <span class=\"attr\">tabInstanceName</span>=<span class=\"string\">\"fusr0010Ap\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">\t    \t    <span class=\"attr\">tabRowhandler</span>=<span class=\"string\">\"rightHander\"</span> <span class=\"attr\">tabTitle</span>=<span class=\"string\">\"用户管理\"</span>  <span class=\"attr\">tabPageSize</span>=<span class=\"string\">\"7\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">st:objListColumn</span> <span class=\"attr\">columnDisplay</span>=<span class=\"string\">\"昵称\"</span> <span class=\"attr\">columnName</span>=<span class=\"string\">\"昵称\"</span> <span class=\"attr\">columnSortName</span>=<span class=\"string\">\"昵称\"</span> <span class=\"attr\">columnWidth</span>=<span class=\"string\">\"10%\"</span> <span class=\"attr\">columnProcess</span>=<span class=\"string\">\"formatNickName\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">st:objListColumn</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">st:objList</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"结果展示\"><a href=\"#结果展示\" class=\"headerlink\" title=\"结果展示\"></a>结果展示</h2><p><img src=\"/images/miniprogram/nickname2.png\" alt=\"avatar\"></p>\n<h1 id=\"【扩展】\"><a href=\"#【扩展】\" class=\"headerlink\" title=\"【扩展】\"></a>【扩展】</h1><p>除了java和js中可以对字符进行处理。在mysql5.6及之后也有提供了响应函数支持。</p>\n<ul>\n<li>to_base64</li>\n</ul>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select to<span class=\"emphasis\">_base64('helloworld');</span></span><br><span class=\"line\"><span class=\"emphasis\">+-------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| to_</span>base64(<span class=\"emphasis\">'helloworld'</span>) |</span><br><span class=\"line\"><span class=\"code\">+-------------------------+</span></span><br><span class=\"line\">| aGVsbG93b3JsZA==        |</span><br><span class=\"line\"><span class=\"code\">+-------------------------+</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>from_base64</li>\n</ul>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; select from<span class=\"emphasis\">_base64('aGVsbG93b3JsZA==');</span></span><br><span class=\"line\"><span class=\"emphasis\">+---------------------------------+</span></span><br><span class=\"line\"><span class=\"emphasis\">| from_</span>base64(<span class=\"emphasis\">'aGVsbG93b3JsZA=='</span>) |</span><br><span class=\"line\"><span class=\"code\">+---------------------------------+</span></span><br><span class=\"line\">| helloworld                      |</span><br><span class=\"line\"><span class=\"code\">+---------------------------------+</span></span><br></pre></td></tr></table></figure>\n"},{"title":"Mysql常见问题及解决","text":"UTF-8编码字节个数问题错误内容Incorrect string value: ‘\\xF0\\x9F…’ for column ‘XXX’ at row 1 这个问题，原因是UTF-8编码有可能是两个、三个、四个字节。Emoji表情或者某些特殊字符是4个字节，而Mysql的utf8编码最多3个字节，所以数据插不进去。 解决方法 在mysql的安装目录下找到my.ini,作如下修改： 12345[mysqld]character-set-server=utf8mb4[mysql]default-character-set=utf8mb4修改后重启Mysql 将已经建好的表也转换成utf8mb4 12更改数据库编码：ALTER DATABASE caitu99 CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci;alter table TABLE_NAME convert to character set utf8mb4 collate utf8mb4_bin; （将TABLE_NAME替换成你的表名） 修改mysql配置文件my.cnf（windows为my.ini） my.cnf一般在/etc/my.cnf位置。找到后请在以下三部分里添加如下内容： 123456789[client] default-character-set = utf8mb4 [mysql] default-character-set = utf8mb4[mysqld] character-set-client-handshake = FALSE character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci init_connect='SET NAMES utf8mb4' 忽略大小写问题错误内容在系统运行时，ba_user表实际上是存在的，但是因为mysql大小写的问题，所以在执行服务时找不到对应的表。 12345Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table 'booktobook.BA_User' doesn't exista...com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeQuery(NewProxyPreparedStatement.java:116) at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:82) ... 82 more 错误原因 查看大小写区分1mysql&gt; show variables like \"%case%\"; 执行结果： Variable_name Value lower_case_file_system OFF lower_case_table_names 0 【注意】 MYSQL在LINUX下数据库名、表名、列名、别名大小写规则如下： 据库名与表名是严格区分大小写的 表的别名是严格区分大小写的 列名与列的别名在所有的情况下均是忽略大小写的 变量名也是严格区分大小写的 解决办法 用ROOT登录，修改/etc/my.cnf 1vi /etc/my.cnf 在[mysqld]下加入一行：lower_case_table_names=1 重新启动数据库即可 1/etc/init.d/mysqld restart 链接超时问题错误内容使用Connector/J连接MySQL数据库，程序运行较长时间后就会报以下错误： 1Communications link failure，The last packet successfully received from the server was * millisecond ago.The last packet successfully sent to the server was * millisecond ago。 ##错误原因 MySQL服务器默认的“wait_timeout”是28800秒即8小时，意味着如果一个连接的空闲时间超过8个小时，MySQL将自动断开该连接，而连接池却认为该连接还是有效的(因为并未校验连接的有效性)，当应用申请使用该连接时，就会导致上面的报错。 ##解决方法 修改数据库的wait_timeout最大为31536000即1年，在my.cnf中加入： [mysqld] wait_timeout=31536000 interactive_timeout=31536000 重启生效，需要同时修改这两个参数。 列未出现在group by中导致语法错误在执行mysql的查询语句时，之前在windows上是可以的，换到linux上语句无法正常执行。 错误内容1ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'database_tl.emp.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by 错误原因看一下group by的语法： select 选取分组中的列+聚合函数 from 表名称 group by 分组的列 从语法格式来看，是先有分组，再确定检索的列，检索的列只能在参加分组的列中选。 我当前Mysql版本5.7.17， 再看一下ONLY_FULL_GROUP_BY的意思是：对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中，也就是说查出来的列必须在group by后面出现否则就会报错，或者这个字段出现在聚合函数里面。 查看mysql版本命令：select version() 查看sql_model参数命令： 12SELECT @@GLOBAL.sql_mode;SELECT @@SESSION.sql_mode; 发现： 第一项默认开启ONLY_FULL_GROUP_BY。 sql_mode的模式为以下几种：ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION 解决方法 只选择出现在group by后面的列，或者给列增加聚合函数；（不推荐） 更改GLOBAL.sql_mode 如果想彻底修改需要更改my.conf 配置(my.confl是在inux下面，如果是windows则是my.ini)在 [mysqld]和[mysql]下添加 1sql_mode ='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';","content":"<h1 id=\"UTF-8编码字节个数问题\"><a href=\"#UTF-8编码字节个数问题\" class=\"headerlink\" title=\"UTF-8编码字节个数问题\"></a>UTF-8编码字节个数问题</h1><h2 id=\"错误内容\"><a href=\"#错误内容\" class=\"headerlink\" title=\"错误内容\"></a>错误内容</h2><p><strong>Incorrect string value: ‘\\xF0\\x9F…’ for column ‘XXX’ at row 1</strong></p>\n<p>这个问题，原因是UTF-8编码有可能是两个、三个、四个字节。Emoji表情或者某些特殊字符是4个字节，而Mysql的utf8编码最多3个字节，所以数据插不进去。</p>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li>在mysql的安装目录下找到my.ini,作如下修改：</li>\n</ul>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[<span class=\"meta\">mysqld</span>]</span><br><span class=\"line\">character-<span class=\"keyword\">set</span>-server=utf8mb4</span><br><span class=\"line\">[<span class=\"meta\">mysql</span>]</span><br><span class=\"line\"><span class=\"keyword\">default</span>-character-<span class=\"keyword\">set</span>=utf8mb4</span><br><span class=\"line\">修改后重启Mysql</span><br></pre></td></tr></table></figure>\n<ul>\n<li>将已经建好的表也转换成utf8mb4</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">更改数据库编码：<span class=\"keyword\">ALTER</span> <span class=\"keyword\">DATABASE</span> caitu99 <span class=\"built_in\">CHARACTER</span> <span class=\"keyword\">SET</span> utf8mb4 <span class=\"keyword\">COLLATE</span> utf8mb4_general_ci;</span><br><span class=\"line\"><span class=\"keyword\">alter</span> <span class=\"keyword\">table</span> TABLE_NAME <span class=\"keyword\">convert</span> <span class=\"keyword\">to</span> <span class=\"built_in\">character</span> <span class=\"keyword\">set</span> utf8mb4 <span class=\"keyword\">collate</span> utf8mb4_bin; （将TABLE_NAME替换成你的表名）</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改mysql配置文件my.cnf（windows为my.ini） </li>\n</ul>\n<p>my.cnf一般在/etc/my.cnf位置。找到后请在以下三部分里添加如下内容： </p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">[client]</span> </span><br><span class=\"line\"><span class=\"attr\">default-character-set</span> = utf8mb4 </span><br><span class=\"line\"><span class=\"section\">[mysql]</span> </span><br><span class=\"line\"><span class=\"attr\">default-character-set</span> = utf8mb4</span><br><span class=\"line\"><span class=\"section\">[mysqld]</span> </span><br><span class=\"line\"><span class=\"attr\">character-set-client-handshake</span> = <span class=\"literal\">FALSE</span> </span><br><span class=\"line\"><span class=\"attr\">character-set-server</span> = utf8mb4 </span><br><span class=\"line\"><span class=\"attr\">collation-server</span> = utf8mb4_unicode_ci </span><br><span class=\"line\"><span class=\"attr\">init_connect</span>=<span class=\"string\">'SET NAMES utf8mb4'</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"忽略大小写问题\"><a href=\"#忽略大小写问题\" class=\"headerlink\" title=\"忽略大小写问题\"></a>忽略大小写问题</h1><h2 id=\"错误内容-1\"><a href=\"#错误内容-1\" class=\"headerlink\" title=\"错误内容\"></a>错误内容</h2><p>在系统运行时，ba_user表实际上是存在的，但是因为mysql大小写的问题，所以在执行服务时找不到对应的表。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Caused by: com.mysql.jdbc.exceptions.jdbc4.MySQLSyntaxErrorException: Table <span class=\"string\">'booktobook.BA_User'</span> doesn<span class=\"string\">'t exista</span></span><br><span class=\"line\"><span class=\"string\">...</span></span><br><span class=\"line\"><span class=\"string\">com.mchange.v2.c3p0.impl.NewProxyPreparedStatement.executeQuery(NewProxyPreparedStatement.java:116)</span></span><br><span class=\"line\"><span class=\"string\">\tat org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.extract(ResultSetReturnImpl.java:82)</span></span><br><span class=\"line\"><span class=\"string\">\t... 82 more</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"错误原因\"><a href=\"#错误原因\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h2><ul>\n<li>查看大小写区分<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt; show <span class=\"keyword\">variables</span> like <span class=\"comment\">\"%case%\"</span>;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>执行结果：</p>\n<table>\n<thead>\n<tr>\n<th>Variable_name</th>\n<th>Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>lower_case_file_system</td>\n<td>OFF</td>\n</tr>\n<tr>\n<td>lower_case_table_names</td>\n<td>0</td>\n</tr>\n</tbody>\n</table>\n<p>【注意】</p>\n<p>MYSQL在LINUX下数据库名、表名、列名、别名大小写规则如下：</p>\n<ol>\n<li><p>据库名与表名是严格区分大小写的 </p>\n</li>\n<li><p>表的别名是严格区分大小写的  </p>\n</li>\n<li>列名与列的别名在所有的情况下均是忽略大小写的 </li>\n<li>变量名也是严格区分大小写的  </li>\n</ol>\n<h2 id=\"解决办法\"><a href=\"#解决办法\" class=\"headerlink\" title=\"解决办法\"></a>解决办法</h2><ul>\n<li>用ROOT登录，修改/etc/my.cnf 　</li>\n</ul>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">vi</span> /etc/my.<span class=\"keyword\">cnf</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在[mysqld]下加入一行：lower_case_table_names=1 　　</li>\n<li>重新启动数据库即可</li>\n</ul>\n<figure class=\"highlight awk\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">/etc/i</span>nit.d<span class=\"regexp\">/mysqld restart</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"链接超时问题\"><a href=\"#链接超时问题\" class=\"headerlink\" title=\"链接超时问题\"></a>链接超时问题</h1><h2 id=\"错误内容-2\"><a href=\"#错误内容-2\" class=\"headerlink\" title=\"错误内容\"></a>错误内容</h2><p>使用Connector/J连接MySQL数据库，程序运行较长时间后就会报以下错误：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Communications link failure，The last packet successfully received from the server was * millisecond ago.The last packet successfully sent to the server was *  millisecond ago。</span><br></pre></td></tr></table></figure>\n<p>##错误原因</p>\n<p>MySQL服务器默认的“wait_timeout”是28800秒即8小时，意味着如果一个连接的空闲时间超过8个小时，MySQL将自动断开该连接，而连接池却认为该连接还是有效的(因为并未校验连接的有效性)，当应用申请使用该连接时，就会导致上面的报错。</p>\n<p>##解决方法</p>\n<p>修改数据库的wait_timeout最大为31536000即1年，在my.cnf中加入：</p>\n<p>[mysqld]</p>\n<p>wait_timeout=31536000</p>\n<p>interactive_timeout=31536000</p>\n<p>重启生效，需要同时修改这两个参数。</p>\n<h1 id=\"列未出现在group-by中导致语法错误\"><a href=\"#列未出现在group-by中导致语法错误\" class=\"headerlink\" title=\"列未出现在group by中导致语法错误\"></a>列未出现在group by中导致语法错误</h1><p>在执行mysql的查询语句时，之前在windows上是可以的，换到linux上语句无法正常执行。</p>\n<h2 id=\"错误内容-3\"><a href=\"#错误内容-3\" class=\"headerlink\" title=\"错误内容\"></a>错误内容</h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column 'database_tl.emp.id' which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure>\n<h2 id=\"错误原因-1\"><a href=\"#错误原因-1\" class=\"headerlink\" title=\"错误原因\"></a>错误原因</h2><p>看一下group by的语法：</p>\n<p>select 选取分组中的列+聚合函数 from 表名称 group by 分组的列 </p>\n<p>从语法格式来看，是先有分组，再确定检索的列，检索的列只能在参加分组的列中选。</p>\n<p>我当前Mysql版本5.7.17，</p>\n<p>再看一下ONLY_FULL_GROUP_BY的意思是：对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，那么这个SQL是不合法的，因为列不在GROUP BY从句中，也就是说查出来的列必须在group by后面出现否则就会报错，或者这个字段出现在聚合函数里面。</p>\n<ul>\n<li><p>查看mysql版本命令：<code>select version()</code></p>\n</li>\n<li><p>查看sql_model参数命令：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">SELECT</span> @@<span class=\"keyword\">GLOBAL</span>.<span class=\"keyword\">sql_mode</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">SELECT</span> @@<span class=\"keyword\">SESSION</span>.<span class=\"keyword\">sql_mode</span>;</span><br></pre></td></tr></table></figure>\n<p>发现：</p>\n<p>第一项默认开启ONLY_FULL_GROUP_BY。</p>\n<blockquote>\n<p>sql_mode的模式为以下几种：ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION</p>\n</blockquote>\n</li>\n</ul>\n<h2 id=\"解决方法-1\"><a href=\"#解决方法-1\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><ul>\n<li>只选择出现在group by后面的列，或者给列增加聚合函数；（不推荐）</li>\n<li>更改GLOBAL.sql_mode</li>\n</ul>\n<p>如果想彻底修改需要更改my.conf 配置(my.confl是在inux下面，如果是windows则是my.ini)<br>在 [mysqld]和[mysql]下添加</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">sql_mode</span> =<span class=\"string\">'STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION'</span>;</span><br></pre></td></tr></table></figure>\n"},{"title":"使用wxParse解析html富文本内容","text":"最近项目上遇到在微信小程序里需要显示促销活动内容，促销活动内容是通过接口读取的服务器中的富文本内容，是html格式的，小程序默认是不支持html格式的内容显示的，那我们需要显示html内容的时候，就可以通过wxParse来实现。 前期准备 首先我们在github上下载wxParse 。 下载完之后我们需要用到目录下的wxParse文件夹，把他拷贝到我们的项目目录的plugins下。 使用步骤 在把wxParse添加到我们项目的文件夹之后，我们就可以开始使用了。下面是具体的步骤： 1.在app.wxss全局样式文件中，需要引入wxParse的样式表 1@import \"/page/wxParse/wxParse.wxss\"; 2.在需要加载html内容的页面对应的js文件里引入wxParse 1var WxParse = require('../../wxParse/wxParse.js'); 3.通过调用WxParse.wxParse方法来设置html内容 1234567891011121314151617181920212223242526272829/*** WxParse.wxParse(bindName , type, data, target,imagePadding)* 1.bindName绑定的数据名(必填)* 2.type可以为html或者md(必填)* 3.data为传入的具体数据(必填)* 4.target为Page对象,一般为this(必填)* 5.imagePadding为当图片自适应是左右的单一padding(默认为0,可选)*/Page(&#123; data: &#123; &#125;, onLoad: function () &#123; var that = this; wx.request(&#123; url: '', method: 'POST', data: &#123; 'id':13 &#125;, header: &#123; 'content-type': 'application/json' &#125;, success: function(res) &#123; var article = res.data[0].activityContent; WxParse.wxParse('article', 'html', article, that); &#125; &#125;) &#125;&#125;) 4.在页面中引用模板 12&lt;import src=\"../../wxParse/wxParse.wxml\"/&gt;&lt;template is=\"wxParse\" data=\"&#123;&#123;wxParseData:article.nodes&#125;&#125;\"/&gt; 这样就可以在微信小程序中嵌入html内容了。","content":"<p>最近项目上遇到在微信小程序里需要显示促销活动内容，促销活动内容是通过接口读取的服务器中的富文本内容，是html格式的，小程序默认是不支持html格式的内容显示的，那我们需要显示html内容的时候，就可以通过wxParse来实现。</p>\n<p><strong>前期准备 </strong></p>\n<ul>\n<li>首先我们在github上下载<a href=\"https://github.com/icindy/wxParse\" target=\"_blank\" rel=\"noopener\">wxParse</a> 。</li>\n<li>下载完之后我们需要用到目录下的wxParse文件夹，把他拷贝到我们的项目目录的plugins下。</li>\n</ul>\n<p><strong>使用步骤 </strong></p>\n<p>在把wxParse添加到我们项目的文件夹之后，我们就可以开始使用了。下面是具体的步骤：</p>\n<p>1.在app.wxss全局样式文件中，需要引入wxParse的样式表</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">import</span> <span class=\"string\">\"/page/wxParse/wxParse.wxss\"</span>;</span><br></pre></td></tr></table></figure>\n<p>2.在需要加载html内容的页面对应的js文件里引入wxParse</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">var WxParse</span> = require(<span class=\"string\">'../../wxParse/wxParse.js'</span>);</span><br></pre></td></tr></table></figure>\n<p>3.通过调用WxParse.wxParse方法来设置html内容</p>\n<figure class=\"highlight haskell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">* <span class=\"type\">WxParse</span>.wxParse(bindName , <span class=\"class\"><span class=\"keyword\">type</span>, <span class=\"keyword\">data</span>, target,imagePadding)</span></span><br><span class=\"line\">* <span class=\"number\">1.</span>bindName绑定的数据名(必填)</span><br><span class=\"line\">* <span class=\"number\">2.</span><span class=\"class\"><span class=\"keyword\">type</span>可以为html或者md(必填)</span></span><br><span class=\"line\">* <span class=\"number\">3.</span><span class=\"class\"><span class=\"keyword\">data</span>为传入的具体数据(必填)</span></span><br><span class=\"line\">* <span class=\"number\">4.</span>target为<span class=\"type\">Page</span>对象,一般为this(必填)</span><br><span class=\"line\">* <span class=\"number\">5.</span>imagePadding为当图片自适应是左右的单一padding(默认为<span class=\"number\">0</span>,可选)</span><br><span class=\"line\">*/</span><br><span class=\"line\"><span class=\"type\">Page</span>(&#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"class\">  &#125;,</span></span><br><span class=\"line\">  onLoad: function () &#123;</span><br><span class=\"line\">    var that = this;</span><br><span class=\"line\">    wx.request(&#123;</span><br><span class=\"line\">        url: '', </span><br><span class=\"line\">        method: '<span class=\"type\">POST'</span>,</span><br><span class=\"line\">        <span class=\"class\"><span class=\"keyword\">data</span>: &#123;</span></span><br><span class=\"line\"><span class=\"class\">            '<span class=\"title\">id'</span>:13</span></span><br><span class=\"line\"><span class=\"class\">        &#125;,</span></span><br><span class=\"line\">        header: &#123;</span><br><span class=\"line\">            'content-<span class=\"class\"><span class=\"keyword\">type</span>': 'application/json'</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        success: function(res) &#123;</span><br><span class=\"line\">            var article = res.<span class=\"class\"><span class=\"keyword\">data</span>[0].activityContent;</span></span><br><span class=\"line\">            <span class=\"type\">WxParse</span>.wxParse('article', 'html', article, that);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>4.在页面中引用模板</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;import <span class=\"attribute\">src</span>=<span class=\"string\">\"../../wxParse/wxParse.wxml\"</span>/&gt;</span><br><span class=\"line\">&lt;template <span class=\"attribute\">is</span>=<span class=\"string\">\"wxParse\"</span> <span class=\"attribute\">data</span>=<span class=\"string\">\"&#123;&#123;wxParseData:article.nodes&#125;&#125;\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>这样就可以在微信小程序中嵌入html内容了。</p>\n"},{"title":"在项目中使用Echarts","text":"前期准备在echart官网中下载对应的ecarts插件。 如果是开发中建议下载源代码，把下载下来的echarts.js 放在对应的文件中。 页面1、在页面中引入echarts.js。 1&lt;script type=\"text/javascript\" src=\"$&#123;appPath&#125;/plugins/echarts/echarts.js\"&gt;&lt;/script&gt; 2、定义存放ecahrt表格的容器。 12&lt;div id='line' style=\"height: 450px; border: 1px solid #ccc; padding: 10px;\"&gt;&lt;/div&gt;&lt;div id='noData' style=\"height: 450px; border: 1px solid #ccc; padding: 10px;text-align: center;color:red;font-size:16px;margin-top:20px;font-weight:bold\"&gt;没有数据&lt;/div&gt; 3、初始化echarts的配置。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647var myChart = echarts.init(document.getElementById('line'),\"light\");var lineOption = &#123; title : &#123; text : '', subtext : '' &#125;, tooltip : &#123; trigger : 'axis' //item 在哪条线上显示哪条线上的数据，axis点在哪个坐标点上显示对于点上所有数据&#125;,legend : &#123; data : []&#125;,toolbox : &#123; //可视化的工具箱 show : true, feature : &#123; dataView : &#123; //数据视图 show : true &#125;, restore : &#123; //重置 show : true &#125;, dataZoom : &#123; //数据缩放视图 show : true &#125;, saveAsImage : &#123;//保存图片 show : true &#125;, magicType : &#123;//动态类型切换 type : [ 'bar', 'line' ] &#125; &#125; &#125;, calculable : true, xAxis : [ &#123; type : 'category', boundaryGap : false, data : [] &#125; ], yAxis : [ &#123; type : 'value', axisLabel : &#123; formatter : '&#123;value&#125; ' &#125; &#125; ], series : []&#125;;myChart.setOption(lineOption); 4、请求具体的统计数据，并更新echarts中的动态数据。 12345678910111213141516171819202122232425262728293031323334function queryData() &#123; $(\"#line\").show(); $(\"#noData\").hide(); $.ajax( &#123; url : '$&#123;appPath&#125;/btb/sta/fsta0010_getLineImage.st', data : &#123;&#125;, method : \"POST\", dataType : 'json', success : function(data) &#123; //请求成功时处理 var data = JSON.stringify(data.resultDataMap); var responseText = eval('(' + data + ')'); lineOption.legend.data = responseText.legend; lineOption.xAxis[0].data = responseText.xAxis; var serieslist = responseText.series; if(serieslist.length &gt; 0)&#123; for ( var i = 0; i &lt; serieslist.length; i++) &#123; lineOption.series[i] = serieslist[i]; &#125; &#125;else&#123; $(\"#line\").hide(); $(\"#noData\").show(); &#125; myChart.setOption(lineOption, true); &#125;, complete : function() &#123; //请求完成的处理 &#125;, error : function() &#123; //请求出错处理 com_div_msg(\"加载失败\"); &#125; &#125;)&#125; 123456$(function()&#123; //相关页面初始化的处理； ...... //查询统计数据 queryData();&#125;) 后台在对应的统计的action中： 12345678910111213141516171819202122public String getLineImage() &#123; List&lt;EchartsEntity&gt; echarts = new ArrayList&lt;EchartsEntity&gt;(); // 自定义横坐标 String[] xAxis = &#123; \"周一\", \"周二\", \"周三\", \"周四\", \"周五\", \"周六\", \"周日\" &#125;; // 自定义各种类型的显示数据 EchartsEntity entity1 = new EchartsEntity(\"邮件营销\", \"line\", Arrays .asList(120, 132, 101, 134, 90, 230, 210)); EchartsEntity entity2 = new EchartsEntity(\"联盟广告\", \"line\", Arrays .asList(220, 182, 191, 234, 290, 330, 310)); EchartsEntity entity3 = new EchartsEntity(\"视频广告\", \"line\", Arrays .asList(150, 232, 201, 154, 190, 330, 410)); echarts.add(entity1); echarts.add(entity2); echarts.add(entity3); String[] legend = &#123; \"邮件营销\", \"联盟广告\", \"视频广告\" &#125;; resultDataMap = new HashMap&lt;String, Object&gt;(); resultDataMap.put(\"xAxis\", xAxis); resultDataMap.put(\"series\", echarts); resultDataMap.put(\"legend\", legend); System.out.println(GsonUtil.getJSONString(resultDataMap)); return \"json\";&#125; 2、EchartsEntity 123456public class EchartsEntity &#123; public String name; public String type; public List&lt;?&gt; data; //此处省略get,set方法 &#125; 配置文件在对应的strus的配置文件中把后端的resultDataMap 作为json对象返回到页面中： 123456&lt;package name=\"btbsta\" extends=\"base\" namespace=\"/btb/sta\" strict-method-invocation=\"false\"&gt; &lt;action name=\"fsta0010_*\" method=\"&#123;1&#125;\" class=\"fsta0010Action\"&gt; &lt;result name=\"json\" type=\"json\"&gt; &lt;param name=\"includeProperties\"&gt;resultDataMap.*&lt;/param&gt; &lt;/result&gt; &lt;/action&gt;&lt;/package&gt; 示例结果 其他更换主题在有些情况下，为了和自己的系统的主题相适应，我们需要更改ecahrt默认的主题。 echarts.js自带官方自带的主题有default，dark，light。这三种主题是不需要下载的。使用方法如下： 1var myChart = echarts.init(document.getElementById('line'), 'light'); 官网下载echarts中除了自带的三种样式之外，还提供了其他主题。使用的方法如下： 1、在官网上下载对应的主题文件的js，例如macarons.js。 2、在页面中引入js。 3、在初始化echarts配置的时候，加入主题的名称即可。 1var myChart = echarts.init(document.getElementById('line'), 'macarons'); echarts2.0版本的使用示例","content":"<h1 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h1><p>在echart官网中<a href=\"http://echarts.baidu.com/download.html\" target=\"_blank\" rel=\"noopener\">下载对应的ecarts插件</a>。</p>\n<blockquote>\n<p>如果是开发中建议下载源代码，把下载下来的echarts.js 放在对应的文件中。</p>\n</blockquote>\n<h1 id=\"页面\"><a href=\"#页面\" class=\"headerlink\" title=\"页面\"></a>页面</h1><p>1、在页面中引入echarts.js。</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"$</span></span></span><span class=\"template-variable\">&#123;appPath&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">/plugins/echarts/echarts.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>2、定义存放ecahrt表格的容器。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div <span class=\"attribute\">id</span>=<span class=\"string\">'line'</span> <span class=\"attribute\">style</span>=<span class=\"string\">\"height: 450px; border: 1px solid #ccc; padding: 10px;\"</span>&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;div <span class=\"attribute\">id</span>=<span class=\"string\">'noData'</span> <span class=\"attribute\">style</span>=<span class=\"string\">\"height: 450px; border: 1px solid #ccc; padding: 10px;text-align: center;color:red;font-size:16px;margin-top:20px;font-weight:bold\"</span>&gt;没有数据&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>3、初始化echarts的配置。</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myChart = echarts.init(document.getElementById(<span class=\"string\">'line'</span>),<span class=\"string\">\"light\"</span>);</span><br><span class=\"line\">var lineOption = &#123;</span><br><span class=\"line\">\t<span class=\"string\">title :</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">text :</span> <span class=\"string\">''</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">subtext :</span> <span class=\"string\">''</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">tooltip :</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">trigger :</span> <span class=\"string\">'axis'</span> <span class=\"comment\">//item 在哪条线上显示哪条线上的数据，axis点在哪个坐标点上显示对于点上所有数据</span></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">legend :</span> &#123;</span><br><span class=\"line\">\t<span class=\"string\">data :</span> []</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"string\">toolbox :</span> &#123; <span class=\"comment\">//可视化的工具箱</span></span><br><span class=\"line\">\t\t<span class=\"string\">show :</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">feature :</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">dataView :</span> &#123; <span class=\"comment\">//数据视图</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">show :</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"string\">restore :</span> &#123; <span class=\"comment\">//重置</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">show :</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"string\">dataZoom :</span> &#123; <span class=\"comment\">//数据缩放视图</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">show :</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"string\">saveAsImage :</span> &#123;<span class=\"comment\">//保存图片</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">show :</span> <span class=\"literal\">true</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"string\">magicType :</span> &#123;<span class=\"comment\">//动态类型切换</span></span><br><span class=\"line\">\t\t\t\t<span class=\"string\">type :</span> [ <span class=\"string\">'bar'</span>, <span class=\"string\">'line'</span> ]</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"string\">calculable :</span> <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t<span class=\"string\">xAxis :</span> [ &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">type :</span> <span class=\"string\">'category'</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">boundaryGap :</span> <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">data :</span> []</span><br><span class=\"line\">\t&#125; ],</span><br><span class=\"line\">\t<span class=\"string\">yAxis :</span> [ &#123;</span><br><span class=\"line\">\t\t<span class=\"string\">type :</span> <span class=\"string\">'value'</span>,</span><br><span class=\"line\">\t\t<span class=\"string\">axisLabel :</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"string\">formatter :</span> <span class=\"string\">'&#123;value&#125; '</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; ],</span><br><span class=\"line\">\t<span class=\"string\">series :</span> []</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">myChart.setOption(lineOption);</span><br></pre></td></tr></table></figure>\n<p>4、请求具体的统计数据，并更新echarts中的动态数据。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">queryData</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t$(<span class=\"string\">\"#line\"</span>).show();</span><br><span class=\"line\">\t$(<span class=\"string\">\"#noData\"</span>).hide();</span><br><span class=\"line\">\t\t$.ajax( &#123;</span><br><span class=\"line\">\t\turl : <span class=\"string\">'$&#123;appPath&#125;/btb/sta/fsta0010_getLineImage.st'</span>,</span><br><span class=\"line\">\t\tdata : &#123;&#125;,</span><br><span class=\"line\">\t\tmethod : <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">\t\tdataType : <span class=\"string\">'json'</span>,</span><br><span class=\"line\">\t\tsuccess : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//请求成功时处理</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> data = <span class=\"built_in\">JSON</span>.stringify(data.resultDataMap);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> responseText = <span class=\"built_in\">eval</span>(<span class=\"string\">'('</span> + data + <span class=\"string\">')'</span>);</span><br><span class=\"line\">\t\tlineOption.legend.data = responseText.legend;</span><br><span class=\"line\">\t\tlineOption.xAxis[<span class=\"number\">0</span>].data = responseText.xAxis;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> serieslist = responseText.series;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span>(serieslist.length &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; serieslist.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\tlineOption.series[i] = serieslist[i];</span><br><span class=\"line\">\t\t    &#125;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t$(<span class=\"string\">\"#line\"</span>).hide();</span><br><span class=\"line\">\t        $(<span class=\"string\">\"#noData\"</span>).show();</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmyChart.setOption(lineOption, <span class=\"literal\">true</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcomplete : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//请求完成的处理</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\terror : <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//请求出错处理</span></span><br><span class=\"line\">\t\tcom_div_msg(<span class=\"string\">\"加载失败\"</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//相关页面初始化的处理；</span></span><br><span class=\"line\">    ......</span><br><span class=\"line\">    <span class=\"comment\">//查询统计数据</span></span><br><span class=\"line\">    queryData();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<h1 id=\"后台\"><a href=\"#后台\" class=\"headerlink\" title=\"后台\"></a>后台</h1><p>在对应的统计的action中：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String getLineImage() &#123;</span><br><span class=\"line\">    List&lt;EchartsEntity&gt; echarts = new ArrayList&lt;EchartsEntity&gt;();</span><br><span class=\"line\">    <span class=\"comment\">// 自定义横坐标</span></span><br><span class=\"line\">    String[] xAxis = &#123; <span class=\"string\">\"周一\"</span>, <span class=\"string\">\"周二\"</span>, <span class=\"string\">\"周三\"</span>, <span class=\"string\">\"周四\"</span>, <span class=\"string\">\"周五\"</span>, <span class=\"string\">\"周六\"</span>, <span class=\"string\">\"周日\"</span> &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 自定义各种类型的显示数据</span></span><br><span class=\"line\">    EchartsEntity entity1 = new EchartsEntity(<span class=\"string\">\"邮件营销\"</span>, <span class=\"string\">\"line\"</span>, Arrays</span><br><span class=\"line\">    .asList(<span class=\"number\">120</span>, <span class=\"number\">132</span>, <span class=\"number\">101</span>, <span class=\"number\">134</span>, <span class=\"number\">90</span>, <span class=\"number\">230</span>, <span class=\"number\">210</span>));</span><br><span class=\"line\">    EchartsEntity entity2 = new EchartsEntity(<span class=\"string\">\"联盟广告\"</span>, <span class=\"string\">\"line\"</span>, Arrays</span><br><span class=\"line\">    .asList(<span class=\"number\">220</span>, <span class=\"number\">182</span>, <span class=\"number\">191</span>, <span class=\"number\">234</span>, <span class=\"number\">290</span>, <span class=\"number\">330</span>, <span class=\"number\">310</span>));</span><br><span class=\"line\">    EchartsEntity entity3 = new EchartsEntity(<span class=\"string\">\"视频广告\"</span>, <span class=\"string\">\"line\"</span>, Arrays</span><br><span class=\"line\">    .asList(<span class=\"number\">150</span>, <span class=\"number\">232</span>, <span class=\"number\">201</span>, <span class=\"number\">154</span>, <span class=\"number\">190</span>, <span class=\"number\">330</span>, <span class=\"number\">410</span>));</span><br><span class=\"line\">    echarts.add(entity1);</span><br><span class=\"line\">    echarts.add(entity2);</span><br><span class=\"line\">    echarts.add(entity3);</span><br><span class=\"line\">    String[] legend = &#123; <span class=\"string\">\"邮件营销\"</span>, <span class=\"string\">\"联盟广告\"</span>, <span class=\"string\">\"视频广告\"</span> &#125;;</span><br><span class=\"line\">    resultDataMap = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">    resultDataMap.put(<span class=\"string\">\"xAxis\"</span>, xAxis);</span><br><span class=\"line\">    resultDataMap.put(<span class=\"string\">\"series\"</span>, echarts);</span><br><span class=\"line\">    resultDataMap.put(<span class=\"string\">\"legend\"</span>, legend);</span><br><span class=\"line\">    System.out.println(GsonUtil.getJSONString(resultDataMap));</span><br><span class=\"line\">    return <span class=\"string\">\"json\"</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2、EchartsEntity</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EchartsEntity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> name;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">String</span> type;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> List&lt;?&gt; data;</span><br><span class=\"line\">    <span class=\"comment\">//此处省略get,set方法    </span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h1><p>在对应的strus的配置文件中把后端的resultDataMap 作为json对象返回到页面中：</p>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">package</span> <span class=\"attr\">name</span>=<span class=\"string\">\"btbsta\"</span> <span class=\"attr\">extends</span>=<span class=\"string\">\"base\"</span> <span class=\"attr\">namespace</span>=<span class=\"string\">\"/btb/sta\"</span> <span class=\"attr\">strict-method-invocation</span>=<span class=\"string\">\"false\"</span>&gt;</span>\t <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">name</span>=<span class=\"string\">\"fsta0010_*\"</span> <span class=\"attr\">method</span>=<span class=\"string\">\"</span></span></span><span class=\"template-variable\">&#123;1&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fsta0010Action\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t \t<span class=\"tag\">&lt;<span class=\"name\">result</span> <span class=\"attr\">name</span>=<span class=\"string\">\"json\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"json\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t \t\t<span class=\"tag\">&lt;<span class=\"name\">param</span> <span class=\"attr\">name</span>=<span class=\"string\">\"includeProperties\"</span>&gt;</span>resultDataMap.*<span class=\"tag\">&lt;/<span class=\"name\">param</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">result</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">\t <span class=\"tag\">&lt;/<span class=\"name\">action</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">package</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h1 id=\"示例结果\"><a href=\"#示例结果\" class=\"headerlink\" title=\"示例结果\"></a>示例结果</h1><p><img src=\"/images/plugins/echarts-2.png\" alt=\"avatar\"></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h2><p>在有些情况下，为了和自己的系统的主题相适应，我们需要更改ecahrt默认的主题。</p>\n<h3 id=\"echarts-js自带\"><a href=\"#echarts-js自带\" class=\"headerlink\" title=\"echarts.js自带\"></a>echarts.js自带</h3><p>官方自带的主题有default，dark，light。这三种主题是不需要下载的。使用方法如下：</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'line'</span>), <span class=\"string\">'light'</span>);</span><br></pre></td></tr></table></figure>\n<h3 id=\"官网下载\"><a href=\"#官网下载\" class=\"headerlink\" title=\"官网下载\"></a>官网下载</h3><p>echarts中除了自带的三种样式之外，还提供了其他主题。使用的方法如下：</p>\n<p>1、在官网上下载对应的主题文件的js，例如macarons.js。</p>\n<p>2、在页面中引入js。</p>\n<p>3、在初始化echarts配置的时候，加入主题的名称即可。</p>\n<figure class=\"highlight dart\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myChart = echarts.init(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'line'</span>), <span class=\"string\">'macarons'</span>);</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://echarts.baidu.com/echarts2/doc/example.html\" target=\"_blank\" rel=\"noopener\">echarts2.0版本的使用示例</a></p>\n"},{"title":"使用百度地图实现位置选择","text":"实现位置检索在系统开发中我们经常需要确定一个单位或者是机器的地理位置，如果自己在地图上查找是比较小号时间的，这里可以根据百度地图的本地搜索服务根据关键字对于需要定位位置进行检索。 引入相关资源12&lt;!-- 加载百度地图的api --&gt;&lt;script type=\"text/javascript\" src=\"http://api.map.baidu.com/api?v=2.0&amp;ak=对应的密钥\"&gt;&lt;/script&gt; 初始化地图容器1234567891011121314&lt;div class=\"watchPage\"&gt; &lt;div class=\"col-md-12\"&gt; &lt;h3 align=\"center\"&gt; 地位位置选择页面 &lt;/h3&gt; &lt;/div&gt; 要定位的地址： &lt;input id=\"text_\" type=\"text\" style=\"margin-right: 100px;\" /&gt; &lt;a class=\"btn btn-primary\" onclick=\"searchLocationInfo();\"&gt;查询&lt;/a&gt; &lt;div id=\"container\" style=\"position: absolute; width: 96%; padding: 20px; height: 86%; top: 88; left: 20; border: 1px solid gray; overflow: hidden;\"&gt; &lt;/div&gt;&lt;/div&gt;&lt;/div&gt; 初始化的的图配置1234567891011121314var moid;var poi;var map = new BMap.Map(\"container\");var poi = new BMap.Point(112.560091, 37.879703);map.centerAndZoom(poi, 12);map.enableScrollWheelZoom(); //启用滚轮放大缩小，默认禁用map.enableContinuousZoom(); //启用地图惯性拖拽，默认禁用map.addControl(new BMap.NavigationControl()); //添加默认缩放平移控件map.addControl(new BMap.OverviewMapControl()); //添加默认缩略地图控件map.addControl(new BMap.OverviewMapControl( &#123; isOpen : true, anchor : BMAP_ANCHOR_BOTTOM_RIGHT&#125;)); //右下角，打开 定义本地检索服务1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859local = new BMap.LocalSearch(map, &#123; renderOptions : &#123; map : map, autoViewport : true, selectFirstResult : false &#125;, pageCapacity : 10&#125;);//定义地图上展示的marker标记myIcon = new BMap.Icon(\"http://api.map.baidu.com/img/markers.png\", new BMap.Size(23, 25), &#123; offset : new BMap.Size(10, 25), imageOffset : new BMap.Size(0, 0 - 10 * 25) &#125;);//设置检索服务的返回的Marker标记的处理，并重新定义marker的弹出的infoWindow的内容，提供选择位置的按钮loca.setMarkersSetCallback(function(pois) &#123; for ( var i = 0; i &lt; pois.length; i++) &#123; var markerInfo = pois[i]; var marker = pois[i].marker; var address = markerInfo.address; var lng = markerInfo.point.lng; var lat = markerInfo.point.lat; var contents = \"【\" + markerInfo.title + \"】, &lt;a target='_blank' style='color:blue' href='\" + markerInfo.detailUrl + \"'&gt;详情&lt;/a&gt;&lt;br/&gt;&lt;div style='color:gray;'&gt;地址：\" + address + \"&lt;/div&gt;\" + \"&lt;br/&gt;&lt;a class='btn btn-info btn-block' onclick='chooselocation(\\\"\" + address + \"\\\",\\\"\" + lng + \"\\\",\\\"\" + lat + \"\\\")'&gt;选择&lt;/a&gt;\"; marker.addEventListener(\"click\", function(e) &#123; var infoWindow = new BMap.InfoWindow( \"&lt;p style='font-size:14px;'&gt;\" + contents + \"&lt;/p&gt;\"); this.openInfoWindow(infoWindow); &#125;,false); &#125;&#125;);//设置检索服务的返回值的处理local.setSearchCompleteCallback(function(searchResults) &#123; if (typeof (searchResults) == \"undefined\" || searchResults.Br.length&lt;=0) &#123; com_div_msg(\"百度API没有搜索到该地址,建议手动选择地点进行设置\"); return; &#125; if (searchResults.length &gt; 0) &#123; var searchResult = searchResults[0]; &#125; else &#123; var searchResult = searchResults; &#125; //设置第一个搜索结果为地图中心 var poi = searchResult.getPoi(0); if (poi) &#123; //设置中心点 map.centerAndZoom(poi.point, 13); &#125; &#125;); 设置地图点击事件这里设置地图的点击事件，主要是为了如果百度地图检索不出来对应的地理位置的话，用户可以自己在地图上查找。 1234567map.addEventListener(\"click\", function(event) &#123; if(!event.overlay)&#123; com_div_msg(\"温馨提示：请您自己输入安装位置\"); chooselocation(\"\", event.point.lng, event.point.lat); &#125;&#125;); 这里需要注意的一点是因为地图上添加了点击事件，同时地图上的覆盖物marker也有点击事件，如果在map的点击事件中不进行判断的话，会首先执行map的点击事件，然后再执覆盖物的点击事件，所以在这里进行判断，如果点击事件中的event的overlay为空的话执行具体的逻辑，否则不执行。 查询方法123function searchLocationInfo() &#123; local.search($(\"#text_\").val());&#125; 选择位置12345678var chooselocation = function(address, lng, lat) &#123; if (confirm(\"确定选择这里吗？\")) &#123; $(\"#machineAddress\").val(address); $(\"#machineLongtitude\").val(lng); $(\"#machineLatitude\").val(lat); $(\"#closeMapBtn\").click(); &#125;&#125; 结果展示 常见问题https访问的问题公司一直用的http的方式，当更换成https之后发现，原本在网页内显示的百度地图不见了。 【原因】https影响。 【解决办法】 将原来的http://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥 变成：https://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥&amp;s=1就可以正常显示啦。","content":"<h1 id=\"实现位置检索\"><a href=\"#实现位置检索\" class=\"headerlink\" title=\"实现位置检索\"></a>实现位置检索</h1><p>在系统开发中我们经常需要确定一个单位或者是机器的地理位置，如果自己在地图上查找是比较小号时间的，这里可以根据百度地图的本地搜索服务根据关键字对于需要定位位置进行检索。</p>\n<h2 id=\"引入相关资源\"><a href=\"#引入相关资源\" class=\"headerlink\" title=\"引入相关资源\"></a>引入相关资源</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!--  加载百度地图的api --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://api.map.baidu.com/api?v=2.0&amp;ak=对应的密钥\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化地图容器\"><a href=\"#初始化地图容器\" class=\"headerlink\" title=\"初始化地图容器\"></a>初始化地图容器</h2><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"watchPage\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"col-md-12\"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">h3</span> <span class=\"attr\">align</span>=<span class=\"string\">\"center\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t地位位置选择页面</span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;/<span class=\"name\">h3</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">\t要定位的地址：</span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">\"text_\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"margin-right: 100px;\"</span> /&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">class</span>=<span class=\"string\">\"btn btn-primary\"</span> <span class=\"attr\">onclick</span>=<span class=\"string\">\"searchLocationInfo();\"</span>&gt;</span>查询<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"container\"</span></span></span><br><span class=\"line\"><span class=\"tag\">\t\t<span class=\"attr\">style</span>=<span class=\"string\">\"position: absolute; width: 96%; padding: 20px; height: 86%; top: 88; left: 20; border: 1px solid gray; overflow: hidden;\"</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化的的图配置\"><a href=\"#初始化的的图配置\" class=\"headerlink\" title=\"初始化的的图配置\"></a>初始化的的图配置</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> moid;</span><br><span class=\"line\"><span class=\"keyword\">var</span> poi;</span><br><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> BMap.Map(<span class=\"string\">\"container\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> poi = <span class=\"keyword\">new</span> BMap.Point(<span class=\"number\">112.560091</span>, <span class=\"number\">37.879703</span>);</span><br><span class=\"line\">map.centerAndZoom(poi, <span class=\"number\">12</span>);</span><br><span class=\"line\">map.enableScrollWheelZoom(); <span class=\"comment\">//启用滚轮放大缩小，默认禁用</span></span><br><span class=\"line\">map.enableContinuousZoom(); <span class=\"comment\">//启用地图惯性拖拽，默认禁用</span></span><br><span class=\"line\"></span><br><span class=\"line\">map.addControl(<span class=\"keyword\">new</span> BMap.NavigationControl()); <span class=\"comment\">//添加默认缩放平移控件</span></span><br><span class=\"line\">map.addControl(<span class=\"keyword\">new</span> BMap.OverviewMapControl()); <span class=\"comment\">//添加默认缩略地图控件</span></span><br><span class=\"line\">map.addControl(<span class=\"keyword\">new</span> BMap.OverviewMapControl( &#123;</span><br><span class=\"line\">\tisOpen : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\tanchor : BMAP_ANCHOR_BOTTOM_RIGHT</span><br><span class=\"line\">&#125;)); <span class=\"comment\">//右下角，打开</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义本地检索服务\"><a href=\"#定义本地检索服务\" class=\"headerlink\" title=\"定义本地检索服务\"></a>定义本地检索服务</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">local = <span class=\"keyword\">new</span> BMap.LocalSearch(map, &#123;</span><br><span class=\"line\">\trenderOptions : &#123;</span><br><span class=\"line\">\t\tmap : map,</span><br><span class=\"line\">\t\tautoViewport : <span class=\"literal\">true</span>,</span><br><span class=\"line\">\t\tselectFirstResult : <span class=\"literal\">false</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tpageCapacity : <span class=\"number\">10</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//定义地图上展示的marker标记</span></span><br><span class=\"line\">myIcon = <span class=\"keyword\">new</span> BMap.Icon(<span class=\"string\">\"http://api.map.baidu.com/img/markers.png\"</span>,</span><br><span class=\"line\">\t\t<span class=\"keyword\">new</span> BMap.Size(<span class=\"number\">23</span>, <span class=\"number\">25</span>), &#123;</span><br><span class=\"line\">\t\t\toffset : <span class=\"keyword\">new</span> BMap.Size(<span class=\"number\">10</span>, <span class=\"number\">25</span>),</span><br><span class=\"line\">\t\t\timageOffset : <span class=\"keyword\">new</span> BMap.Size(<span class=\"number\">0</span>, <span class=\"number\">0</span> - <span class=\"number\">10</span> * <span class=\"number\">25</span>)</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"><span class=\"comment\">//设置检索服务的返回的Marker标记的处理，并重新定义marker的弹出的infoWindow的内容，提供选择位置的按钮</span></span><br><span class=\"line\">loca.setMarkersSetCallback(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">pois</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> ( <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; pois.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> markerInfo = pois[i];</span><br><span class=\"line\">        <span class=\"keyword\">var</span> marker = pois[i].marker;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> address = markerInfo.address;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> lng = markerInfo.point.lng;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> lat = markerInfo.point.lat;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> contents = <span class=\"string\">\"【\"</span></span><br><span class=\"line\">        + markerInfo.title</span><br><span class=\"line\">        + <span class=\"string\">\"】, &lt;a target='_blank' style='color:blue' href='\"</span></span><br><span class=\"line\">        + markerInfo.detailUrl</span><br><span class=\"line\">        + <span class=\"string\">\"'&gt;详情&lt;/a&gt;&lt;br/&gt;&lt;div style='color:gray;'&gt;地址：\"</span></span><br><span class=\"line\">        + address</span><br><span class=\"line\">        + <span class=\"string\">\"&lt;/div&gt;\"</span></span><br><span class=\"line\">        + <span class=\"string\">\"&lt;br/&gt;&lt;a class='btn btn-info btn-block' onclick='chooselocation(\\\"\"</span></span><br><span class=\"line\">        + address + <span class=\"string\">\"\\\",\\\"\"</span> + lng + <span class=\"string\">\"\\\",\\\"\"</span> + lat</span><br><span class=\"line\">        + <span class=\"string\">\"\\\")'&gt;选择&lt;/a&gt;\"</span>;</span><br><span class=\"line\">        marker.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> infoWindow = <span class=\"keyword\">new</span> BMap.InfoWindow(</span><br><span class=\"line\">                <span class=\"string\">\"&lt;p style='font-size:14px;'&gt;\"</span> + contents + <span class=\"string\">\"&lt;/p&gt;\"</span>);</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.openInfoWindow(infoWindow);</span><br><span class=\"line\">        &#125;,<span class=\"literal\">false</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">//设置检索服务的返回值的处理</span></span><br><span class=\"line\">local.setSearchCompleteCallback(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">searchResults</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (<span class=\"keyword\">typeof</span> (searchResults) == <span class=\"string\">\"undefined\"</span> || searchResults.Br.length&lt;=<span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\tcom_div_msg(<span class=\"string\">\"百度API没有搜索到该地址,建议手动选择地点进行设置\"</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (searchResults.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> searchResult = searchResults[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> searchResult = searchResults;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">//设置第一个搜索结果为地图中心</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> poi = searchResult.getPoi(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (poi) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//设置中心点  </span></span><br><span class=\"line\">\t\t\tmap.centerAndZoom(poi.point, <span class=\"number\">13</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置地图点击事件\"><a href=\"#设置地图点击事件\" class=\"headerlink\" title=\"设置地图点击事件\"></a>设置地图点击事件</h2><p>这里设置地图的点击事件，主要是为了如果百度地图检索不出来对应的地理位置的话，用户可以自己在地图上查找。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">map.addEventListener(<span class=\"string\">\"click\"</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(!event.overlay)&#123;</span><br><span class=\"line\">\t\tcom_div_msg(<span class=\"string\">\"温馨提示：请您自己输入安装位置\"</span>);</span><br><span class=\"line\">\t\tchooselocation(<span class=\"string\">\"\"</span>, event.point.lng, event.point.lat);</span><br><span class=\"line\">\t    </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>这里需要注意的一点是因为地图上添加了点击事件，同时地图上的覆盖物marker也有点击事件，如果在map的点击事件中不进行判断的话，会首先执行map的点击事件，然后再执覆盖物的点击事件，所以在这里进行判断，如果点击事件中的event的overlay为空的话执行具体的逻辑，否则不执行。</p>\n</blockquote>\n<h2 id=\"查询方法\"><a href=\"#查询方法\" class=\"headerlink\" title=\"查询方法\"></a>查询方法</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">searchLocationInfo</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\tlocal.search($(<span class=\"string\">\"#text_\"</span>).val());</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"选择位置\"><a href=\"#选择位置\" class=\"headerlink\" title=\"选择位置\"></a>选择位置</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> chooselocation = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">address, lng, lat</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (confirm(<span class=\"string\">\"确定选择这里吗？\"</span>)) &#123;</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#machineAddress\"</span>).val(address);</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#machineLongtitude\"</span>).val(lng);</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#machineLatitude\"</span>).val(lat);</span><br><span class=\"line\">\t\t$(<span class=\"string\">\"#closeMapBtn\"</span>).click();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"结果展示\"><a href=\"#结果展示\" class=\"headerlink\" title=\"结果展示\"></a>结果展示</h2><p><img src=\"/images/plugins/baidumap1.png\" alt=\"avatar\"></p>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><h2 id=\"https访问的问题\"><a href=\"#https访问的问题\" class=\"headerlink\" title=\"https访问的问题\"></a>https访问的问题</h2><p>公司一直用的http的方式，当更换成https之后发现，原本在网页内显示的百度地图不见了。</p>\n<p>【原因】https影响。</p>\n<p>【解决办法】</p>\n<p>将原来的<a href=\"https://api.map.baidu.com/api?v=2.0&amp;ak=\" target=\"_blank\" rel=\"noopener\">http://api.map.baidu.com/api?v=2.0&amp;ak=</a>你的秘钥</p>\n<p>变成：<a href=\"https://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥&amp;s=1就可以正常显示啦。\" target=\"_blank\" rel=\"noopener\">https://api.map.baidu.com/api?v=2.0&amp;ak=你的秘钥&amp;s=1就可以正常显示啦。</a></p>\n"},{"title":"","text":"npm常见问题rc-input-number导致install失败###【log】 12npm ERR! Unexpected end of input at 1:10970error shasum\":\"c2ab41165bd3cf22077af7404e4b6a42df6c1b6e\",\"tarball\":\"https:/ ###【解决方案】 换cnpm 进行安装确认你安装了淘宝的cnpm 源没。 以上介绍了“ npm install antd 失败，怀疑是rc-input-number问题”的问题解答。","content":"<h1 id=\"npm常见问题\"><a href=\"#npm常见问题\" class=\"headerlink\" title=\"npm常见问题\"></a>npm常见问题</h1><h2 id=\"rc-input-number导致install失败\"><a href=\"#rc-input-number导致install失败\" class=\"headerlink\" title=\"rc-input-number导致install失败\"></a>rc-input-number导致install失败</h2><p>###【log】</p>\n<figure class=\"highlight subunit\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm ERR! Unexpected end of input at 1:10970</span><br><span class=\"line\"><span class=\"keyword\">error </span>shasum\":\"c2ab41165bd3cf22077af7404e4b6a42df6c1b6e\",\"tarball\":\"https:/</span><br></pre></td></tr></table></figure>\n<p>###【解决方案】</p>\n<p>换cnpm 进行安装确认你安装了淘宝的cnpm 源没。<img src=\"http://image.codes51.com/Article/image/20170911/20170911004346_0781.jpg\" alt=\"img\"></p>\n<p>以上介绍了“ npm install antd 失败，怀疑是rc-input-number问题”的问题解答。</p>\n"},{"title":"Tomcat常见问题","text":"启动冲突 在tomcat中启动应用的时候出现 ，启动时出现32 位和64 位冲突的错误： 1java.lang.UnsatisfiedLinkError: D:\\tomcat\\ydkq-tomcat-client\\bin\\tcnative-1.dll: Can't load AMD 64-bit .dll on a IA 32-bit platform 【原因】原因是因为jdk 的运行环境和tomcat的不一致，一个是32位一个是64位的，改成一致的就可以了 【解决】更换成对应版本的JDK即可。 端口占用tomcat无法正常启动时，出现Socket bind failed 【原因】 端口被占用 【解决】 在任务管理器中关掉 java.exe , javaw.exe 缓存不够问题1[localhost-startStop-1] org.apache.catalina.webresources.Cache.getResource Unable to add the resource at [/WEB-INF/classes/] to the cache because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache 【解决】 建议更改Tomcat的setenv.sh 或 setclasspath.sh，加入： 1JAVA_OPTS='-Xms【初始化内存大小】 -Xmx【可以使用的最大内存】' 在tomcat的conf 文件夹下面找到context.xml，然后加入下面的代码重启即可。 12345&lt;Context&gt; &lt;WatchedResource&gt;WEB-INF/web.xml&lt;/WatchedResource&gt; &lt;WatchedResource&gt;$&#123;catalina.base&#125;/conf/web.xml&lt;/WatchedResource&gt; &lt;Resources cachingAllowed=\"true\" cacheMaxSize=\"100000\" /&gt;&lt;/Context&gt; #请求头信息的大小不足 当程序中request的header信息过长时，会出现如下错误： 【原因】tomcat访问的请求头的信息的太大，超过tomcat默认配置 【解决办法】： 在tomcat 的conf的server.xml文件中的如下位置加入：maxHttpHeaderSize=&quot;65536&quot; maxPostSize=&quot;4194304&quot; ，即可。 123&lt;Connector port=\"80\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" maxHttpHeaderSize=\"65536\" maxPostSize=\"4194304\" URIEncoding=\"UTF-8\"/&gt;//说明：此选项用于配置：来自于客户端请求的Request和Response的HTTP header的最大长度，以字节计算。如果不设置，该属性为4096（4K）。 web应用编译异常在以Tomcat作为Web容器，启动java Web工程时，遇到下面问题： 123456org.eclipse.jdt.internal.compiler.classfmt.ClassFormatException at org.eclipse.jdt.internal.compiler.classfmt.ClassFileReader.&lt;init&gt;(ClassFileReader.java:372) at org.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:210) at org.apache.jasper.compiler.JDTCompiler$1.findType(JDTCompiler.java:165) at org.eclipse.jdt.internal.compiler.lookup.LookupEnvironment.askForType(LookupEnvironment.java:109) at org.eclipse.jdt.internal.compiler.lookup.UnresolvedReferenceBinding.resolve(Unreso 【原因】 ​ 系统默认 jdk版本的影响，更换成tomcat中class 文件编译的jdk版本即可。 【解决】 1、JSP文件，受生产环境影响，不同的生产环境会产出不同的结果；2、部署在Windows、Linux端的工程里的JSP文件，受bin文件和lib文影响；3、bin文件，存放各种不同平台开启与关闭Tomcat的脚本文件；一般的Tomcat版本里的bin文件，都包含Windows、Linux平台开启与关闭的脚本文件；部署在Windows、Linux端的Tomcat可用一个同一个版本；4、存Tomcat与web应用的Jar包，JSP文件依赖于servlet.jar和jsp-api.jar；不同的Tomcat版本，如：（Apache-Tomcat 7.0.23和Apache-Tomcat 7.0.33），都会造成影响；部署在Windows、Linux端的Tomcat可用一个同一个版本； 注：同一大版本号，不同小版本号的JDK和Tomcat均会造成Windows和Linux的差异；最佳方案是JDK和Tomcat最初就保持相同的小版本号； 参考文章 Tomcat优化配置链接","content":"<h1 id=\"启动冲突\"><a href=\"#启动冲突\" class=\"headerlink\" title=\"启动冲突\"></a>启动冲突</h1><p> 在tomcat中启动应用的时候出现 ，启动时出现32 位和64 位冲突的错误：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java<span class=\"selector-class\">.lang</span><span class=\"selector-class\">.UnsatisfiedLinkError</span>: D:\\tomcat\\ydkq-tomcat-client\\bin\\tcnative-<span class=\"number\">1</span><span class=\"selector-class\">.dll</span>: Can<span class=\"string\">'t load AMD 64-bit .dll on a IA 32-bit platform</span></span><br></pre></td></tr></table></figure>\n<p>【原因】原因是因为jdk 的运行环境和tomcat的不一致，一个是32位一个是64位的，改成一致的就可以了 </p>\n<p> 【解决】更换成对应版本的JDK即可。</p>\n<h1 id=\"端口占用\"><a href=\"#端口占用\" class=\"headerlink\" title=\"端口占用\"></a>端口占用</h1><p>tomcat无法正常启动时，出现<code>Socket  bind  failed</code></p>\n<p>【原因】 端口被占用</p>\n<p>【解决】  在任务管理器中关掉 java.exe , javaw.exe</p>\n<h1 id=\"缓存不够问题\"><a href=\"#缓存不够问题\" class=\"headerlink\" title=\"缓存不够问题\"></a>缓存不够问题</h1><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[localhost-startStop-1] org.apache.catalina.webresources.Cache.getResource Unable <span class=\"keyword\">to</span> <span class=\"builtin-name\">add</span> the<span class=\"built_in\"> resource </span>at [/WEB-INF/classes/] <span class=\"keyword\">to</span> the cache because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache</span><br></pre></td></tr></table></figure>\n<p>【解决】</p>\n<ol>\n<li><p>建议更改Tomcat的setenv.sh 或 setclasspath.sh，加入：</p>\n<figure class=\"highlight ini\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">JAVA_OPTS</span>=<span class=\"string\">'-Xms【初始化内存大小】 -Xmx【可以使用的最大内存】'</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在tomcat的conf 文件夹下面找到context.xml，然后加入下面的代码重启即可。</p>\n</li>\n</ol>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Context</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">WatchedResource</span>&gt;</span>WEB-INF/web.xml<span class=\"tag\">&lt;/<span class=\"name\">WatchedResource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">WatchedResource</span>&gt;</span>$</span><span class=\"template-variable\">&#123;catalina.base&#125;</span><span class=\"xml\">/conf/web.xml<span class=\"tag\">&lt;/<span class=\"name\">WatchedResource</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">Resources</span> <span class=\"attr\">cachingAllowed</span>=<span class=\"string\">\"true\"</span> <span class=\"attr\">cacheMaxSize</span>=<span class=\"string\">\"100000\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">Context</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>#请求头信息的大小不足</p>\n<p>当程序中request的header信息过长时，会出现如下错误： </p>\n<p><img src=\"/images/tomcat/problem1.jpg\" alt=\"img\"></p>\n<p> 【原因】tomcat访问的请求头的信息的太大，超过tomcat默认配置</p>\n<p>【解决办法】：</p>\n<p>在tomcat 的conf的server.xml文件中的如下位置加入：<code>maxHttpHeaderSize=&quot;65536&quot; maxPostSize=&quot;4194304&quot;</code> ，即可。</p>\n<figure class=\"highlight 1c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector port=<span class=\"string\">\"80\"</span> protocol=<span class=\"string\">\"HTTP/1.1\"</span> connectionTimeout=<span class=\"string\">\"20000\"</span></span><br><span class=\"line\">  redirectPort=<span class=\"string\">\"8443\"</span> maxHttpHeaderSize=<span class=\"string\">\"65536\"</span> maxPostSize=<span class=\"string\">\"4194304\"</span> URIEncoding=<span class=\"string\">\"UTF-8\"</span>/&gt;</span><br><span class=\"line\"><span class=\"comment\">//说明：此选项用于配置：来自于客户端请求的Request和Response的HTTP header的最大长度，以字节计算。如果不设置，该属性为4096（4K）。</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"web应用编译异常\"><a href=\"#web应用编译异常\" class=\"headerlink\" title=\"web应用编译异常\"></a>web应用编译异常</h1><p>在以Tomcat作为Web容器，启动java Web工程时，遇到下面问题：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org<span class=\"selector-class\">.eclipse</span><span class=\"selector-class\">.jdt</span><span class=\"selector-class\">.internal</span><span class=\"selector-class\">.compiler</span><span class=\"selector-class\">.classfmt</span><span class=\"selector-class\">.ClassFormatException</span></span><br><span class=\"line\">    at org<span class=\"selector-class\">.eclipse</span><span class=\"selector-class\">.jdt</span><span class=\"selector-class\">.internal</span><span class=\"selector-class\">.compiler</span><span class=\"selector-class\">.classfmt</span><span class=\"selector-class\">.ClassFileReader</span>.&lt;init&gt;(ClassFileReader<span class=\"selector-class\">.java</span>:<span class=\"number\">372</span>)</span><br><span class=\"line\">    at org<span class=\"selector-class\">.apache</span><span class=\"selector-class\">.jasper</span><span class=\"selector-class\">.compiler</span><span class=\"selector-class\">.JDTCompiler</span>$<span class=\"number\">1</span>.findType(JDTCompiler<span class=\"selector-class\">.java</span>:<span class=\"number\">210</span>)</span><br><span class=\"line\">    at org<span class=\"selector-class\">.apache</span><span class=\"selector-class\">.jasper</span><span class=\"selector-class\">.compiler</span><span class=\"selector-class\">.JDTCompiler</span>$<span class=\"number\">1</span>.findType(JDTCompiler<span class=\"selector-class\">.java</span>:<span class=\"number\">165</span>)</span><br><span class=\"line\">    at org<span class=\"selector-class\">.eclipse</span><span class=\"selector-class\">.jdt</span><span class=\"selector-class\">.internal</span><span class=\"selector-class\">.compiler</span><span class=\"selector-class\">.lookup</span><span class=\"selector-class\">.LookupEnvironment</span><span class=\"selector-class\">.askForType</span>(LookupEnvironment<span class=\"selector-class\">.java</span>:<span class=\"number\">109</span>)</span><br><span class=\"line\">    at org<span class=\"selector-class\">.eclipse</span><span class=\"selector-class\">.jdt</span><span class=\"selector-class\">.internal</span><span class=\"selector-class\">.compiler</span><span class=\"selector-class\">.lookup</span><span class=\"selector-class\">.UnresolvedReferenceBinding</span><span class=\"selector-class\">.resolve</span>(Unreso</span><br></pre></td></tr></table></figure>\n<p>【原因】 </p>\n<p>​     系统默认 jdk版本的影响，更换成tomcat中class 文件编译的jdk版本即可。</p>\n<p>【解决】</p>\n<p>1、JSP文件，受生产环境影响，不同的生产环境会产出不同的结果；<br>2、部署在Windows、Linux端的工程里的JSP文件，受bin文件和lib文影响；<br>3、bin文件，存放各种不同平台开启与关闭Tomcat的脚本文件；一般的Tomcat版本里的bin文件，都包含Windows、Linux平台开启与关闭的脚本文件；部署在Windows、Linux端的Tomcat可用一个同一个版本；<br>4、存Tomcat与web应用的Jar包，JSP文件依赖于servlet.jar和jsp-api.jar；不同的Tomcat版本，如：（Apache-Tomcat 7.0.23和Apache-Tomcat 7.0.33），都会造成影响；部署在Windows、Linux端的Tomcat可用一个同一个版本；</p>\n<p><strong>注：同一大版本号，不同小版本号的JDK和Tomcat均会造成Windows和Linux的差异；最佳方案是JDK和Tomcat最初就保持相同的小版本号；</strong></p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"http://blog.csdn.net/wubai250/article/details/8593525\" target=\"_blank\" rel=\"noopener\">Tomcat优化配置链接</a></li>\n</ul>\n"},{"title":"","text":"Spring Boot学习单元测试模拟http请求MockServletContext web参数校验123456789101112131415@GetMapping(\"/savePerson\") public String savePerson(@Valid Person person, BindingResult result)&#123; String message = \"\"; if(result.hasErrors())&#123; //list中需要指定具体的泛型，否则会编译保存，期望为Object类型但实际为ObjectError List&lt;ObjectError&gt; allErrors = result.getAllErrors(); for(ObjectError error : allErrors)&#123; message += error.getDefaultMessage()+\"\\n\"; &#125; &#125; if(message==\"\")&#123; message = \"保存成功\"; &#125; return message; &#125; 1、xss威胁 过滤器12345678910111213@Componentpublic class MyFilterConfiguration &#123; public FilterRegistrationBean myFilterREgisteration()&#123; FilterRegistrationBean registration = new FilterRegistrationBean(); registration.setFilter(new MyFilter());//添加过滤器 ArrayList&lt;String&gt; strings = new ArrayList&lt;String&gt;(); strings.add(\"/*\"); //这里必须为string类型的集合 registration.setUrlPatterns(strings);//设置过滤的路劲，/*为所有 return registration; &#125;&#125; 遇到的错误Data truncated for column修改了表的数据类型或者是长度，与表中原有的数据产生冲突，从而引发了错误。 【解决】删除表即可。 统一异常处理们在做Web应用的时候，请求处理过程中发生错误是非常常见的情况。Spring Boot提供了一个默认的映射：/error，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。 当访问一个不存在的URL，或是修改处理内容，直接抛出异常，如： 1234@RequestMapping(\"/hello\")public String hello() throws Exception &#123; throw new Exception(\"发生错误\");&#125; 此时，可以看到类似下面的报错页面，该页面就是Spring Boot提供的默认error映射页面。 alt=默认的错误页面 统一异常处理虽然，Spring Boot中实现了默认的error映射，但是在实际应用中，上面你的错误页面对用户来说并不够友好，我们通常需要去实现我们自己的异常提示。 下面我们以之前的Web应用例子为基础（Chapter3-1-2），进行统一异常处理的改造。 创建全局异常处理类：通过使用@ControllerAdvice定义统一的异常处理类，而不是在每个Controller中逐个定义。@ExceptionHandler用来定义函数针对的异常类型，最后将Exception对象和请求URL映射到error.html中 123456789101112131415@ControllerAdviceclass GlobalExceptionHandler &#123; public static final String DEFAULT_ERROR_VIEW = \"error\"; @ExceptionHandler(value = Exception.class) public ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) throws Exception &#123; ModelAndView mav = new ModelAndView(); mav.addObject(\"exception\", e); mav.addObject(\"url\", req.getRequestURL()); mav.setViewName(DEFAULT_ERROR_VIEW); return mav; &#125;&#125; 实现error.html页面展示：在templates目录下创建error.html，将请求的URL和Exception对象的message输出。 123456789101112&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head lang=\"en\"&gt; &lt;meta charset=\"UTF-8\" /&gt; &lt;title&gt;统一异常处理&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;h1&gt;Error Handler&lt;/h1&gt; &lt;div th:text=\"$&#123;url&#125;\"&gt;&lt;/div&gt; &lt;div th:text=\"$&#123;exception.message&#125;\"&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 启动该应用，访问：http://localhost:8080/hello，可以看到如下错误提示页面。 alt=自定义的错误页面 通过实现上述内容之后，我们只需要在Controller中抛出Exception，当然我们可能会有多种不同的Exception。然后在@ControllerAdvice类中，根据抛出的具体Exception类型匹配@ExceptionHandler中配置的异常类型来匹配错误映射和处理。 返回JSON格式在上述例子中，通过@ControllerAdvice统一定义不同Exception映射到不同错误处理页面。而当我们要实现RESTful API时，返回的错误是JSON格式的数据，而不是HTML页面，这时候我们也能轻松支持。 本质上，只需在@ExceptionHandler之后加入@ResponseBody，就能让处理函数return的内容转换为JSON格式。 下面以一个具体示例来实现返回JSON格式的异常处理。 创建统一的JSON返回对象，code：消息类型，message：消息内容，url：请求的url，data：请求返回的数据 12345678910111213public class ErrorInfo&lt;T&gt; &#123; public static final Integer OK = 0; public static final Integer ERROR = 100; private Integer code; private String message; private String url; private T data; // 省略getter和setter&#125; 创建一个自定义异常，用来实验捕获该异常，并返回json 1234567public class MyException extends Exception &#123; public MyException(String message) &#123; super(message); &#125; &#125; Controller中增加json映射，抛出MyException异常 123456789@Controllerpublic class HelloController &#123; @RequestMapping(\"/json\") public String json() throws MyException &#123; throw new MyException(\"发生错误2\"); &#125;&#125; 为MyException异常创建对应的处理 123456789101112131415@ControllerAdvicepublic class GlobalExceptionHandler &#123; @ExceptionHandler(value = MyException.class) @ResponseBody public ErrorInfo&lt;String&gt; jsonErrorHandler(HttpServletRequest req, MyException e) throws Exception &#123; ErrorInfo&lt;String&gt; r = new ErrorInfo&lt;&gt;(); r.setMessage(e.getMessage()); r.setCode(ErrorInfo.ERROR); r.setData(\"Some Data\"); r.setUrl(req.getRequestURL().toString()); return r; &#125;&#125; 启动应用，访问：http://localhost:8080/json，可以得到如下返回内容： 123456&#123; code: 100， data: \"Some Data\"， message: \"发生错误2\"， url: \"http://localhost:8080/json\"&#125; 至此，已完成在Spring Boot中创建统一的异常处理，实际实现还是依靠Spring MVC的注解，更多更深入的使用可参考Spring MVC的文档。 常见错误模板配置错误1org.springframework.expression.spel.SpelEvaluationException: EL1008E: Property or field 'timestamp' cannot be found on object of type 'java.util.HashMap' - maybe not public? 原因是返回的模板页面 没有找到，所以会使用默认的默认页面，而在这个模板页面中是需要返回一个timestamp的。","content":"<h1 id=\"Spring-Boot学习\"><a href=\"#Spring-Boot学习\" class=\"headerlink\" title=\"Spring Boot学习\"></a>Spring Boot学习</h1><h2 id=\"单元测试\"><a href=\"#单元测试\" class=\"headerlink\" title=\"单元测试\"></a>单元测试</h2><h3 id=\"模拟http请求\"><a href=\"#模拟http请求\" class=\"headerlink\" title=\"模拟http请求\"></a>模拟http请求</h3><p><a href=\"https://docs.spring.io/spring-security/site/docs/current/reference/html/test-mockmvc.html\" target=\"_blank\" rel=\"noopener\">MockServletContext</a></p>\n<h2 id=\"web\"><a href=\"#web\" class=\"headerlink\" title=\"web\"></a>web</h2><h3 id=\"参数校验\"><a href=\"#参数校验\" class=\"headerlink\" title=\"参数校验\"></a>参数校验</h3><figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@GetMapping</span>(<span class=\"string\">\"/savePerson\"</span>)</span><br><span class=\"line\">   <span class=\"keyword\">public</span> <span class=\"function\">String <span class=\"title\">savePerson</span><span class=\"params\">(@Valid Person person, BindingResult result)</span></span>&#123;</span><br><span class=\"line\">       String message = <span class=\"string\">\"\"</span>;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(result.hasErrors())&#123;</span><br><span class=\"line\">           <span class=\"comment\">//list中需要指定具体的泛型，否则会编译保存，期望为Object类型但实际为ObjectError</span></span><br><span class=\"line\">           List&lt;ObjectError&gt; allErrors  = result.getAllErrors();</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(ObjectError <span class=\"keyword\">error</span> : allErrors)&#123;</span><br><span class=\"line\">               message += <span class=\"keyword\">error</span>.getDefaultMessage()+<span class=\"string\">\"\\n\"</span>;</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">if</span>(message==<span class=\"string\">\"\"</span>)&#123;</span><br><span class=\"line\">           message = <span class=\"string\">\"保存成功\"</span>;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> message;</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>1、<a href=\"https://www.xncoding.com/2016/07/24/web/xss.html\" target=\"_blank\" rel=\"noopener\">xss威胁</a></p>\n<h3 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h3><figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyFilterConfiguration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> FilterRegistrationBean myFilterREgisteration()&#123;</span><br><span class=\"line\">        FilterRegistrationBean registration = <span class=\"keyword\">new</span> <span class=\"type\">FilterRegistrationBean</span>();</span><br><span class=\"line\">        registration.setFilter(<span class=\"keyword\">new</span> <span class=\"type\">MyFilter</span>());<span class=\"comment\">//添加过滤器</span></span><br><span class=\"line\">        ArrayList&lt;<span class=\"keyword\">String</span>&gt; strings = <span class=\"keyword\">new</span> <span class=\"type\">ArrayList</span>&lt;<span class=\"keyword\">String</span>&gt;();</span><br><span class=\"line\">        strings.add(<span class=\"string\">\"/*\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">//这里必须为string类型的集合</span></span><br><span class=\"line\">        registration.setUrlPatterns(strings);<span class=\"comment\">//设置过滤的路劲，/*为所有</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> registration;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"遇到的错误\"><a href=\"#遇到的错误\" class=\"headerlink\" title=\"遇到的错误\"></a>遇到的错误</h2><h3 id=\"Data-truncated-for-column\"><a href=\"#Data-truncated-for-column\" class=\"headerlink\" title=\"Data truncated for column\"></a>Data truncated for column</h3><p>修改了表的数据类型或者是长度，与表中原有的数据产生冲突，从而引发了错误。</p>\n<p>【解决】删除表即可。</p>\n<h2 id=\"统一异常处理\"><a href=\"#统一异常处理\" class=\"headerlink\" title=\"统一异常处理\"></a>统一异常处理</h2><p>们在做Web应用的时候，请求处理过程中发生错误是非常常见的情况。Spring Boot提供了一个默认的映射：<code>/error</code>，当处理中抛出异常之后，会转到该请求中处理，并且该请求有一个全局的错误页面用来展示异常内容。</p>\n<p>当访问一个不存在的URL，或是修改处理内容，直接抛出异常，如：</p>\n<figure class=\"highlight aspectj\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/hello\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"function\">String <span class=\"title\">hello</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Exception(<span class=\"string\">\"发生错误\"</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>此时，可以看到类似下面的报错页面，该页面就是Spring Boot提供的默认error映射页面。</p>\n<p><a href=\"http://blog.didispace.com/content/images/2016/04/241FA8A7-2493-44B9-A0A3-79849656074A.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://blog.didispace.com/content/images/2016/04/241FA8A7-2493-44B9-A0A3-79849656074A.png\" alt=\"alt=默认的错误页面\"></a>alt=默认的错误页面</p>\n<h2 id=\"统一异常处理-1\"><a href=\"#统一异常处理-1\" class=\"headerlink\" title=\"统一异常处理\"></a>统一异常处理</h2><p>虽然，Spring Boot中实现了默认的error映射，但是在实际应用中，上面你的错误页面对用户来说并不够友好，我们通常需要去实现我们自己的异常提示。</p>\n<p>下面我们以之前的Web应用例子为基础（<a href=\"http://git.oschina.net/didispace/SpringBoot-Learning/tree/master/Chapter3-1-2\" target=\"_blank\" rel=\"noopener\">Chapter3-1-2</a>），进行统一异常处理的改造。</p>\n<ul>\n<li>创建全局异常处理类：通过使用<code>@ControllerAdvice</code>定义统一的异常处理类，而不是在每个Controller中逐个定义。<code>@ExceptionHandler</code>用来定义函数针对的异常类型，最后将Exception对象和请求URL映射到<code>error.html</code>中</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalExceptionHandler</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String DEFAULT_ERROR_VIEW = <span class=\"string\">\"error\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = Exception.<span class=\"keyword\">class</span>)</span><br><span class=\"line\">    <span class=\"keyword\">public</span> ModelAndView defaultErrorHandler(HttpServletRequest req, Exception e) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ModelAndView mav = <span class=\"keyword\">new</span> ModelAndView();</span><br><span class=\"line\">        mav.addObject(<span class=\"string\">\"exception\"</span>, e);</span><br><span class=\"line\">        mav.addObject(<span class=\"string\">\"url\"</span>, req.getRequestURL());</span><br><span class=\"line\">        mav.setViewName(DEFAULT_ERROR_VIEW);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mav;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>实现<code>error.html</code>页面展示：在<code>templates</code>目录下创建<code>error.html</code>，将请求的URL和Exception对象的message输出。</li>\n</ul>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"meta\">&lt;!DOCTYPE html&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">head</span> <span class=\"attr\">lang</span>=<span class=\"string\">\"en\"</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span> /&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>统一异常处理<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Error Handler<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$</span></span></span><span class=\"template-variable\">&#123;url&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">th:text</span>=<span class=\"string\">\"$</span></span></span><span class=\"template-variable\">&#123;exception.message&#125;</span><span class=\"xml\"><span class=\"tag\"><span class=\"string\">\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<p>启动该应用，访问：<code>http://localhost:8080/hello</code>，可以看到如下错误提示页面。</p>\n<p><a href=\"http://blog.didispace.com/content/images/2016/05/8C9EACEE-9F7C-42F3-85D1-B5CAD746FA86.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://blog.didispace.com/content/images/2016/05/8C9EACEE-9F7C-42F3-85D1-B5CAD746FA86.png\" alt=\"alt=自定义的错误页面\"></a>alt=自定义的错误页面</p>\n<p><em>通过实现上述内容之后，我们只需要在Controller中抛出Exception，当然我们可能会有多种不同的Exception。然后在@ControllerAdvice类中，根据抛出的具体Exception类型匹配@ExceptionHandler中配置的异常类型来匹配错误映射和处理。</em></p>\n<h2 id=\"返回JSON格式\"><a href=\"#返回JSON格式\" class=\"headerlink\" title=\"返回JSON格式\"></a>返回JSON格式</h2><p>在上述例子中，通过<code>@ControllerAdvice</code>统一定义不同Exception映射到不同错误处理页面。而当我们要实现RESTful API时，返回的错误是JSON格式的数据，而不是HTML页面，这时候我们也能轻松支持。</p>\n<p>本质上，只需在<code>@ExceptionHandler</code>之后加入<code>@ResponseBody</code>，就能让处理函数return的内容转换为JSON格式。</p>\n<p>下面以一个具体示例来实现返回JSON格式的异常处理。</p>\n<ul>\n<li>创建统一的JSON返回对象，code：消息类型，message：消息内容，url：请求的url，data：请求返回的数据</li>\n</ul>\n<figure class=\"highlight actionscript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorInfo</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer OK = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Integer ERROR = <span class=\"number\">100</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Integer code;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String message;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String url;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> T data;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 省略getter和setter</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建一个自定义异常，用来实验捕获该异常，并返回json</li>\n</ul>\n<figure class=\"highlight scala\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyException</span> <span class=\"keyword\">extends</span> <span class=\"title\">Exception</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"type\">MyException</span>(<span class=\"type\">String</span> message) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>Controller</code>中增加json映射，抛出<code>MyException</code>异常</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Controller</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloController</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping</span>(<span class=\"string\">\"/json\"</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">json</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> MyException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> MyException(<span class=\"string\">\"发生错误2\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>为<code>MyException</code>异常创建对应的处理</li>\n</ul>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ControllerAdvice</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">GlobalExceptionHandler</span> &#123;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@ExceptionHandler</span>(value = MyException.<span class=\"keyword\">class</span>)</span><br><span class=\"line\">    <span class=\"meta\">@ResponseBody</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> ErrorInfo&lt;String&gt; jsonErrorHandler(HttpServletRequest req, MyException e) <span class=\"keyword\">throws</span> Exception &#123;</span><br><span class=\"line\">        ErrorInfo&lt;String&gt; r = <span class=\"keyword\">new</span> ErrorInfo&lt;&gt;();</span><br><span class=\"line\">        r.setMessage(e.getMessage());</span><br><span class=\"line\">        r.setCode(ErrorInfo.ERROR);</span><br><span class=\"line\">        r.setData(<span class=\"string\">\"Some Data\"</span>);</span><br><span class=\"line\">        r.setUrl(req.getRequestURL().toString());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动应用，访问：<a href=\"http://localhost:8080/json%EF%BC%8C%E5%8F%AF%E4%BB%A5%E5%BE%97%E5%88%B0%E5%A6%82%E4%B8%8B%E8%BF%94%E5%9B%9E%E5%86%85%E5%AE%B9%EF%BC%9A\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/json，可以得到如下返回内容：</a></li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attribute\">code</span>: <span class=\"number\">100</span>，</span><br><span class=\"line\">    data: <span class=\"string\">\"Some Data\"</span>，</span><br><span class=\"line\">    message: <span class=\"string\">\"发生错误2\"</span>，</span><br><span class=\"line\">    url: <span class=\"string\">\"http://localhost:8080/json\"</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>至此，已完成在Spring Boot中创建统一的异常处理，实际实现还是依靠Spring MVC的注解，更多更深入的使用可参考Spring MVC的文档。</p>\n<h2 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h2><h3 id=\"模板配置错误\"><a href=\"#模板配置错误\" class=\"headerlink\" title=\"模板配置错误\"></a>模板配置错误</h3><figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">org.springframework.expression.spel.SpelEvaluationException: EL1008E: <span class=\"keyword\">Property</span> <span class=\"keyword\">or</span> field <span class=\"string\">'timestamp'</span> cannot be found <span class=\"keyword\">on</span> <span class=\"keyword\">object</span> <span class=\"keyword\">of</span> <span class=\"keyword\">type</span> <span class=\"string\">'java.util.HashMap'</span> - maybe <span class=\"keyword\">not</span> <span class=\"keyword\">public</span>?</span><br></pre></td></tr></table></figure>\n<p>原因是返回的模板页面 没有找到，所以会使用默认的默认页面，而在这个模板页面中是需要返回一个timestamp的。</p>\n"},{"title":"","text":"SpringBoot ——属性配置文件 在SpringBoot中，在pom.xml中引入模块化的Starter POMs。其中各个模块都有自己的默认配置，所以如果不是特殊应用场景，就只需要在application.properties中完成一些属性配置就能开启各模块的应用。 application.porterties文件自定义属性基本使用在Springboot中，我们可能也需要定义一些自己的使用属性。可以在application.properties中使用如下方式 12com.cheryl.name = Cherylcom.cheryl.password = 123456 然后再实体类中，使用@ConfigurationProperties(prefix = “com.cheryl”)把当前前前缀下面的注解引入进来。 1234567@Component@ConfigurationProperties(prefix = \"com.cheryl\")public class BlogProperties &#123; private String name; private String password; //此处省略get,set方法 &#125; 然后再控制器中使用 @Autowired把实体类注入到容器中，然后启动程序在浏览器中访问对应的路径即可。 123456789101112@RestController@RequestMapping(\"/blogPropertiesController\")public class BlogPropertiesController &#123; @Autowired private BlogProperties blogProperties; @GetMapping(\"/info\") public String blogInfo()&#123; return blogProperties.toString(); &#125;&#125; 参数间的引用在application.properties中的各个参数之间也可以直接引用来使用。使用‘${xxx}’的方式来引用定义过自定义属性，如下所示： 12com.cheryl.title = \"springboot技术实战\"com.cheryl.desc = $&#123;com.cheryl.name&#125;正在学习《$&#123;com.cheryl.title&#125;》 最后该值为Cheryl正在学习《springboot技术实战》 生成随机数在有一些情况中，我们希望一些属性使用随机值而不是一个固定的值，比如密钥等。Spring Boot的属性配置文件中可以通过${random}来产生int值、long值或者string字符串，来支持属性的随机值。 12345678910# 随机字符串（32位的随机字符串）com.cheryl.value=$&#123;random.value&#125;# 随机intcom.cheryl.number=$&#123;random.int&#125;# 随机longcom.cheryl.bignumber=$&#123;random.long&#125;# 10以内的随机数com.cheryl.test1=$&#123;random.int(10)&#125;# 10-20的随机数com.cheryl.test2=$&#123;random.int[10,20]&#125; 多环境配置我们在开发Spring Boot应用时，通常会被应用和安装到几个不同的环境，比如：开发、测试、生产等。其中每个环境的数据库地址、服务器端口等等配置都会不同，如果在为不同环境打包时都要修改配置文件的话，比较繁琐，而且容易出错。 一般来说多环境的配置使用各种项目构建工具或是框架的基本思路是一致的，通过配置多份不同环境的配置文件，再通过打包命令指定需要打包的内容之后进行区分打包，Spring Boot也不例外。 在Spring Boot中多环境配置文件名需要满足application-{profile}.properties的格式，其中{profile}对应你的环境标识，比如： application-dev.properties：开发环境 application-test.properties：测试环境 application-prod.properties：生产环境 至于哪个具体的配置文件会被加载，需要在application.properties文件中通过spring.profiles.active属性来设置，其值对应{profile}值。 如：spring.profiles.active=test就会加载application-test.properties配置文件内容 下面，以不同环境配置不同的服务端口为例，进行样例实验。 针对各环境新建不同的配置文件application-dev.properties、application-test.properties、application-prod.properties 在这三个文件均都设置不同的server.port属性，如：dev环境设置为82，test环境设置为83，prod环境设置为80 application.properties中设置spring.profiles.active=dev，就是说默认以dev环境设置 测试不同配置的加载 执行java -jar xxx.jar，可以观察到服务端口被设置为1111，也就是默认的开发环境（dev） 执行java -jar xxx.jar --spring.profiles.active=test，可以观察到服务端口被设置为2222，也就是测试环境的配置（test） 执行java -jar xxx.jar --spring.profiles.active=prod，可以观察到服务端口被设置为3333，也就是生产环境的配置（prod） 按照上面的实验，可以如下总结多环境的配置思路： application.properties中配置通用内容，并设置spring.profiles.active=dev，以开发环境为默认配置 application-{profile}.properties中配置各个环境不同的内容 通过命令行方式去激活不同环境的配置","content":"<h1 id=\"SpringBoot-——属性配置文件\"><a href=\"#SpringBoot-——属性配置文件\" class=\"headerlink\" title=\"SpringBoot ——属性配置文件\"></a>SpringBoot ——属性配置文件</h1><blockquote>\n<p>在SpringBoot中，在<code>pom.xml</code>中引入模块化的<code>Starter POMs</code>。其中各个模块都有自己的默认配置，所以如果不是特殊应用场景，就只需要在<code>application.properties</code>中完成一些属性配置就能开启各模块的应用。</p>\n</blockquote>\n<h2 id=\"application-porterties文件\"><a href=\"#application-porterties文件\" class=\"headerlink\" title=\"application.porterties文件\"></a>application.porterties文件</h2><h3 id=\"自定义属性\"><a href=\"#自定义属性\" class=\"headerlink\" title=\"自定义属性\"></a>自定义属性</h3><h4 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h4><p>在Springboot中，我们可能也需要定义一些自己的使用属性。可以在application.properties中使用如下方式</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com<span class=\"selector-class\">.cheryl</span><span class=\"selector-class\">.name</span> = Cheryl</span><br><span class=\"line\">com<span class=\"selector-class\">.cheryl</span><span class=\"selector-class\">.password</span> = <span class=\"number\">123456</span></span><br></pre></td></tr></table></figure>\n<p>然后再实体类中，使用@ConfigurationProperties(prefix = “com.cheryl”)把当前前前缀下面的注解引入进来。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Component</span></span><br><span class=\"line\"><span class=\"variable\">@ConfigurationProperties</span>(prefix = <span class=\"string\">\"com.cheryl\"</span>)</span><br><span class=\"line\">public class BlogProperties &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">private</span> <span class=\"selector-tag\">String</span> <span class=\"selector-tag\">name</span>;</span><br><span class=\"line\">    <span class=\"selector-tag\">private</span> <span class=\"selector-tag\">String</span> <span class=\"selector-tag\">password</span>;</span><br><span class=\"line\">    <span class=\"comment\">//此处省略get,set方法</span></span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>然后再控制器中使用 @Autowired把实体类注入到容器中，然后启动程序在浏览器中访问对应的路径即可。</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@RestController</span></span><br><span class=\"line\"><span class=\"variable\">@RequestMapping</span>(<span class=\"string\">\"/blogPropertiesController\"</span>)</span><br><span class=\"line\">public class BlogPropertiesController &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@Autowired</span></span><br><span class=\"line\">    private BlogProperties blogProperties;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"variable\">@GetMapping</span>(<span class=\"string\">\"/info\"</span>)</span><br><span class=\"line\">    public String blogInfo()&#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">return</span> <span class=\"selector-tag\">blogProperties</span><span class=\"selector-class\">.toString</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"参数间的引用\"><a href=\"#参数间的引用\" class=\"headerlink\" title=\"参数间的引用\"></a>参数间的引用</h4><p>在<code>application.properties</code>中的各个参数之间也可以直接引用来使用。使用‘${xxx}’的方式来引用定义过自定义属性，如下所示：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">com<span class=\"selector-class\">.cheryl</span><span class=\"selector-class\">.title</span> = <span class=\"string\">\"springboot技术实战\"</span></span><br><span class=\"line\">com<span class=\"selector-class\">.cheryl</span><span class=\"selector-class\">.desc</span> = $&#123;com<span class=\"selector-class\">.cheryl</span><span class=\"selector-class\">.name</span>&#125;正在学习《$&#123;com<span class=\"selector-class\">.cheryl</span><span class=\"selector-class\">.title</span>&#125;》</span><br></pre></td></tr></table></figure>\n<p>最后该值为Cheryl正在学习《springboot技术实战》</p>\n<h4 id=\"生成随机数\"><a href=\"#生成随机数\" class=\"headerlink\" title=\"生成随机数\"></a>生成随机数</h4><p>在有一些情况中，我们希望一些属性使用随机值而不是一个固定的值，比如密钥等。Spring Boot的属性配置文件中可以通过<code>${random}</code>来产生int值、long值或者string字符串，来支持属性的随机值。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 随机字符串（32位的随机字符串）</span></span><br><span class=\"line\">com.cheryl.<span class=\"attribute\">value</span>=<span class=\"variable\">$&#123;random.value&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 随机int</span></span><br><span class=\"line\">com.cheryl.<span class=\"attribute\">number</span>=<span class=\"variable\">$&#123;random.int&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 随机long</span></span><br><span class=\"line\">com.cheryl.<span class=\"attribute\">bignumber</span>=<span class=\"variable\">$&#123;random.long&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 10以内的随机数</span></span><br><span class=\"line\">com.cheryl.<span class=\"attribute\">test1</span>=<span class=\"variable\">$&#123;random.int(10)&#125;</span></span><br><span class=\"line\"><span class=\"comment\"># 10-20的随机数</span></span><br><span class=\"line\">com.cheryl.<span class=\"attribute\">test2</span>=<span class=\"variable\">$&#123;random.int[10,20]&#125;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"多环境配置\"><a href=\"#多环境配置\" class=\"headerlink\" title=\"多环境配置\"></a>多环境配置</h2><p>我们在开发Spring Boot应用时，通常会被应用和安装到几个不同的环境，比如：开发、测试、生产等。其中每个环境的数据库地址、服务器端口等等配置都会不同，如果在为不同环境打包时都要修改配置文件的话，比较繁琐，而且容易出错。</p>\n<p>一般来说多环境的配置使用各种项目构建工具或是框架的基本思路是一致的，通过配置多份不同环境的配置文件，再通过打包命令指定需要打包的内容之后进行区分打包，Spring Boot也不例外。</p>\n<p>在Spring Boot中多环境配置文件名需要满足<code>application-{profile}.properties</code>的格式，其中<code>{profile}</code>对应你的环境标识，比如：</p>\n<ul>\n<li><code>application-dev.properties</code>：开发环境</li>\n<li><code>application-test.properties</code>：测试环境</li>\n<li><code>application-prod.properties</code>：生产环境</li>\n</ul>\n<p>至于哪个具体的配置文件会被加载，需要在<code>application.properties</code>文件中通过<code>spring.profiles.active</code>属性来设置，其值对应<code>{profile}</code>值。</p>\n<p>如：<code>spring.profiles.active=test</code>就会加载<code>application-test.properties</code>配置文件内容</p>\n<p>下面，以不同环境配置不同的服务端口为例，进行样例实验。</p>\n<ul>\n<li>针对各环境新建不同的配置文件<code>application-dev.properties</code>、<code>application-test.properties</code>、<code>application-prod.properties</code></li>\n<li>在这三个文件均都设置不同的<code>server.port</code>属性，如：dev环境设置为82，test环境设置为83，prod环境设置为80</li>\n<li>application.properties中设置<code>spring.profiles.active=dev</code>，就是说默认以dev环境设置</li>\n<li>测试不同配置的加载<ul>\n<li>执行<code>java -jar xxx.jar</code>，可以观察到服务端口被设置为<code>1111</code>，也就是默认的开发环境（dev）</li>\n<li>执行<code>java -jar xxx.jar --spring.profiles.active=test</code>，可以观察到服务端口被设置为<code>2222</code>，也就是测试环境的配置（test）</li>\n<li>执行<code>java -jar xxx.jar --spring.profiles.active=prod</code>，可以观察到服务端口被设置为<code>3333</code>，也就是生产环境的配置（prod）</li>\n</ul>\n</li>\n</ul>\n<p>按照上面的实验，可以如下总结多环境的配置思路：</p>\n<ul>\n<li><code>application.properties</code>中配置通用内容，并设置<code>spring.profiles.active=dev</code>，以开发环境为默认配置</li>\n<li><code>application-{profile}.properties</code>中配置各个环境不同的内容</li>\n<li>通过命令行方式去激活不同环境的配置</li>\n</ul>\n"},{"title":"","text":"spring-data-jpa自定义ID的生成策略如何指定id策略在JPA中，我们是通过@id和@GeneratedValue来指定id主键和id策略的，比如： 1234@Id@GeneratedValue(strategy = GenerationType.AUTO)@Column(name = \"id\")private String id; 这样也就指定了id和生成id所使用的策略，那么JPA提供了那些策略呢？ JPA提供的4种策略从@GeneratedValue源码里可以看到，strategy属性是由GenerationType指定的，而在GenerationType中定义了四种策略： TABLE：使用一个特定的数据库表格来保存主键。 SEQUENCE：根据底层数据库的序列来生成主键，条件是数据库支持序列。 IDENTITY：主键由数据库自动生成（主要是自动增长型） AUTO：主键由程序控制(也是默认的,在指定主键时，如果不指定主键生成策略，默认为AUTO) 这些策略也不是所有数据库都支持的，具体情况如下： 策略\\数据库 mysql oracle postgreSQL kingbase TABLE 支持 支持 支持 支持 SEQUENCE 不支持 支持 支持 支持 IDENTITY 支持 不支持 支持 支持 AUTO 支持 支持 支持 支持 在@GeneratedValue 中还有一个generator属性 Hibernate拓展id策略当然，很多时候，这么几种策略并不够用，这里hibernate也拓展了JPA的id策略，我们可以在org.hibernate.id.IdentifierGeneratorFactory中看到，主要提供了这么些策略： native: 对于oracle采用Sequence方式，对于MySQL和SQL Server采用identity(自增主键生成机制)，native就是将主键的生成工作交由数据库完成，hibernate不管(很常用)。 uuid: 采用128位的uuid算法生成主键，uuid被编码为一个32位16进制数字的字符串。占用空间大(字符串类型)。 hilo: 使用hilo生成策略，要在数据库中建立一张额外的表，默认表名为hibernate_unique_key,默认字段为Integer类型，名称是next_hi(比较少用)。 assigned: 在插入数据的时候主键由程序处理(很常用)，这是generator元素没有指定时的默认生成策略。等同于JPA中的AUTO。 identity: 使用SQL Server和MySQL的自增字段，这个方法不能放到Oracle中，Oracle不支持自增字段，要设定sequence(MySQL和SQL Server中很常用)。等同于JPA中的IDENTITY。 select: 使用触发器生成主键(主要用于早期的数据库主键生成机制，少用)。 sequence: 调用底层数据库的序列来生成主键，要设定序列名，不然hibernate无法找到。 seqhilo: 通过hilo算法实现，但是主键历史保存在Sequence中，适用于支持Sequence的数据库，如Oracle(比较少用)。 increment: 插入数据的时候hibernate会给主键添加一个自增的主键，但是一个hibernate实例就维护一个计数器，所以在多个实例运行的时候不能使用这个方法。 foreign: 使用另外一个相关联的对象的主键。通常和联合起来使用。 guid: 采用数据库底层的guid算法机制，对应MYSQL的uuid()函数，SQL Server的newid()函数，ORACLE的rawtohex(sys_guid())函数等。 uuid.hex: 看uuid，建议用uuid替换。 sequence-identity: sequence策略的扩展，采用立即检索策略来获取sequence值，需要JDBC3.0和JDK4以上（含1.4）版本 。 具体使用就是多了一个@GenericGenerator注解，指定自定义名称以及策略，然后在@GeneratedValue中使用该策略，比如： 1234@Id@GeneratedValue(generator = \"comnIdStrategy\")@GenericGenerator(name = \"comnIdStrategy\", strategy = \"uuid\")private String id; 使用自定义的id策略hibernate 提供一种实现自定义id策略的接口IdentifierGenerator（位于org.hibernate.id中）。因此在生成自定义策略时，我们只需实现一下IdentifierGenerator接口，以及对应的generate方法即可： 12345678public class ExpId implements IdentifierGenerator&#123; ... @Override public Serializable generate(SessionImplementor sessionImplementor, Object o) throws HibernateException &#123; String date = String.valueOf(new Date().getTime()); return \"exp\" + date+\"_\"+generateRandom(); &#125;&#125; 然后对对应的实体类的某个字段上面使用该策略即可，@GenericGenerator注解的strategy属性上说了，使用非默认策略的时候，需要使用全类名，即： 12345@Id@GeneratedValue(generator = \"expIdStrategy\")@GenericGenerator(name = \"expIdStrategy\", strategy = \"com.cheryl.learn.idworker.ExpId\")@Column(name = \"id\")private String id; 使用测试方法测试，可以看到在数据库中添加的数据的id是使用我们定义策略生成的。| id|address |balance |gender |name |password || ———– | —— | —— | ———- | ——– |———||exp1524189929776_13653 |山西太原| 5000.5| 男 |张三丰 |123456||exp1524189929853_22297 |山西晋中| 2000.1| 男 |李四 |123456|","content":"<h1 id=\"spring-data-jpa\"><a href=\"#spring-data-jpa\" class=\"headerlink\" title=\"spring-data-jpa\"></a>spring-data-jpa</h1><h2 id=\"自定义ID的生成策略\"><a href=\"#自定义ID的生成策略\" class=\"headerlink\" title=\"自定义ID的生成策略\"></a>自定义ID的生成策略</h2><h3 id=\"如何指定id策略\"><a href=\"#如何指定id策略\" class=\"headerlink\" title=\"如何指定id策略\"></a>如何指定id策略</h3><p>在JPA中，我们是通过<code>@id</code>和<code>@GeneratedValue</code>来指定id主键和id策略的，比如：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Id</span></span><br><span class=\"line\"><span class=\"variable\">@GeneratedValue</span>(strategy = GenerationType.AUTO)</span><br><span class=\"line\"><span class=\"variable\">@Column</span>(name = <span class=\"string\">\"id\"</span>)</span><br><span class=\"line\">private String id;</span><br></pre></td></tr></table></figure>\n<p>这样也就指定了id和生成id所使用的策略，那么JPA提供了那些策略呢？</p>\n<h3 id=\"JPA提供的4种策略\"><a href=\"#JPA提供的4种策略\" class=\"headerlink\" title=\"JPA提供的4种策略\"></a>JPA提供的4种策略</h3><p>从<code>@GeneratedValue</code>源码里可以看到，<code>strategy</code>属性是由<code>GenerationType</code>指定的，而在<code>GenerationType</code>中定义了四种策略： </p>\n<ul>\n<li><strong>TABLE</strong>：使用一个特定的数据库表格来保存主键。 </li>\n<li><strong>SEQUENCE</strong>：根据底层数据库的序列来生成主键，条件是数据库支持序列。 </li>\n<li><strong>IDENTITY</strong>：主键由数据库自动生成（主要是自动增长型）</li>\n<li><p><strong>AUTO</strong>：主键由程序控制(也是默认的,在指定主键时，如果不指定主键生成策略，默认为AUTO) </p>\n<p>这些策略也不是所有数据库都支持的，具体情况如下：</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>策略\\数据库</th>\n<th>mysql</th>\n<th>oracle</th>\n<th>postgreSQL</th>\n<th>kingbase</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TABLE</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>SEQUENCE</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>IDENTITY</td>\n<td>支持</td>\n<td>不支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>AUTO</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n</tbody>\n</table>\n<p>在<code>@GeneratedValue</code> 中还有一个generator属性</p>\n<h3 id=\"Hibernate拓展id策略\"><a href=\"#Hibernate拓展id策略\" class=\"headerlink\" title=\"Hibernate拓展id策略\"></a>Hibernate拓展id策略</h3><p>当然，很多时候，这么几种策略并不够用，这里hibernate也拓展了JPA的id策略，我们可以在<code>org.hibernate.id.IdentifierGeneratorFactory</code>中看到，主要提供了这么些策略： </p>\n<ol>\n<li><strong>native</strong>: 对于oracle采用Sequence方式，对于MySQL和SQL Server采用identity(自增主键生成机制)，native就是将主键的生成工作交由数据库完成，hibernate不管(很常用)。 </li>\n<li><strong>uuid</strong>: 采用128位的uuid算法生成主键，uuid被编码为一个32位16进制数字的字符串。占用空间大(字符串类型)。 </li>\n<li><strong>hilo</strong>: 使用hilo生成策略，要在数据库中建立一张额外的表，默认表名为hibernate_unique_key,默认字段为Integer类型，名称是next_hi(比较少用)。 </li>\n<li><strong>assigned</strong>: 在插入数据的时候主键由程序处理(很常用)，这是<code>generator</code>元素没有指定时的默认生成策略。等同于JPA中的AUTO。 </li>\n<li><strong>identity</strong>: 使用SQL Server和MySQL的自增字段，这个方法不能放到Oracle中，Oracle不支持自增字段，要设定sequence(MySQL和SQL Server中很常用)。等同于JPA中的IDENTITY。 </li>\n<li><strong>select</strong>: 使用触发器生成主键(主要用于早期的数据库主键生成机制，少用)。 </li>\n<li><strong>sequence</strong>: 调用底层数据库的序列来生成主键，要设定序列名，不然hibernate无法找到。 </li>\n<li><strong>seqhilo</strong>: 通过hilo算法实现，但是主键历史保存在Sequence中，适用于支持Sequence的数据库，如Oracle(比较少用)。 </li>\n<li><strong>increment</strong>: 插入数据的时候hibernate会给主键添加一个自增的主键，但是一个hibernate实例就维护一个计数器，所以在多个实例运行的时候不能使用这个方法。 </li>\n<li><strong>foreign</strong>: 使用另外一个相关联的对象的主键。通常和联合起来使用。 </li>\n<li><strong>guid</strong>: 采用数据库底层的guid算法机制，对应MYSQL的uuid()函数，SQL Server的newid()函数，ORACLE的rawtohex(sys_guid())函数等。 </li>\n<li><strong>uuid.hex</strong>: 看uuid，建议用uuid替换。 </li>\n<li><strong>sequence-identity</strong>: sequence策略的扩展，采用立即检索策略来获取sequence值，需要JDBC3.0和JDK4以上（含1.4）版本 。 </li>\n</ol>\n<p>具体使用就是多了一个<code>@GenericGenerator</code>注解，指定自定义名称以及策略，然后在<code>@GeneratedValue</code>中使用该策略，比如：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Id</span></span><br><span class=\"line\"><span class=\"variable\">@GeneratedValue</span>(generator  = <span class=\"string\">\"comnIdStrategy\"</span>)</span><br><span class=\"line\"><span class=\"variable\">@GenericGenerator</span>(name = <span class=\"string\">\"comnIdStrategy\"</span>, strategy = <span class=\"string\">\"uuid\"</span>)</span><br><span class=\"line\">private String id;</span><br></pre></td></tr></table></figure>\n<h3 id=\"使用自定义的id策略\"><a href=\"#使用自定义的id策略\" class=\"headerlink\" title=\"使用自定义的id策略\"></a>使用自定义的id策略</h3><p>hibernate 提供一种实现自定义id策略的接口<code>IdentifierGenerator</code>（位于org.hibernate.id中）。因此在生成自定义策略时，我们只需实现一下IdentifierGenerator接口，以及对应的generate方法即可：</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ExpId</span> <span class=\"keyword\"><span class=\"keyword\">implements</span> <span class=\"type\">IdentifierGenerator</span></span></span>&#123;</span><br><span class=\"line\">   ...</span><br><span class=\"line\">   @Override</span><br><span class=\"line\">    <span class=\"keyword\">public</span> Serializable generate(SessionImplementor sessionImplementor, Object o) throws HibernateException &#123;</span><br><span class=\"line\">        <span class=\"keyword\">String</span> date = <span class=\"keyword\">String</span>.valueOf(<span class=\"keyword\">new</span> <span class=\"type\">Date</span>().getTime());</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">\"exp\"</span> + date+<span class=\"string\">\"_\"</span>+generateRandom();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后对对应的实体类的某个字段上面使用该策略即可，<code>@GenericGenerator</code>注解的<code>strategy</code>属性上说了，使用非默认策略的时候，需要使用全类名，即：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Id</span></span><br><span class=\"line\"><span class=\"variable\">@GeneratedValue</span>(generator  = <span class=\"string\">\"expIdStrategy\"</span>)</span><br><span class=\"line\"><span class=\"variable\">@GenericGenerator</span>(name = <span class=\"string\">\"expIdStrategy\"</span>, strategy = <span class=\"string\">\"com.cheryl.learn.idworker.ExpId\"</span>)</span><br><span class=\"line\"><span class=\"variable\">@Column</span>(name = <span class=\"string\">\"id\"</span>)</span><br><span class=\"line\">private String id;</span><br></pre></td></tr></table></figure>\n<p>使用测试方法测试，可以看到在数据库中添加的数据的id是使用我们定义策略生成的。<br>|    id|address    |balance    |gender     |name     |password     |<br>| ———– | —— | —— | ———- | ——– |———|<br>|exp1524189929776_13653    |山西太原|    5000.5|    男    |张三丰    |123456|<br>|exp1524189929853_22297    |山西晋中|    2000.1|    男    |李四    |123456|</p>\n"},{"title":"","text":"# spring-boot restful与集成测试 @Controller：修饰class，用来创建处理http请求的对象 @RestController：Spring4之后加入的注解，原来在@Controller中返回json需要@ResponseBody来配合，如果直接用@RestController替代@Controller就不需要再配置@ResponseBody，默认返回json格式。 @RequestMapping：配置url映射 下面我们尝试使用Spring MVC来实现一组对User对象操作的RESTful API，配合注释详细说明在Spring MVC中如何映射HTTP请求、如何传参、如何编写单元测试。 RESTful API具体设计如下： 使用Swagger生成api","content":"<h1 id=\"spring-boot-restful与集成测试\"><a href=\"#spring-boot-restful与集成测试\" class=\"headerlink\" title=\"# spring-boot restful与集成测试\"></a># spring-boot restful与集成测试</h1><ul>\n<li><code>@Controller</code>：修饰class，用来创建处理http请求的对象</li>\n<li><code>@RestController</code>：Spring4之后加入的注解，原来在<code>@Controller</code>中返回json需要<code>@ResponseBody</code>来配合，如果直接用<code>@RestController</code>替代<code>@Controller</code>就不需要再配置<code>@ResponseBody</code>，默认返回json格式。</li>\n<li><code>@RequestMapping</code>：配置url映射</li>\n</ul>\n<p>下面我们尝试使用Spring MVC来实现一组对User对象操作的RESTful API，配合注释详细说明在Spring MVC中如何映射HTTP请求、如何传参、如何编写单元测试。</p>\n<p><strong>RESTful API具体设计如下：</strong></p>\n<p><a href=\"http://blog.didispace.com/content/images/posts/springbootrestfulapi-1.png\" target=\"_blank\" rel=\"noopener\"><img src=\"http://blog.didispace.com/content/images/posts/springbootrestfulapi-1.png\" alt=\"img\"></a></p>\n<h2 id=\"使用Swagger生成api\"><a href=\"#使用Swagger生成api\" class=\"headerlink\" title=\"使用Swagger生成api\"></a>使用Swagger生成api</h2>"},{"title":"","text":"JDBC Template 的使用数据源配置在我们访问数据库的时候，需要先配置一个数据源，下面分别介绍一下几种不同的数据库配置方式。 首先，为了连接数据库需要引入jdbc支持，在pom.xml中引入如下配置： 1234&lt;dependency&gt; &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt; &lt;artifactId&gt;spring-boot-starter-jdbc&lt;/artifactId&gt;&lt;/dependency&gt; 嵌入式数据库支持嵌入式数据库通常用于开发和测试环境，不推荐用于生产环境。Spring Boot提供自动配置的嵌入式数据库有H2、HSQL、Derby，你不需要提供任何连接配置就能使用。 比如，我们可以在pom.xml中引入如下配置使用HSQL 12345&lt;dependency&gt; &lt;groupId&gt;org.hsqldb&lt;/groupId&gt; &lt;artifactId&gt;hsqldb&lt;/artifactId&gt; &lt;scope&gt;runtime&lt;/scope&gt;&lt;/dependency&gt; 连接生产数据源以MySQL数据库为例，先引入MySQL连接的依赖包，在pom.xml中加入： 12345&lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.21&lt;/version&gt;&lt;/dependency&gt; 在src/main/resources/application.properties中配置数据源信息 1234spring.datasource.url=jdbc:mysql://localhost:3306/testspring.datasource.username=dbuserspring.datasource.password=dbpassspring.datasource.driver-class-name=com.mysql.jdbc.Driver 连接JNDI数据源当你将应用部署于应用服务器上的时候想让数据源由应用服务器管理，那么可以使用如下配置方式引入JNDI数据源。 1spring.datasource.jndi-name=java:jboss/datasources/customers 使用JDBCTemplate在数据库中创建一张User表（id，name,age）,其中id设置为自增长类型的。 创建一个UserService接口类，实现基本的增，删，改，查方法： 123456789101112131415161718192021222324public interface UserService&#123; /** * 新增一个用户 * @param name * @param age */ void create(String name, Integer age); /** * 根据name删除一个用户高 * @param name */ void deleteByName(String name); /** * 获取用户总量 */ Integer getAllUsers(); /** * 删除所有用户 */ void deleteAllUsers();&#125; 通过JdbcTemplate实现UserService中定义的数据访问操作创建对应的实现类 1234567891011121314151617181920212223242526272829303132333435363738394041@Servicepublic class UserServiceImpl implements UserService&#123; @Autowired private JdbcTemplate jdbcTemplate; /** * 创建用户 * @param name * @param age */ @Override public void create(String name, Integer age) &#123; jdbcTemplate.update(\"insert into user(name,age) values(?,?)\",name,age); &#125; /** * 根据名字删除用户 * @param name */ @Override public void deleteByName(String name) &#123; jdbcTemplate.update(\"delete from user where name = ? \",name); &#125; /** * 获取所有用户 * @return */ @Override public Integer getAllUsers() &#123; return jdbcTemplate.queryForObject(\"select count(1) from user\",Integer.class); &#125; /** * 删除用户 */ @Override public void deleteAllUsers() &#123; jdbcTemplate.update(\"delete from user\"); &#125;&#125; 创建对UserService的单元测试用例，通过创建、删除和查询来验证数据库操作的正确性。 12345678910111213141516171819202122232425262728@RunWith(SpringJUnit4ClassRunner.class)@SpringBootTestpublic class UserServiceTest &#123; @Autowired private UserService userService; @Before public void setUp() &#123; // 准备，清空user表 userService.deleteAllUsers(); &#125; @Test public void test()&#123; userService.create(\"张三\",20); userService.create(\"李四\",10); userService.create(\"王五\",30); userService.create(\"赵六\",42); userService.create(\"孙二\",66); // 查数据库，应该有5个用户 Assert.assertEquals(5, userService.getAllUsers().intValue()); userService.deleteByName(\"张三\"); // 查数据库，应该有5个用户 Assert.assertEquals(4, userService.getAllUsers().intValue()); &#125;&#125; 其余详细的操作见jdbcTemplateApi","content":"<h1 id=\"JDBC-Template-的使用\"><a href=\"#JDBC-Template-的使用\" class=\"headerlink\" title=\"JDBC Template 的使用\"></a>JDBC Template 的使用</h1><h2 id=\"数据源配置\"><a href=\"#数据源配置\" class=\"headerlink\" title=\"数据源配置\"></a>数据源配置</h2><p>在我们访问数据库的时候，需要先配置一个数据源，下面分别介绍一下几种不同的数据库配置方式。</p>\n<p>首先，为了连接数据库需要引入jdbc支持，在<code>pom.xml</code>中引入如下配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.springframework.boot<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"嵌入式数据库支持\"><a href=\"#嵌入式数据库支持\" class=\"headerlink\" title=\"嵌入式数据库支持\"></a>嵌入式数据库支持</h4><p>嵌入式数据库通常用于开发和测试环境，不推荐用于生产环境。Spring Boot提供自动配置的嵌入式数据库有H2、HSQL、Derby，你不需要提供任何连接配置就能使用。</p>\n<p>比如，我们可以在<code>pom.xml</code>中引入如下配置使用HSQL</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>org.hsqldb<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>hsqldb<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>runtime<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"连接生产数据源\"><a href=\"#连接生产数据源\" class=\"headerlink\" title=\"连接生产数据源\"></a>连接生产数据源</h4><p>以MySQL数据库为例，先引入MySQL连接的依赖包，在<code>pom.xml</code>中加入：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>mysql<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>mysql-connector-java<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>5.1.21<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>在<code>src/main/resources/application.properties</code>中配置数据源信息</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.url</span>=jdbc:mysql:<span class=\"comment\">//localhost:3306/test</span></span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.username</span>=dbuser</span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.password</span>=dbpass</span><br><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.driver-class-name</span>=com<span class=\"selector-class\">.mysql</span><span class=\"selector-class\">.jdbc</span><span class=\"selector-class\">.Driver</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"连接JNDI数据源\"><a href=\"#连接JNDI数据源\" class=\"headerlink\" title=\"连接JNDI数据源\"></a>连接JNDI数据源</h4><p>当你将应用部署于应用服务器上的时候想让数据源由应用服务器管理，那么可以使用如下配置方式引入JNDI数据源。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">spring<span class=\"selector-class\">.datasource</span><span class=\"selector-class\">.jndi-name</span>=java:jboss/datasources/customers</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用JDBCTemplate\"><a href=\"#使用JDBCTemplate\" class=\"headerlink\" title=\"使用JDBCTemplate\"></a>使用JDBCTemplate</h2><p>在数据库中创建一张User表（id，name,age）,其中id设置为自增长类型的。</p>\n<p>创建一个UserService接口类，实现基本的增，删，改，查方法：</p>\n<figure class=\"highlight cs\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">interface</span> <span class=\"title\">UserService</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 新增一个用户</span></span><br><span class=\"line\"><span class=\"comment\">     * @param name</span></span><br><span class=\"line\"><span class=\"comment\">     * @param age</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">create</span>(<span class=\"params\">String name, Integer age</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据name删除一个用户高</span></span><br><span class=\"line\"><span class=\"comment\">     * @param name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteByName</span>(<span class=\"params\">String name</span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取用户总量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\">Integer <span class=\"title\">getAllUsers</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除所有用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteAllUsers</span>(<span class=\"params\"></span>)</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>通过JdbcTemplate实现UserService中定义的数据访问操作创建对应的实现类</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Service</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServiceImpl</span> <span class=\"keyword\">implements</span> <span class=\"title\">UserService</span></span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Autowired</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> JdbcTemplate jdbcTemplate;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 创建用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> age</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">create</span><span class=\"params\">(String name, Integer age)</span> </span>&#123;</span><br><span class=\"line\">        jdbcTemplate.update(<span class=\"string\">\"insert into user(name,age) values(?,?)\"</span>,name,age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据名字删除用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> name</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteByName</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        jdbcTemplate.update(<span class=\"string\">\"delete from user where name = ? \"</span>,name);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取所有用户</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Integer <span class=\"title\">getAllUsers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">       <span class=\"keyword\">return</span> jdbcTemplate.queryForObject(<span class=\"string\">\"select count(1) from user\"</span>,Integer.class);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除用户</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">deleteAllUsers</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        jdbcTemplate.update(<span class=\"string\">\"delete from user\"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>创建对UserService的单元测试用例，通过创建、删除和查询来验证数据库操作的正确性。</li>\n</ul>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class=\"line\"><span class=\"variable\">@SpringBootTest</span></span><br><span class=\"line\">public class UserServiceTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@Autowired</span></span><br><span class=\"line\">    private UserService userService;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"variable\">@Before</span></span><br><span class=\"line\">    public void setUp() &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 准备，清空user表</span></span><br><span class=\"line\">        <span class=\"selector-tag\">userService</span><span class=\"selector-class\">.deleteAllUsers</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    @<span class=\"selector-tag\">Test</span></span><br><span class=\"line\">    <span class=\"selector-tag\">public</span> <span class=\"selector-tag\">void</span> <span class=\"selector-tag\">test</span>()&#123;</span><br><span class=\"line\">        <span class=\"selector-tag\">userService</span><span class=\"selector-class\">.create</span>(<span class=\"string\">\"张三\"</span>,<span class=\"number\">20</span>);</span><br><span class=\"line\">        <span class=\"selector-tag\">userService</span><span class=\"selector-class\">.create</span>(<span class=\"string\">\"李四\"</span>,<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"selector-tag\">userService</span><span class=\"selector-class\">.create</span>(<span class=\"string\">\"王五\"</span>,<span class=\"number\">30</span>);</span><br><span class=\"line\">        <span class=\"selector-tag\">userService</span><span class=\"selector-class\">.create</span>(<span class=\"string\">\"赵六\"</span>,<span class=\"number\">42</span>);</span><br><span class=\"line\">        <span class=\"selector-tag\">userService</span><span class=\"selector-class\">.create</span>(<span class=\"string\">\"孙二\"</span>,<span class=\"number\">66</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 查数据库，应该有5个用户</span></span><br><span class=\"line\">        <span class=\"selector-tag\">Assert</span><span class=\"selector-class\">.assertEquals</span>(<span class=\"number\">5</span>, userService.getAllUsers().intValue());</span><br><span class=\"line\">        <span class=\"selector-tag\">userService</span><span class=\"selector-class\">.deleteByName</span>(<span class=\"string\">\"张三\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 查数据库，应该有5个用户</span></span><br><span class=\"line\">        <span class=\"selector-tag\">Assert</span><span class=\"selector-class\">.assertEquals</span>(<span class=\"number\">4</span>, userService.getAllUsers().intValue());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其余详细的操作见<a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/core/JdbcTemplate.html\" target=\"_blank\" rel=\"noopener\">jdbcTemplateApi</a></p>\n"},{"title":"","text":"video标签插件库videojs-contrib-hls官网地址 github地址 插件介绍插件说明：https://www.cnblogs.com/tinywan/p/6692098.html 常见错误 1、在播放.m3u8的文件时，浏览器出现了如下的错误，原因是对应的查看的js版本太低了，更换之后就不会出现下面的问题了。","content":"<h1 id=\"video标签插件库\"><a href=\"#video标签插件库\" class=\"headerlink\" title=\"video标签插件库\"></a>video标签插件库</h1><h2 id=\"videojs-contrib-hls\"><a href=\"#videojs-contrib-hls\" class=\"headerlink\" title=\"videojs-contrib-hls\"></a>videojs-contrib-hls</h2><p><a href=\"http://www.bootcdn.cn/videojs-contrib-hls\" target=\"_blank\" rel=\"noopener\">官网地址</a></p>\n<p><a href=\"https://github.com/videojs/videojs-contrib-hls\" target=\"_blank\" rel=\"noopener\">github地址</a></p>\n<h3 id=\"插件介绍\"><a href=\"#插件介绍\" class=\"headerlink\" title=\"插件介绍\"></a>插件介绍</h3><p>插件说明：<a href=\"https://www.cnblogs.com/tinywan/p/6692098.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/tinywan/p/6692098.html</a></p>\n<p>常见错误</p>\n<p>1、在播放.m3u8的文件时，浏览器出现了如下的错误，原因是对应的查看的js版本太低了，更换之后就不会出现下面的问题了。</p>\n<p><img src=\"E:\\learn\\gitbook\\rtsp-hls-online-live\\error1.png\" alt=\"1523950179037\"></p>\n"},{"title":"设置tomcat定时启动","text":"注册服务首先将tomcat注册为服务 先打开tomcat的bin目录下service.bat文件，修改下面的值，这是sevvice的注册名称和显示名称，一般可使用默认值。 1set SERVICE_NAME=Tomcat-DPlatform-Server``set DISPLAYNAME=Apache Tomcat 8.5 %SERVICE_NAME% ​ 然后修改jvm大小， 搜索到–JvmMs 128 –JvmMx 256 进行修改，因为做成服务启动，启动的时候就不会用到 catalina.bat，也就不会读取里面的jvm设置了。】（可选，可以不设置） 然后运行cmd命令窗口，cd 到tomcat的bin目录下，运行下面的命令 1service.bat install ​ 运行成功过后，会提示服务已经安装成功。如下图所示： 制作重启脚本制作重启脚本restart.bat，文件内容如下： 123456789101112131415161718192021@echo off echo ***********************************************echo start time %DATE% %TIME% echo ***********************************************echo Start closing the service net stop Tomcat-DPlatform-Serverecho service has been closedecho *** echo start clean up catchingrd /q/s \"D:\\tomcat\\ydkq-tomcat-server\\work\\Catalina\"echo clean up end echo start clean up temp for /f \"delims=\" %%a in ('dir /ad/b/s D:\\tomcat\\ydkq-tomcat-server\\temp') do (rd /q /s \"%%a\")&gt;nulrem del /q/s \"D:\\tomcat\\ydkq-tomcat-server\\temp\\*.*\" echo clean up end echo Start the start of the service net start Tomcat-DPlatform-Server echo service has been startedecho ***********************************************echo end time %DATE% %TIME% echo *********************************************** 配置定时任务​ （win7）开始–&gt;附件——&gt;系统工具——&gt;任务计划与程序，然后设置对应的脚本运行时间计划 【注意】 使用net stop / net start 命令的时候需要使用管理员权限也就是任务中的最高权限，否则会提示发生系统错误，拒绝访问。 删除服务如果想要删除服务，也很简单，先把服务停掉，然后在cmd窗口运行下面的命令即可，后面那个Tomcat7是服务名。 sc delete Tomcat7 需要注意的是，需要先把服务停掉，才能一次删除成功，或者删除之后再停止服务，就会发现服务已经删除成功了。 参考文章 tomcat宕机自动重启和每日定时启动tomcat【工具包系列】","content":"<h1 id=\"注册服务\"><a href=\"#注册服务\" class=\"headerlink\" title=\"注册服务\"></a>注册服务</h1><p>首先将tomcat注册为服务      先打开tomcat的bin目录下service.bat文件，修改下面的值，这是sevvice的注册名称和显示名称，一般可使用默认值。</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">SERVICE_NAME</span>=Tomcat-DPlatform-Server``set <span class=\"attribute\">DISPLAYNAME</span>=Apache Tomcat 8.5 %SERVICE_NAME%</span><br></pre></td></tr></table></figure>\n<p>​     然后修改jvm大小， 搜索到–JvmMs 128 –JvmMx 256 进行修改，因为做成服务启动，启动的时候就不会用到 catalina.bat，也就不会读取里面的jvm设置了。】（可选，可以不设置）<br>     然后运行cmd命令窗口，cd 到tomcat的bin目录下，运行下面的命令 </p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service<span class=\"selector-class\">.bat</span> install</span><br></pre></td></tr></table></figure>\n<p>​       运行成功过后，会提示服务已经安装成功。如下图所示：<br> <img src=\"file:///C:/Users/cheryl/Documents/My Knowledge/temp/3876c524-2e1d-4692-b26e-4642dd15485c/128/index_files/92bc70f4-85a4-4bc5-87db-9fb697dc3d20.png\" alt=\"img\"></p>\n<h1 id=\"制作重启脚本\"><a href=\"#制作重启脚本\" class=\"headerlink\" title=\"制作重启脚本\"></a>制作重启脚本</h1><p>制作重启脚本restart.bat，文件内容如下： </p>\n<figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"built_in\">echo</span> off </span><br><span class=\"line\"><span class=\"built_in\">echo</span> ***********************************************</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">start</span> <span class=\"built_in\">time</span> <span class=\"variable\">%DATE%</span> <span class=\"variable\">%TIME%</span> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> ***********************************************</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">Start</span> closing the service </span><br><span class=\"line\"><span class=\"built_in\">net</span> stop Tomcat-DPlatform-Server</span><br><span class=\"line\"><span class=\"built_in\">echo</span> service has been closed</span><br><span class=\"line\"><span class=\"built_in\">echo</span>  *** </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">start</span> clean up catching</span><br><span class=\"line\"><span class=\"built_in\">rd</span> /q/s \"D:\\tomcat\\ydkq-tomcat-server\\work\\Catalina\"</span><br><span class=\"line\"><span class=\"built_in\">echo</span> clean up end </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">start</span> clean up temp </span><br><span class=\"line\"><span class=\"keyword\">for</span> /f \"delims=\" <span class=\"variable\">%%a</span> <span class=\"keyword\">in</span> ('<span class=\"built_in\">dir</span> /ad/b/s D:\\tomcat\\ydkq-tomcat-server\\temp') <span class=\"keyword\">do</span> (<span class=\"built_in\">rd</span> /q /s \"<span class=\"variable\">%%a</span>\")&gt;<span class=\"built_in\">nul</span></span><br><span class=\"line\"><span class=\"comment\">rem del /q/s \"D:\\tomcat\\ydkq-tomcat-server\\temp\\*.*\"   </span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> clean up end </span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"built_in\">Start</span> the <span class=\"built_in\">start</span> of the service </span><br><span class=\"line\"><span class=\"built_in\">net</span> <span class=\"built_in\">start</span> Tomcat-DPlatform-Server </span><br><span class=\"line\"><span class=\"built_in\">echo</span> service has been started</span><br><span class=\"line\"><span class=\"built_in\">echo</span> ***********************************************</span><br><span class=\"line\"><span class=\"built_in\">echo</span> end <span class=\"built_in\">time</span> <span class=\"variable\">%DATE%</span> <span class=\"variable\">%TIME%</span> </span><br><span class=\"line\"><span class=\"built_in\">echo</span> ***********************************************</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置定时任务\"><a href=\"#配置定时任务\" class=\"headerlink\" title=\"配置定时任务\"></a>配置定时任务</h1><p>​    （win7）开始–&gt;附件——&gt;系统工具——&gt;任务计划与程序，然后设置对应的脚本运行时间计划   【注意】 使用net stop / net start 命令的时候需要使用管理员权限也就是任务中的最高权限，否则会提示发生系统错误，拒绝访问。</p>\n<h1 id=\"删除服务\"><a href=\"#删除服务\" class=\"headerlink\" title=\"删除服务\"></a>删除服务</h1><p>如果想要删除服务，也很简单，先把服务停掉，然后在cmd窗口运行下面的命令即可，后面那个Tomcat7是服务名。 sc delete Tomcat7</p>\n<p>需要注意的是，需要先把服务停掉，才能一次删除成功，或者删除之后再停止服务，就会发现服务已经删除成功了。</p>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"http://blog.csdn.net/lovelong8808/article/details/52052423\" target=\"_blank\" rel=\"noopener\">tomcat宕机自动重启和每日定时启动tomcat【工具包系列】</a></li>\n</ul>\n"},{"title":"实时视屏播放的简单实现","text":"实时视屏播放的简单实现 通过使用nginx搭建一个简单的服务器，使用ffmpeg推送rtmp实时流，利用video标签实现可以在web端和手机端的浏览器中进行直播。 Windows下面搭建基于rtmp的服务器硬件环境操作系统：windows7旗舰版 处 理 器：Intel(R) Core(TM)i5-5200 CPU @2.20GHz 2.20 GHz 系统内存： 8GB 系统类型：64位操作系统 软件环境及配置 下载 nginx 1.7.11.3 Gryphon，然后解压到对应的目录，此处为D:\\Program Files；下载链接-Gryphon.zip 将解压后的目录名:nginx 1.7.11.3 Gryphon改成:nginx-1.7.11.3-Gryphon ​ 下载服务器状态检查程序 stat.xsl 下载地址 将nginx-rtmp-module-master.zip解压后复制到目录:nginx-1.7.11.3-Gryphon中。 保证stat.xls的目录为:nginx-1.7.11.3-Gryphon\\nginx-rtmp-module\\stat.xsl 修改conf\\nginx-win.conf 配置文件。 Nginx可以支持多虚机配置，如果是一个ip或域名多虚机的情况，就是要不同的虚机对应不同的端口服务，而如果是多ip或域名一个虚机的情况，则又不一样。这里的实际情况就是，80分别对应一个http协议的虚机，1935对应一个rtmp协议的虚机。 添加rtmp服务。 1234567891011121314151617181920rtmp &#123; server &#123; listen 1935; chunk_size 4000; application hls&#123; live on ; #启用rtmp直播 #地址为rtmp://[server]:[rtmp_port]/[app]/[stream] hls on ; #启用hls直播 #地址为地址为http://[server]:[http_port]/[app]/[stream].m3u8 hls_path html/hls; #此处hls需手动在html文件夹下面创建，否则程序会报错 hls_fragment 5s; recorder rec &#123; #启用录制 record all manual; #手动控制录制启停 record_suffix _rec.flv; record_path nginx-rtmp-module/tmp/rec/; #录制保存地址 record_unique on; &#125; &#125; &#125;&#125; 配置http server 12345678910111213141516171819202122server &#123; listen 80; # server_name localhost; location /stat &#123; # rtmp_stat all; # rtmp_stat_stylesheet stat.xls; #&#125; #location /stat.xls &#123; # root nginx-rtmp-module/; #&#125; #location /control &#123; # rtmp_control all; #&#125; location /hls &#123; # Serve HLS fragments types &#123; application/vnd.apple.mpegurl m3u8; video/mp2t ts; &#125; root html; expires -1; &#125; 启动服务器 在nginx.exe所在的文件夹，按住shift+右键，选中在此处打开命令窗口，进入windows的cmd。输入以下命令启动nginx服务： 1nginx.exe -c conf\\nginx-win-.conf . 启动结果 直接在浏览器里输入127.0.0.1就可以进入浏览器的欢迎界面 ubuntu搭建推流服务器Nginx+rtmp 提供rtmp直播源在搭建好基于rtmp的服务器之后，需要提供rtmp直播源。这里我们使用的香港卫视的rtmp直播源。根据nginx.conf中的hls_path配置，下面这个命令会向本地的D:\\Program Files\\nginx-1.7.11.3-Gryphon\\html\\hls下面写入ts片段和m3u8文件。 1ffmpeg -re -analyzeduration 8000 -probesize 200000 -i \"rtmp://live.hkstv.hk.lxdns.com/live/hks\" -strict -2 -bsf:a aac_adtstoasc -c copy -flvflags aac_seq_header_detect -f flv rtmp://localhost/hls/mystream 注意 1、这里提供rtmp源的机器不一定和nginx在同一台物理主机上，可以是网络上的另一台机器，只要保证它能与nginx所在的主机建立tcp链接即可。（也就是nginx主机需要开启rtmp服务的监听端口，这里是1935，当然你也可以修改为其他的端口。） 2、ffmpeg下载地址 在网页中展示视屏在nginx-1.7.11.3-Gryphon/html目录下面创建一个live.html。 123456789101112131415&lt;html&gt;&lt;head&gt; &lt;link rel=\"stylesheet\" href=\"http://vjs.zencdn.net/5.10/video-js.css\"&gt;&lt;/head&gt; &lt;video id=example-video width=960 height=540 class=\"video-js vjs-default-skin\" controls autoplay=true&gt; &lt;source src=\"hls/mystream.m3u8\" type=\"application/x-mpegURL\"&gt; &lt;/video&gt; &lt;script src=\"http://vjs.zencdn.net/5.10/video.js\"&gt;&lt;/script&gt; &lt;script src=\"https://cdn.bootcss.com/videojs-contrib-hls/5.14.1/videojs-contrib-hls.min.js\"&gt;&lt;/script&gt; &lt;/script&gt; &lt;script&gt; var player = videojs('example-video'); player.play(); &lt;/script&gt;&lt;/html&gt; 如果只是用video标签是无法播放.m3u8的视屏文件的，需要引入videojs-contrib-hls.js。videojs-contrib-hls支持一堆HLS功能，详情参考[https://www.cnblogs.com/tinywan/p/6692098.html] web端运行效果 手机端运行效果 手机端如果与web可以在同一个网络环境中，那么输入对应本机ip地址也是可以查看的，并且支持横屏、竖屏的切换。 其他 防火墙打开了1935 tcp端口，rtmp视屏还是不能播放， 可以用下面的命令暂停，systemctl stop firewalld.service [参考博文] 1、使用Nginx-rtmp-module搭建hls直播 2、 海康NVR设备RTSP协议转RTMP协议","content":"<h1 id=\"实时视屏播放的简单实现\"><a href=\"#实时视屏播放的简单实现\" class=\"headerlink\" title=\"实时视屏播放的简单实现\"></a>实时视屏播放的简单实现</h1><blockquote>\n<p>通过使用nginx搭建一个简单的服务器，使用ffmpeg推送rtmp实时流，利用video标签实现可以在web端和手机端的浏览器中进行直播。</p>\n</blockquote>\n<h2 id=\"Windows下面搭建基于rtmp的服务器\"><a href=\"#Windows下面搭建基于rtmp的服务器\" class=\"headerlink\" title=\"Windows下面搭建基于rtmp的服务器\"></a>Windows下面搭建基于rtmp的服务器</h2><h3 id=\"硬件环境\"><a href=\"#硬件环境\" class=\"headerlink\" title=\"硬件环境\"></a>硬件环境</h3><p>操作系统：windows7旗舰版 </p>\n<p>处  理  器：Intel(R) Core(TM)i5-5200 CPU @2.20GHz 2.20 GHz</p>\n<p>系统内存： 8GB</p>\n<p>系统类型：64位操作系统</p>\n<h3 id=\"软件环境及配置\"><a href=\"#软件环境及配置\" class=\"headerlink\" title=\"软件环境及配置\"></a>软件环境及配置</h3><ol>\n<li><p>下载 nginx 1.7.11.3 Gryphon，然后解压到对应的目录，此处为D:\\Program Files；<br><a href=\"http://nginx-win.ecsds.eu/download/nginx%201.7.11.3%20Gryphon.zip\" target=\"_blank\" rel=\"noopener\">下载链接-Gryphon.zip</a></p>\n<blockquote>\n<p>将解压后的目录名:nginx 1.7.11.3 Gryphon改成:nginx-1.7.11.3-Gryphon</p>\n</blockquote>\n<p>​</p>\n</li>\n<li><p>下载服务器状态检查程序 stat.xsl</p>\n<p><a href=\"https://github.com/arut/nginx-rtmp-module/\" target=\"_blank\" rel=\"noopener\">下载地址</a></p>\n</li>\n<li><p>将nginx-rtmp-module-master.zip解压后复制到目录:nginx-1.7.11.3-Gryphon中。</p>\n<blockquote>\n<p> 保证stat.xls的目录为:nginx-1.7.11.3-Gryphon\\nginx-rtmp-module\\stat.xsl</p>\n</blockquote>\n</li>\n<li><p>修改conf\\nginx-win.conf 配置文件。</p>\n<p>Nginx可以支持多虚机配置，如果是一个ip或域名多虚机的情况，就是要不同的虚机对应不同的端口服务，而如果是多ip或域名一个虚机的情况，则又不一样。这里的实际情况就是，80分别对应一个http协议的虚机，1935对应一个rtmp协议的虚机。</p>\n<ul>\n<li>添加rtmp服务。</li>\n</ul>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">rtmp</span> &#123;</span><br><span class=\"line\"> <span class=\"section\">server</span> &#123;</span><br><span class=\"line\">     <span class=\"attribute\">listen</span> <span class=\"number\">1935</span>;</span><br><span class=\"line\">     <span class=\"attribute\">chunk_size</span> <span class=\"number\">4000</span>;</span><br><span class=\"line\">     <span class=\"attribute\">application</span> hls&#123;</span><br><span class=\"line\">         <span class=\"attribute\">live</span> <span class=\"literal\">on</span> ; <span class=\"comment\">#启用rtmp直播</span></span><br><span class=\"line\">                   <span class=\"comment\">#地址为rtmp://[server]:[rtmp_port]/[app]/[stream]</span></span><br><span class=\"line\">         <span class=\"attribute\">hls</span> <span class=\"literal\">on</span> ;  <span class=\"comment\">#启用hls直播</span></span><br><span class=\"line\">                   <span class=\"comment\">#地址为地址为http://[server]:[http_port]/[app]/[stream].m3u8</span></span><br><span class=\"line\">         <span class=\"attribute\">hls_path</span> html/hls; <span class=\"comment\">#此处hls需手动在html文件夹下面创建，否则程序会报错</span></span><br><span class=\"line\">         <span class=\"attribute\">hls_fragment</span> <span class=\"number\">5s</span>;</span><br><span class=\"line\">         <span class=\"attribute\">recorder</span> rec &#123; <span class=\"comment\">#启用录制</span></span><br><span class=\"line\">         \t<span class=\"attribute\">record</span> all manual; <span class=\"comment\">#手动控制录制启停</span></span><br><span class=\"line\">         \t<span class=\"attribute\">record_suffix</span> _rec.flv;</span><br><span class=\"line\">         \t<span class=\"attribute\">record_path</span> nginx-rtmp-module/tmp/rec/; <span class=\"comment\">#录制保存地址</span></span><br><span class=\"line\">         \t<span class=\"attribute\">record_unique</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">         &#125; \t\t\t</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置http server</p>\n</li>\n</ol>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen       <span class=\"number\">80</span>;</span><br><span class=\"line\">    <span class=\"comment\"># server_name  localhost;</span></span><br><span class=\"line\">    <span class=\"keyword\">location</span> <span class=\"title\">/stat</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">#\trtmp_stat all;</span></span><br><span class=\"line\">    <span class=\"comment\">#\trtmp_stat_stylesheet stat.xls;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#location /stat.xls &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#\troot nginx-rtmp-module/;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    <span class=\"comment\">#location /control &#123;</span></span><br><span class=\"line\">    <span class=\"comment\">#\trtmp_control all;</span></span><br><span class=\"line\">    <span class=\"comment\">#&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">location</span> <span class=\"title\">/hls</span> &#123;  </span><br><span class=\"line\">        <span class=\"comment\"># Serve HLS fragments  </span></span><br><span class=\"line\">        types &#123;  </span><br><span class=\"line\">            application/vnd.apple.mpegurl m3u8;  </span><br><span class=\"line\">            video/mp2t ts;  </span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        root html;  </span><br><span class=\"line\">        expires -<span class=\"number\">1</span>;  </span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol start=\"6\">\n<li>启动服务器</li>\n</ol>\n<p>在nginx.exe所在的文件夹，按住shift+右键，选中在此处打开命令窗口，进入windows的cmd。输入以下命令启动nginx服务：</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx.exe -c <span class=\"keyword\">conf</span>\\nginx-<span class=\"keyword\">win</span>-.<span class=\"keyword\">conf</span></span><br></pre></td></tr></table></figure>\n<p>. 启动结果    </p>\n<p> <img src=\"/images/rtsp/cmd-result.png\" alt=\"avatar\"></p>\n<ol start=\"7\">\n<li>直接在浏览器里输入127.0.0.1就可以进入浏览器的欢迎界面<br><img src=\"/images/rtsp/result.png\" alt=\"avatar\"></li>\n</ol>\n<blockquote>\n<p><a href=\"https://www.jianshu.com/p/f0bf83ca3ea3\" target=\"_blank\" rel=\"noopener\">ubuntu搭建推流服务器Nginx+rtmp</a></p>\n</blockquote>\n<h2 id=\"提供rtmp直播源\"><a href=\"#提供rtmp直播源\" class=\"headerlink\" title=\"提供rtmp直播源\"></a>提供rtmp直播源</h2><p>在搭建好基于rtmp的服务器之后，需要提供rtmp直播源。这里我们使用的香港卫视的rtmp直播源。根据nginx.conf中的hls_path配置，下面这个命令会向本地的D:\\Program Files\\nginx-1.7.11.3-Gryphon\\html\\hls下面写入ts片段和m3u8文件。</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ffmpeg -re -analyzeduration <span class=\"number\">8000</span> -probesize <span class=\"number\">200000</span> -<span class=\"selector-tag\">i</span> <span class=\"string\">\"rtmp://live.hkstv.hk.lxdns.com/live/hks\"</span> -strict -<span class=\"number\">2</span> -bsf:<span class=\"selector-tag\">a</span> aac_adtstoasc -c copy -flvflags aac_seq_header_detect -f flv rtmp:<span class=\"comment\">//localhost/hls/mystream</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意</p>\n<p>1、这里提供rtmp源的机器不一定和nginx在同一台物理主机上，可以是网络上的另一台机器，只要保证它能与nginx所在的主机建立tcp链接即可。（也就是nginx主机需要开启rtmp服务的监听端口，这里是1935，当然你也可以修改为其他的端口。）  </p>\n<p>2、<a href=\"https://www.ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">ffmpeg下载地址</a></p>\n</blockquote>\n<h2 id=\"在网页中展示视屏\"><a href=\"#在网页中展示视屏\" class=\"headerlink\" title=\"在网页中展示视屏\"></a>在网页中展示视屏</h2><p>在nginx-1.7.11.3-Gryphon/html目录下面创建一个live.html。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">link</span> <span class=\"attr\">rel</span>=<span class=\"string\">\"stylesheet\"</span> <span class=\"attr\">href</span>=<span class=\"string\">\"http://vjs.zencdn.net/5.10/video-js.css\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">video</span> <span class=\"attr\">id</span>=<span class=\"string\">example-video</span> <span class=\"attr\">width</span>=<span class=\"string\">960</span> <span class=\"attr\">height</span>=<span class=\"string\">540</span> <span class=\"attr\">class</span>=<span class=\"string\">\"video-js vjs-default-skin\"</span> <span class=\"attr\">controls</span> <span class=\"attr\">autoplay</span>=<span class=\"string\">true</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">source</span> <span class=\"attr\">src</span>=<span class=\"string\">\"hls/mystream.m3u8\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"application/x-mpegURL\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">video</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://vjs.zencdn.net/5.10/video.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">   \t<span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://cdn.bootcss.com/videojs-contrib-hls/5.14.1/videojs-contrib-hls.min.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"actionscript\">        <span class=\"keyword\">var</span> player = videojs(<span class=\"string\">'example-video'</span>);</span></span><br><span class=\"line\"><span class=\"undefined\">        player.play();</span></span><br><span class=\"line\"><span class=\"undefined\">    </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果只是用video标签是无法播放.m3u8的视屏文件的，需要引入videojs-contrib-hls.js。videojs-contrib-hls支持一堆HLS功能，详情参考[<a href=\"https://www.cnblogs.com/tinywan/p/6692098.html]\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/tinywan/p/6692098.html]</a></p>\n</blockquote>\n<ul>\n<li><p>web端运行效果</p>\n<p><img src=\"/images/rtsp/web.png\" alt=\"avatar\"></p>\n</li>\n<li><p>手机端运行效果</p>\n</li>\n</ul>\n<p>  手机端如果与web可以在同一个网络环境中，那么输入对应本机ip地址也是可以查看的，并且支持横屏、竖屏的切换。</p>\n<p>  <img src=\"/images/rtsp/app1.png\" alt=\"avatar\"></p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h3><ul>\n<li><p>防火墙打开了1935 tcp端口，rtmp视屏还是不能播放，</p>\n<p>可以用下面的命令暂停，<br>systemctl stop firewalld.service</p>\n</li>\n</ul>\n<p>[参考博文]</p>\n<p>1、<a href=\"https://blog.csdn.net/tao_627/article/details/22271559\" target=\"_blank\" rel=\"noopener\"><a href=\"https://blog.csdn.net/tao_627/article/details/22271559\" target=\"_blank\" rel=\"noopener\">使用Nginx-rtmp-module搭建hls直播</a></a></p>\n<p>2、 <a href=\"https://blog.csdn.net/lee353086/article/details/78269590\" target=\"_blank\" rel=\"noopener\">海康NVR设备RTSP协议转RTMP协议</a></p>\n"},{"title":"java web应用的http请求改成https","text":"java web应用的http请求改成https 本文通过将简单介绍两种将http请求修改为https的方式。 1、通过使用sun公司提供的keytool工具结合tomcat实现 2、使用阿里云的免费证书结合nginx实现。 使用SUN公司的提供的工具配置证书 SUN公司提供了制作证书的工具keytool。 在JDK 1.4以后的版本中都包含了这一工具，它的位置为&lt;JAVA_HOME&gt;\\bin\\keytool.exe。 生成证书 这里只介绍简单的keytool生成证书的方法，如果想要了解更多关于keytool的知识，请参考 keytool用法总结 1.创建证书,在命令行中输入 1keytool -genkeypair -alias \"test1\" -keyalg \"RSA\" -keystore \"test.keystore\" 功能： 创建一个别名为test1的证书条目，该条目存放在名为test.keystore的密钥库中，若test.keystore密钥库不存在则创建。 参数说明： -genkeypair：生成一对非对称密钥; -alias：指定密钥对的别名，该别名是公开的; -keyalg：指定加密算法，本例中的采用通用的RAS加密算法; -keystore:密钥库的路径及名称，不指定的话，默认在操作系统的用户目录下生成一个”.keystore”的文件 注意： 1.“名字与姓氏”应该是域名，若输成了姓名，和真正运行的时候域名不符，会出问题; 2.再次输入密码，第一次输入的是密钥库(keystore)的密码，第二次输入的是证书条目的密码 3.这里所说的证书库和密钥库是等同的(个人观点) 2.查看证书库 1keytool -list -keystore test.keystore 功能： 查看名为test.keystore的证书库中的证书条目 3.导出到证书文件 1keytool -export -alias test1 -file test.crt -keystore test.keystore 功能： 将名为test.keystore的证书库中别名为test1的证书条目导出到证书文件test.crt中 4.导入证书的信息 1keytool -import -keystore test_cacerts -file test.crt 功能： 将证书文件test.crt导入到名为test_cacerts的证书库中， 5.查看证书信息 1keytool -printcert -file \"test.crt\" 功能：查看证书文件test.crt的信息 执行完上述过程之后，我们会在&lt;JAVA_HOME&gt;\\bin目录下面发现生成了3个文件 修改web程序的web.xml123456789&lt;security-constraint&gt; &lt;web-resource-collection&gt; &lt;web-resource-name&gt;SSL&lt;/web-resource-name&gt; &lt;url-pattern&gt;/*&lt;/url-pattern&gt; &lt;/web-resource-collection&gt; &lt;user-data-constraint&gt; &lt;transport-guarantee&gt;CONFIDENTIAL&lt;/transport-guarantee&gt; &lt;/user-data-constraint&gt; &lt;/security-constraint&gt; url-pattern:可以对系统中访问的路径进行过滤 修改tomcat的conf文件1234567&lt;Connector port=\"72\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" SSLEnabled=\"true\" maxThreads=\"150\" scheme=\"https\" secure=\"true\" clientAuth=\"false\" keystoreFile=\"C:/tomcat/conf/test.keystore\" keystorePass=\"123456\" sslProtocol=\"TLS\" URIEncoding=\"UTF-8\"/&gt; keystoreFile：证书文件的位置 keystorePass: 是keystore的密码（你在生成证书的时候，会有的keystore密码和tomcat主密码） 使用阿里云服务器生成免费证书生成证书基于阿里云服务器生成密钥证书，请参考用阿里云的免费 SSL 证书让网站从 HTTP 换成 HTTPS 。一般如果证书申请时填写的信息正确，审核不超过10min，在审核通过之后我们选择对应的web服务器，不同的服务器的配置都不相同，这里我们使用ngnix服务器。（其他的web服务器可以在官文中查看，每种服务器都给出了基本的配置方法。） 阿里云免费证书只能对一个域名生效，如果涉及到二级域名或是其他域名，则需要申请不同的证书。 配置web服务器1、 在Nginx的安装目录的conf下创建cert目录，并且将下载的全部文件拷贝到cert目录中。生成证书时，如果是系统自动生成会自己带有私钥文件，如果是自己创建的CSR文件，请将对应的私钥文件放到cert目录下并对其重命名建议和.pem证书文件的名称保持一致； 2、 打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件进行修改(以下属性中ssl开头的属性与证书配置有直接关系，其它属性请结合自己的实际情况复制或调整)： 123456789101112131415161718192021222324server &#123; listen 443; server_name abc.test.com; ssl on; root html; index index.html index.htm; ssl_certificate cert/xxx.pem; ssl_certificate_key cert/xxx.key; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / &#123; root html; index index.html index.htm; &#125; location /test&#123; tcp_nodelay on; proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_pass http://www.baidu.com; &#125;&#125; 1、 server_name 为系统监听的访问的服务域名。和阿里云中申请的证书的域名保持一致。 2、ssl_certificate 为证书文件的路径。 3、ssl_certificate_key 为私钥文件的路径。 4、在location中路径结合实际情况进行设置。其中/test则是对https的请求进行了转发操作。如何涉及到二级域名的转发操作，则可以在server下面在增加一个server配置项进行相关的配置。 3、启动 nginx，如果在启动时修改了配置文件则重启nginx即可。 4、通过 https 方式访问您的站点，测试站点证书的安装配置。 使用nginx服务器我们不需要对系统的后台服务器进行其他操作。 其他相关文章1、SSL证书与Https应用部署小结 2、https知识了解","content":"<h1 id=\"java-web应用的http请求改成https\"><a href=\"#java-web应用的http请求改成https\" class=\"headerlink\" title=\"java web应用的http请求改成https\"></a>java web应用的http请求改成https</h1><blockquote>\n<p>本文通过将简单介绍两种将http请求修改为https的方式。</p>\n<p>1、通过使用sun公司提供的keytool工具结合tomcat实现</p>\n<p>2、使用阿里云的免费证书结合nginx实现。</p>\n</blockquote>\n<h2 id=\"使用SUN公司的提供的工具配置证书\"><a href=\"#使用SUN公司的提供的工具配置证书\" class=\"headerlink\" title=\"使用SUN公司的提供的工具配置证书\"></a>使用SUN公司的提供的工具配置证书</h2><blockquote>\n<p>SUN公司提供了制作证书的工具keytool。 在JDK 1.4以后的版本中都包含了这一工具，它的位置为&lt;JAVA_HOME&gt;\\bin\\keytool.exe。</p>\n</blockquote>\n<h3 id=\"生成证书\"><a href=\"#生成证书\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h3><blockquote>\n<p>这里只介绍简单的keytool生成证书的方法，如果想要了解更多关于keytool的知识，请参考 <a href=\"http://ln-ydc.iteye.com/blog/1335213\" target=\"_blank\" rel=\"noopener\"> keytool用法总结</a></p>\n</blockquote>\n<p> 1.创建证书,在命令行中输入</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkeypair -<span class=\"built_in\">alias</span> <span class=\"string\">\"test1\"</span> -keyalg <span class=\"string\">\"RSA\"</span> -keystore <span class=\"string\">\"test.keystore\"</span></span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/https/1.jpg\" alt=\"avatar\"></p>\n<ul>\n<li>功能：</li>\n</ul>\n<blockquote>\n<p> 创建一个别名为test1的证书条目，该条目存放在名为test.keystore的密钥库中，若test.keystore密钥库不存在则创建。</p>\n</blockquote>\n<ul>\n<li>参数说明：</li>\n</ul>\n<blockquote>\n<p>-genkeypair：生成一对非对称密钥;</p>\n<p>-alias：指定密钥对的别名，该别名是公开的;</p>\n<p>-keyalg：指定加密算法，本例中的采用通用的RAS加密算法;</p>\n<p>-keystore:密钥库的路径及名称，不指定的话，默认在操作系统的用户目录下生成一个”.keystore”的文件</p>\n</blockquote>\n<ul>\n<li>注意：</li>\n</ul>\n<blockquote>\n<p>1.“名字与姓氏”应该是域名，若输成了姓名，和真正运行的时候域名不符，会出问题;</p>\n<p>2.再次输入密码，第一次输入的是密钥库(keystore)的密码，第二次输入的是证书条目的密码</p>\n<p>3.这里所说的证书库和密钥库是等同的(个人观点)</p>\n</blockquote>\n<p> 2.查看证书库</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -<span class=\"keyword\">list</span> -keystore <span class=\"keyword\">test</span>.keystore</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/https/2.jpg\" alt=\"avatar\"></p>\n<ul>\n<li>功能：</li>\n</ul>\n<blockquote>\n<p>查看名为test.keystore的证书库中的证书条目</p>\n</blockquote>\n<p> 3.导出到证书文件</p>\n<figure class=\"highlight delphi\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -<span class=\"keyword\">export</span> -<span class=\"keyword\">alias</span> test1 -<span class=\"keyword\">file</span> test.crt -keystore test.keystore</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/https/3.jpg\" alt=\"avatar\"></p>\n<ul>\n<li>功能：</li>\n</ul>\n<blockquote>\n<p> 将名为test.keystore的证书库中别名为test1的证书条目导出到证书文件test.crt中</p>\n</blockquote>\n<p> 4.导入证书的信息</p>\n<figure class=\"highlight elm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title\">keytool</span> -<span class=\"keyword\">import</span> -keystore test_cacerts -file test.crt</span><br></pre></td></tr></table></figure>\n<p> <img src=\"/images/https/4.jpg\" alt=\"img\"></p>\n<ul>\n<li>功能：</li>\n</ul>\n<blockquote>\n<p>将证书文件test.crt导入到名为test_cacerts的证书库中，</p>\n</blockquote>\n<p>5.查看证书信息</p>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -printcert -<span class=\"built_in\">file</span> <span class=\"string\">\"test.crt\"</span></span><br></pre></td></tr></table></figure>\n<p> <img src=\"/images/https/5.jpg\" alt=\"img\"></p>\n<ul>\n<li>功能：查看证书文件test.crt的信息</li>\n</ul>\n<p>执行完上述过程之后，我们会在&lt;JAVA_HOME&gt;\\bin目录下面发现生成了3个文件</p>\n<h3 id=\"修改web程序的web-xml\"><a href=\"#修改web程序的web-xml\" class=\"headerlink\" title=\"修改web程序的web.xml\"></a>修改web程序的web.xml</h3><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">security-constraint</span>&gt;</span> </span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">web-resource-collection</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">web-resource-name</span>&gt;</span>SSL<span class=\"tag\">&lt;/<span class=\"name\">web-resource-name</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/*<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span> </span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;/<span class=\"name\">web-resource-collection</span>&gt;</span>                           </span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;<span class=\"name\">user-data-constraint</span>&gt;</span> </span><br><span class=\"line\">\t\t\t\t  <span class=\"tag\">&lt;<span class=\"name\">transport-guarantee</span>&gt;</span>CONFIDENTIAL<span class=\"tag\">&lt;/<span class=\"name\">transport-guarantee</span>&gt;</span> </span><br><span class=\"line\">\t\t   <span class=\"tag\">&lt;/<span class=\"name\">user-data-constraint</span>&gt;</span> </span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">security-constraint</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>url-pattern:可以对系统中访问的路径进行过滤</li>\n</ul>\n<h3 id=\"修改tomcat的conf文件\"><a href=\"#修改tomcat的conf文件\" class=\"headerlink\" title=\"修改tomcat的conf文件\"></a>修改tomcat的conf文件</h3><figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector <span class=\"attribute\">port</span>=<span class=\"string\">\"72\"</span> <span class=\"attribute\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span>    <span class=\"attribute\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></span><br><span class=\"line\">                <span class=\"attribute\">redirectPort</span>=<span class=\"string\">\"8443\"</span> </span><br><span class=\"line\">\t\t\t   <span class=\"attribute\">SSLEnabled</span>=<span class=\"string\">\"true\"</span>   <span class=\"attribute\">maxThreads</span>=<span class=\"string\">\"150\"</span> </span><br><span class=\"line\">\t\t\t   <span class=\"attribute\">scheme</span>=<span class=\"string\">\"https\"</span> <span class=\"attribute\">secure</span>=<span class=\"string\">\"true\"</span>   <span class=\"attribute\">clientAuth</span>=<span class=\"string\">\"false\"</span></span><br><span class=\"line\">\t\t\t   <span class=\"attribute\">keystoreFile</span>=<span class=\"string\">\"C:/tomcat/conf/test.keystore\"</span>   </span><br><span class=\"line\">\t\t\t   <span class=\"attribute\">keystorePass</span>=<span class=\"string\">\"123456\"</span> <span class=\"attribute\">sslProtocol</span>=<span class=\"string\">\"TLS\"</span></span><br><span class=\"line\">\t\t\t   <span class=\"attribute\">URIEncoding</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>keystoreFile：证书文件的位置</p>\n</li>\n<li><p>keystorePass: 是keystore的密码（你在生成证书的时候，会有的keystore密码和tomcat主密码）</p>\n</li>\n</ul>\n<h2 id=\"使用阿里云服务器生成免费证书\"><a href=\"#使用阿里云服务器生成免费证书\" class=\"headerlink\" title=\"使用阿里云服务器生成免费证书\"></a>使用阿里云服务器生成免费证书</h2><h3 id=\"生成证书-1\"><a href=\"#生成证书-1\" class=\"headerlink\" title=\"生成证书\"></a>生成证书</h3><p>基于阿里云服务器生成密钥证书，请参考<a href=\"https://ninghao.net/blog/4449\" target=\"_blank\" rel=\"noopener\">用阿里云的免费 SSL 证书让网站从 HTTP 换成 HTTPS</a> 。一般如果证书申请时填写的信息正确，审核不超过10min，在审核通过之后我们选择对应的web服务器，不同的服务器的配置都不相同，这里我们使用ngnix服务器。（其他的web服务器可以在官文中查看，每种服务器都给出了基本的配置方法。）</p>\n<blockquote>\n<p>阿里云免费证书只能对一个域名生效，如果涉及到二级域名或是其他域名，则需要申请不同的证书。</p>\n</blockquote>\n<h3 id=\"配置web服务器\"><a href=\"#配置web服务器\" class=\"headerlink\" title=\"配置web服务器\"></a>配置web服务器</h3><p>1、 在Nginx的安装目录的conf下创建cert目录，并且将下载的全部文件拷贝到cert目录中。生成证书时，如果是系统自动生成会自己带有私钥文件，如果是自己创建的CSR文件，请将对应的私钥文件放到cert目录下并对其重命名建议和.pem证书文件的名称保持一致；</p>\n<p>2、 打开 Nginx 安装目录下 conf 目录中的 nginx.conf 文件进行修改(以下属性中ssl开头的属性与证书配置有直接关系，其它属性请结合自己的实际情况复制或调整)：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"section\">server</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">listen</span> <span class=\"number\">443</span>;</span><br><span class=\"line\">    <span class=\"attribute\">server_name</span> abc.test.com;</span><br><span class=\"line\">    <span class=\"attribute\">ssl</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">    <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate</span>   cert/xxx.pem;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_certificate_key</span>  cert/xxx.key;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_session_timeout</span> <span class=\"number\">5m</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_ciphers</span> ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_protocols</span> TLSv1 TLSv1.<span class=\"number\">1</span> TLSv1.<span class=\"number\">2</span>;</span><br><span class=\"line\">    <span class=\"attribute\">ssl_prefer_server_ciphers</span> <span class=\"literal\">on</span>;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> / &#123;</span><br><span class=\"line\">        <span class=\"attribute\">root</span> html;</span><br><span class=\"line\">        <span class=\"attribute\">index</span> index.html index.htm;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"attribute\">location</span> /test&#123;</span><br><span class=\"line\">        <span class=\"attribute\">tcp_nodelay</span>     <span class=\"literal\">on</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> Host            <span class=\"variable\">$host</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Real-IP       <span class=\"variable\">$remote_addr</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">proxy_set_header</span> X-Forwarded-For <span class=\"variable\">$proxy_add_x_forwarded_for</span>;  </span><br><span class=\"line\">        <span class=\"attribute\">proxy_pass</span> http://www.baidu.com;  </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>1、 server_name 为系统监听的访问的服务域名。和阿里云中申请的证书的域名保持一致。</li>\n<li>2、ssl_certificate 为证书文件的路径。</li>\n<li>3、ssl_certificate_key 为私钥文件的路径。</li>\n<li>4、在location中路径结合实际情况进行设置。其中/test则是对https的请求进行了转发操作。如何涉及到二级域名的转发操作，则可以在server下面在增加一个server配置项进行相关的配置。</li>\n</ul>\n</blockquote>\n<p> 3、启动 nginx，如果在启动时修改了配置文件则重启nginx即可。</p>\n<p> 4、通过 https 方式访问您的站点，测试站点证书的安装配置。</p>\n<blockquote>\n<p> 使用nginx服务器我们不需要对系统的后台服务器进行其他操作。</p>\n</blockquote>\n<h2 id=\"其他相关文章\"><a href=\"#其他相关文章\" class=\"headerlink\" title=\"其他相关文章\"></a>其他相关文章</h2><p>1、<a href=\"https://blog.csdn.net/andy1219111/article/details/22716315\" target=\"_blank\" rel=\"noopener\">SSL证书与Https应用部署小结</a></p>\n<p>2、<a href=\"https://blog.csdn.net/andy1219111/article/details/22716315\" target=\"_blank\" rel=\"noopener\">https知识了解</a></p>\n"},{"title":"Tomcat常见配置","text":"当我们进行web项目的开发时，经常使用的web应用服务器便是tomcat。 在实际开发中我们 经常需要修改tomcat的一些配置信息，下面我们来看一下tomcat常用的配置信息是如何修改的。 基本配置信息修改端口信息[tomcat安装路径]\\conf\\conf\\server.xml 中: 123&lt;Connector port=\"80\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" maxHttpHeaderSize=\"65536\" maxPostSize=\"4194304\" URIEncoding=\"UTF-8\"/&gt; 默认的tomcat的端口为8080，可以在此修改对应的端口号。 修改编码方式打开[tomcat安装路径]/conf/server.xml 文件，定义connector时指定编码，例如指定为UTF-8 ，在连接信息后加入URIEncoding=”UTF-8” 12&lt;Connector port=\"80\" protocol=\"HTTP/1.1\" connectionTimeout=\"20000\" redirectPort=\"8443\" URIEncoding=\"UTF-8\"/&gt; 修改tomcat 窗口的名字 打开：[tomcat安装路径]\\bin\\catalina.bat ，然后搜索title找到set TITLE 后就可以设置窗口的名字了。 123456789:doStartshiftif not \"%OS%\" == \"Windows_NT\" goto noTitleif \"%TITLE%\" == \"\" set TITLE=mc-clientset _EXECJAVA=start \"%TITLE%\" %_RUNJAVA%goto gotTitle:noTitleset _EXECJAVA=start %_RUNJAVA%:gotTitle 查看版本信息 打开cmd命令行窗口，然后进入到tomcat安装路径\\bin下面，输入 version.bat,即可查看对应的版本信息 设置tomcat默认启动的jdk1、windows下：修改 [tomcat安装路径]/bin/setclasspath.bat,把对应的%JRE_HOME% , %JAVA_HOME%换成要修改的jdk的路径就可以了 12345rem Set standard command for invoking Java.rem Note that NT requires a window name argument when using start.rem Also note the quoting as JAVA_HOME may contain spaces.set _RUNJAVA=\"%JRE_HOME%\\bin\\java\"set _RUNJDB=\"%JAVA_HOME%\\bin\\jdb\" 修改tomcat内存修改catalina.bat打开[tomcat安装路径]/bin/catalina.bat, 1234:noJuliConfigrem set \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_CONFIG%\"rem JAVA_OPTS=-Xms【初始化内存大小】 -Xmx【可以使用的最大内存】,JAVA_OPTS 这个是，TOMCAT已经定义好的，你只需要设置对应内存大小即可 ， 例如 ：set JAVA_OPTS=\"-Xms512m -Xmx1024m -XX:PermSize=128M -XX:MaxNewSize=256m -XX:MaxPermSize=256m\"set \"JAVA_OPTS=-Xms256m -Xmx1024m\" 修改 startup.bat修改start.bat或start.sh文件也行，因为start文件会调用catalina文件，如： 如果是windows环境，在startup.bat中加入: 1set JAVA_OPTS=-Xms256m -Xmx1024m 一般修改tomcat内存经常采用的是第一种方式，即修改catalina.bat文件。 修改tomcat项目的图标系统读取这个标志的时候先从你的项目的根目录下读看有没有favicon.ico文件，如果有直接显示这个图标，如果没有，则会去webapps/root/下找这个文件，如果这两个地方都没有，则就显示IE图标。修改tomcat 1、打开tomcat目录，进入[tomcat安装路径]\\webapps\\项目名称, 然后找到对应的favicon.ico图标 ，替换成自己的图标修改界面 2、修改web项目对应界面中shortcut icon对应的href属性。 1&lt;link rel=\"shortcut icon\" href=\"favicon.ico\" type=\"image/x-icon\" /&gt; 【说明】 1、rel=”shortcut icon” 即特指浏览器中地址栏左侧显示的图标，一般大小为16x16，后缀名为.icon； 2、通过这种方式可以实现每一个界面的图标都不一样。","content":"<p>当我们进行web项目的开发时，经常使用的web应用服务器便是tomcat。 在实际开发中我们 经常需要修改tomcat的一些配置信息，下面我们来看一下tomcat常用的配置信息是如何修改的。 </p>\n<h1 id=\"基本配置信息\"><a href=\"#基本配置信息\" class=\"headerlink\" title=\"基本配置信息\"></a>基本配置信息</h1><h2 id=\"修改端口信息\"><a href=\"#修改端口信息\" class=\"headerlink\" title=\"修改端口信息\"></a><strong>修改端口信息</strong></h2><p>[tomcat安装路径]\\conf\\conf\\server.xml 中:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector <span class=\"attribute\">port</span>=<span class=\"string\">\"80\"</span> <span class=\"attribute\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span></span><br><span class=\"line\">    <span class=\"attribute\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span></span><br><span class=\"line\">    <span class=\"attribute\">redirectPort</span>=<span class=\"string\">\"8443\"</span>  <span class=\"attribute\">maxHttpHeaderSize</span>=<span class=\"string\">\"65536\"</span> <span class=\"attribute\">maxPostSize</span>=<span class=\"string\">\"4194304\"</span> <span class=\"attribute\">URIEncoding</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p>默认的tomcat的端口为8080，可以在此修改对应的端口号。</p>\n<h2 id=\"修改编码方式\"><a href=\"#修改编码方式\" class=\"headerlink\" title=\"修改编码方式\"></a><strong>修改编码方式</strong></h2><p>打开[tomcat安装路径]/conf/server.xml 文件，定义connector时指定编码，例如指定为UTF-8 ，在连接信息后加入URIEncoding=”UTF-8”</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;Connector <span class=\"attribute\">port</span>=<span class=\"string\">\"80\"</span> <span class=\"attribute\">protocol</span>=<span class=\"string\">\"HTTP/1.1\"</span>  <span class=\"attribute\">connectionTimeout</span>=<span class=\"string\">\"20000\"</span>  </span><br><span class=\"line\">  <span class=\"attribute\">redirectPort</span>=<span class=\"string\">\"8443\"</span> <span class=\"attribute\">URIEncoding</span>=<span class=\"string\">\"UTF-8\"</span>/&gt;</span><br></pre></td></tr></table></figure>\n<p> <strong>修改tomcat 窗口的名字</strong> </p>\n<p>打开：[tomcat安装路径]\\bin\\catalina.bat ，然后搜索title找到set TITLE 后就可以设置窗口的名字了。</p>\n <figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:doStart</span><br><span class=\"line\">shift</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> <span class=\"string\">\"%OS%\"</span> == <span class=\"string\">\"Windows_NT\"</span> goto noTitle</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"string\">\"%TITLE%\"</span> == <span class=\"string\">\"\"</span> <span class=\"builtin-name\">set</span> <span class=\"attribute\">TITLE</span>=mc-client</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">_EXECJAVA</span>=start <span class=\"string\">\"%TITLE%\"</span> %_RUNJAVA%</span><br><span class=\"line\">goto gotTitle</span><br><span class=\"line\">:noTitle</span><br><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">_EXECJAVA</span>=start %_RUNJAVA%</span><br><span class=\"line\">:gotTitle</span><br></pre></td></tr></table></figure>\n<h2 id=\"查看版本信息\"><a href=\"#查看版本信息\" class=\"headerlink\" title=\"查看版本信息\"></a>查看版本信息</h2><p> 打开cmd命令行窗口，然后进入到tomcat安装路径\\bin下面，输入 version.bat,即可查看对应的版本信息 </p>\n<p><img src=\"/images/tomcat/tomcat.png\" alt=\"img\"></p>\n<h2 id=\"设置tomcat默认启动的jdk\"><a href=\"#设置tomcat默认启动的jdk\" class=\"headerlink\" title=\"设置tomcat默认启动的jdk\"></a><strong>设置tomcat默认启动的jdk</strong></h2><p>1、windows下：修改 [tomcat安装路径]/bin/setclasspath.bat,把对应的%JRE_HOME% , %JAVA_HOME%换成要修改的jdk的路径就可以了</p>\n <figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">rem Set standard command for invoking Java.</span></span><br><span class=\"line\"><span class=\"comment\">rem Note that NT requires a window name argument when using start.</span></span><br><span class=\"line\"><span class=\"comment\">rem Also note the quoting as JAVA_HOME may contain spaces.</span></span><br><span class=\"line\"><span class=\"built_in\">set</span> _RUNJAVA=\"<span class=\"variable\">%JRE_HOME%</span>\\bin\\java\"</span><br><span class=\"line\"><span class=\"built_in\">set</span> _RUNJDB=\"<span class=\"variable\">%JAVA_HOME%</span>\\bin\\jdb\"</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改tomcat内存\"><a href=\"#修改tomcat内存\" class=\"headerlink\" title=\"修改tomcat内存\"></a><strong>修改tomcat内存</strong></h2><h3 id=\"修改catalina-bat\"><a href=\"#修改catalina-bat\" class=\"headerlink\" title=\"修改catalina.bat\"></a><strong>修改catalina.bat</strong></h3><p>打开[tomcat安装路径]/bin/catalina.bat,</p>\n <figure class=\"highlight dos\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:noJuliConfig</span><br><span class=\"line\"><span class=\"comment\">rem set \"JAVA_OPTS=%JAVA_OPTS% %LOGGING_CONFIG%\"</span></span><br><span class=\"line\"><span class=\"comment\">rem JAVA_OPTS=-Xms【初始化内存大小】 -Xmx【可以使用的最大内存】,JAVA_OPTS 这个是，TOMCAT已经定义好的，你只需要设置对应内存大小即可 ， 例如 ：set JAVA_OPTS=\"-Xms512m -Xmx1024m -XX:PermSize=128M -XX:MaxNewSize=256m -XX:MaxPermSize=256m\"</span></span><br><span class=\"line\"><span class=\"built_in\">set</span>  \"JAVA_OPTS=-Xms256m -Xmx1024m\"</span><br></pre></td></tr></table></figure>\n<h3 id=\"修改-startup-bat\"><a href=\"#修改-startup-bat\" class=\"headerlink\" title=\"修改 startup.bat\"></a><strong>修改 startup.bat</strong></h3><p>修改start.bat或start.sh文件也行，因为start文件会调用catalina文件，如：<br> 如果是windows环境，在startup.bat中加入:</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">set</span> <span class=\"attribute\">JAVA_OPTS</span>=-Xms256m -Xmx1024m</span><br></pre></td></tr></table></figure>\n<p>  一般修改tomcat内存经常采用的是第一种方式，即修改catalina.bat文件。</p>\n<h2 id=\"修改tomcat项目的图标\"><a href=\"#修改tomcat项目的图标\" class=\"headerlink\" title=\"修改tomcat项目的图标\"></a><strong>修改tomcat项目的图标</strong></h2><p>系统读取这个标志的时候先从你的项目的根目录下读看有没有favicon.ico文件，如果有直接显示这个图标，<br>如果没有，则会去webapps/root/下找这个文件，如果这两个地方都没有，则就显示IE图标。<br>修改tomcat<br> 1、打开tomcat目录，进入[tomcat安装路径]\\webapps\\项目名称, 然后找到对应的favicon.ico图标 ，替换成自己的图标<br>修改界面<br> 2、修改web项目对应界面中shortcut icon对应的href属性。 </p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;link <span class=\"attribute\">rel</span>=<span class=\"string\">\"shortcut icon\"</span> <span class=\"attribute\">href</span>=<span class=\"string\">\"favicon.ico\"</span> <span class=\"attribute\">type</span>=<span class=\"string\">\"image/x-icon\"</span> /&gt;</span><br></pre></td></tr></table></figure>\n<p>【说明】 </p>\n<p> 1、rel=”shortcut icon” 即特指浏览器中地址栏左侧显示的图标，一般大小为16x16，后缀名为.icon；<br> 2、通过这种方式可以实现每一个界面的图标都不一样。</p>\n"},{"title":"使用GitHub+Hexo搭建免费博客","text":"搭建博客创建仓库新建一个名为你的用户名.github.io的仓库，比如说，如果你的github用户名是test，那么你就新建test.github.io的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 http://test.github.io 了，是不是很方便？ 由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。 几个注意的地方： 注册的邮箱一定要验证，否则不会成功； 仓库名字必须是：username.github.io，其中username是你的用户名； 仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟； 创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。 配置SSH key为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。 1$ cd ~/. ssh #检查本机已存在的ssh密钥 如果提示：No such file or directory 说明你是第一次使用git。 1ssh-keygen -t rsa -C \"邮件地址\" 然后点击回车，接下来会提示输入密码，如果不设置密码则直接继续按两次回车即可，如果设置了则会提示再次输入密码确认。最终会生成一个文件在用户目录下，打开用户目录，找到.ssh\\id_rsa.pub文件，记事本打开并复制里面的内容，打开你的github主页，进入个人-&gt; SETTINF -&gt; SSH and GPG keys -&gt; New SSH key，然后把复制的内容到key那里，title随便填，保存。 测试是否成功1$ ssh -T git@github.com # 注意邮箱地址不用改 如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到： Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 看到这个信息说明SSH已配置成功！ 使用hexo写博客hexo简介Hexo是一个基于 Github Pages 的博客发布工具，支持Markdown格式。 官网： http://hexo.iogithub: https://github.com/hexojs/hexo 注意事项安装之前先来说几个注意事项： 很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行； hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导； hexo有2种_config.yml文件，一个是根目录下的全局的_config.yml，一个是各个theme下的； 安装1npm install -g hexo 初始化在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是F:\\hexo，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。创建好文件之后，执行下面命令： 1hexo init hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下： 12345678910.deploy_gitnode_modules #hexo需要的模块，不需要上传githubpubilc #生成的静态页面scaffolds #source #博文md文件themes #主题文件.gitignore #hexo默认生成的.gitignore_config.yml #全局配置文件db.jsonpackage.json #记录hexo需要的包信息 1.hexo帮助把博客发送到github，同时把md文件转换成网页文件。 2.hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。 1hexo g # 生成 执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github。 1hexo s # 启动服务 hexo s是开启本地预览服务，打开浏览器访问 http://localhost:4000 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题: 1.按下Win+R调出命令行窗口，输入netstat -aon|findstr “4000”，找到指定行最后一列的数字（PID），我们这里是xxxx.2.输入tasklist|findstr “xxxx”，发现是javaw.exe占用了4000端口。3.再次输入taskkill /f /t /im javaw.exe结束该进程。 修改主题第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，但是默认主题的样式个人觉得不是很喜欢。可以从Hexo官方主题 找一个自己喜欢的主题。在这里使用的是 ASnippet。 下载之后，把主题放在F:\\hexo\\themes，然后再_config.yml中把修改为: 1theme: snippet 重新发布之后就可以看到新的主题的样子啦。 上传到github如果你一切都配置好了，发布上传很容易，一句hexo d就搞定，当然关键还是你要把所有东西配置好。 首先，ssh key肯定要配置好。 其次，配置_config.yml中有关deploy的部分： 正确写法： 1234deploy: type: git repository: git@github.com:liuxianan/liuxianan.github.io.git branch: master 此时直接执行hexo d的话一般会报如下错误： 1Deployer not found: github 或者 Deployer not found: git 原因是还需要安装一个插件： 1npm install hexo-deployer-git --save 其它命令不确定，部署这个命令一定要用git bash，否则会提示Permission denied (publickey). 打开你的git bash，输入hexo d就会将本次有改动的代码全部提交，没有改动的不会。 常见命令常用hexo命令常见命令 1234567hexo new / hexo n \"postName\" #新建文章hexo new page \"pageName\" #新建页面hexo generate /hexo g #生成静态页面至public目录hexo server / hexo s #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy / hexo d #部署到GitHubhexo help # 查看帮助hexo version #查看Hexo的版本 组合命令： 12hexo s -g #生成并本地预览hexo d -g #生成并上传 写博客可以直接使用命令hexo n &quot;postName&quot;，当然也可以直接在_posts文件夹下面创建.md文章。 博客模板一般为： 123456789---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文 哈，这里推荐一个觉得不错的markdown的编辑器Typora。 扩展功能代码高亮 首先在hexo根目录下面的_config.yml 把代码的自动检测打开。 12345highlight: enable: true line_number: true auto_detect: true tab_replace: 然后再主题的_config.yml 指定代码高亮的样式即可。 1highlightTheme: normal 评论我们可以看到很多博客其实都是可以进行评论的，那么接下来看一下如何在博客中引入评论。这里我们使用的是来必力。 再注册成功之后，在都应的主题的_config.yml中加入如下配置即可： 123livere: enable: true livere_uid: xxxx #这里填写的是在来比力注册之后给的uuid 在引入之后重新发布，这里如果页面底部出现空白不要着急，耐心等待一下，那个是来比力正在加载。 文章加密访问这里使用的博客加密访问的方式为hexo-blog-encrypt。 关于该插件的具体使用的方法可以查看hexo-blog-encrypt官方文档 添加博客访问统计 首先在引入博客首页的copy-right的所在的copyright.ejs中引入js。 1&lt;script async src=\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"&gt;&lt;/script&gt; 注意这里使用的主题是snippet，不同的主题copy-right所在的文件可能不一样。 在copy-right之前加入本站访客数，然后重启即可了。 123456&lt;div class=\"powered-by\"&gt; &lt;i class=\"fa fa-user-md\"&gt;&lt;/i&gt; &lt;span id=\"busuanzi_container_site_uv\"&gt; 本站访客数:&lt;span id=\"busuanzi_value_site_uv\"&gt;&lt;/span&gt; &lt;/span&gt; &lt;/div&gt; 多个分支提交博客创建分支1git branch hexo 更改默认分支在Github的username.github.io仓库上新建一个hexo分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为hexo，save保存。 切换分支并拷贝文件首先把F:/hexo下面的所有文件都复制上，然后再git bash中运行如下命令，切换到hexo分支： 1git checkout hexo 然后把刚刚复制的文件都拷贝的当前文件夹下面。 将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。 可能有人会问，删除了themes目录中的.git不就不能git pull更新主题了吗，很简单，需要更新主题时在另一个地方git clone下来该主题的最新版本，然后将内容拷到当前主题目录即可 提交分支再提交分支之前，记得把本地的库和远程的库建立关联 1git remote add origin git@github.com:xx/xxx.git #具体的仓库地址 执行git add .、git commit -m &#39;back up hexo files&#39;（引号内容可改）、git push origin hexo即可将博客的hexo部署环境提交到GitHub个人仓库的hexo分支。 其他电脑克隆仓库到本地至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单： 将新电脑的生成的ssh key添加到GitHub账户上 在新电脑上克隆username.github.io仓库的hexo分支到本地，此时本地git仓库处于hexo分支 123git init #初始化仓库git remote add origin git@github.com:xx/xxx.git #具体的仓库地址git fetch origin hexo #把分支克隆到本地 切换到hexo目录，执行npm install(由于仓库有一个.gitignore文件，里面默认是忽略掉 node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下) 更新博客依次执行git add .、git commit -m &#39;back up hexo files&#39;（引号内容可改）、git push指令，保证hexo分支版本最新 执行hexo d -g指令（在此之前，有时可能需要执行hexo clean），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！ 注意： 每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先git pull 提交博客​ 按照之前的方法写自己博客， 然后将目录切换下username.github.io下，此时需要安装一下npm install， 最后执行hexo g、hexo s、hexo d等命令即可提交成功 参考博文 使用hexo+github搭建免费个人博客详细教程 Hexo 个性化配置(三) 利用Hexo在多台电脑上提交和更新github pages博客","content":"<h1 id=\"搭建博客\"><a href=\"#搭建博客\" class=\"headerlink\" title=\"搭建博客\"></a>搭建博客</h1><h2 id=\"创建仓库\"><a href=\"#创建仓库\" class=\"headerlink\" title=\"创建仓库\"></a>创建仓库</h2><p>新建一个名为<code>你的用户名.github.io</code>的仓库，比如说，如果你的github用户名是test，那么你就新建<code>test.github.io</code>的仓库（必须是你的用户名，其它名称无效），将来你的网站访问地址就是 <a href=\"http://test.github.io/\" target=\"_blank\" rel=\"noopener\">http://test.github.io</a> 了，是不是很方便？</p>\n<p>由此可见，每一个github账户最多只能创建一个这样可以直接使用域名访问的仓库。</p>\n<p>几个注意的地方：</p>\n<ol>\n<li>注册的邮箱一定要验证，否则不会成功；</li>\n<li>仓库名字必须是：<code>username.github.io</code>，其中<code>username</code>是你的用户名；</li>\n<li>仓库创建成功不会立即生效，需要过一段时间，大概10-30分钟；</li>\n</ol>\n<p>创建成功后，默认会在你这个仓库里生成一些示例页面，以后你的网站所有代码都是放在这个仓库里啦。</p>\n<h2 id=\"配置SSH-key\"><a href=\"#配置SSH-key\" class=\"headerlink\" title=\"配置SSH key\"></a>配置SSH key</h2><p>为什么要配置这个呢？因为你提交代码肯定要拥有你的github权限才可以，但是直接使用用户名和密码太不安全了，所以我们使用ssh key来解决本地和服务器的连接问题。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~/. ssh <span class=\"comment\">#检查本机已存在的ssh密钥</span></span></span><br></pre></td></tr></table></figure>\n<p>如果提示：No such file or directory 说明你是第一次使用git。</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -<span class=\"built_in\">t</span> rsa -C <span class=\"string\">\"邮件地址\"</span></span><br></pre></td></tr></table></figure>\n<p>然后点击回车，接下来会提示输入密码，如果不设置密码则直接继续按两次回车即可，如果设置了则会提示再次输入密码确认。最终会生成一个文件在用户目录下，打开用户目录，找到<code>.ssh\\id_rsa.pub</code>文件，记事本打开并复制里面的内容，打开你的github主页，进入个人-&gt; SETTINF -&gt; SSH and GPG keys -&gt; New SSH key，然后把复制的内容到key那里，title随便填，保存。</p>\n<h2 id=\"测试是否成功\"><a href=\"#测试是否成功\" class=\"headerlink\" title=\"测试是否成功\"></a>测试是否成功</h2><figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$ </span>ssh -T git<span class=\"variable\">@github</span>.com <span class=\"comment\"># 注意邮箱地址不用改</span></span><br></pre></td></tr></table></figure>\n<p>如果提示<code>Are you sure you want to continue connecting (yes/no)?</code>，输入yes，然后会看到：</p>\n<blockquote>\n<p>Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access.</p>\n</blockquote>\n<p>看到这个信息说明SSH已配置成功！</p>\n<h1 id=\"使用hexo写博客\"><a href=\"#使用hexo写博客\" class=\"headerlink\" title=\"使用hexo写博客\"></a>使用hexo写博客</h1><h2 id=\"hexo简介\"><a href=\"#hexo简介\" class=\"headerlink\" title=\"hexo简介\"></a>hexo简介</h2><p>Hexo是一个基于 Github Pages 的博客发布工具，支持Markdown格式。</p>\n<p>官网： <a href=\"http://hexo.io/\" target=\"_blank\" rel=\"noopener\">http://hexo.io</a><br>github: <a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">https://github.com/hexojs/hexo</a></p>\n<h2 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h2><p>安装之前先来说几个注意事项：</p>\n<ol>\n<li>很多命令既可以用Windows的cmd来完成，也可以使用git bash来完成，但是部分命令会有一些问题，为避免不必要的问题，建议全部使用git bash来执行；</li>\n<li>hexo不同版本差别比较大，网上很多文章的配置信息都是基于2.x的，所以注意不要被误导；</li>\n<li>hexo有2种<code>_config.yml</code>文件，一个是根目录下的全局的<code>_config.yml</code>，一个是各个<code>theme</code>下的；</li>\n</ol>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight cmake\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> -g hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h2><p>在电脑的某个地方新建一个名为hexo的文件夹（名字可以随便取），比如我的是<code>F:\\hexo</code>，由于这个文件夹将来就作为你存放代码的地方，所以最好不要随便放。创建好文件之后，执行下面命令：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo init</span></span><br></pre></td></tr></table></figure>\n<p>hexo会自动下载一些文件到这个目录，包括node_modules，目录结构如下：</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.deploy_git</span><br><span class=\"line\">node_modules  <span class=\"comment\">#hexo需要的模块，不需要上传github</span></span><br><span class=\"line\">pubilc   <span class=\"comment\">#生成的静态页面</span></span><br><span class=\"line\"><span class=\"keyword\">scaffolds </span> <span class=\"comment\">#</span></span><br><span class=\"line\">source     <span class=\"comment\">#博文md文件</span></span><br><span class=\"line\">themes     <span class=\"comment\">#主题文件</span></span><br><span class=\"line\">.gitignore <span class=\"comment\">#hexo默认生成的.gitignore</span></span><br><span class=\"line\">_<span class=\"built_in\">config</span>.yml   <span class=\"comment\">#全局配置文件</span></span><br><span class=\"line\">db.<span class=\"keyword\">json</span></span><br><span class=\"line\"><span class=\"keyword\">package.json </span>  <span class=\"comment\">#记录hexo需要的包信息</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>1.hexo帮助把博客发送到github，同时把md文件转换成网页文件。 </p>\n<p>2.hexo目录下的文件和github上的文件是不同的，public文件夹的文件通过hexo d 上传到github去了，其他的文件则留在本地目录下。 </p>\n</blockquote>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> g <span class=\"comment\"># 生成</span></span><br></pre></td></tr></table></figure>\n<p>执行以上命令之后，hexo就会在public文件夹生成相关html文件，这些文件将来都是要提交到github。</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> s <span class=\"comment\"># 启动服务</span></span><br></pre></td></tr></table></figure>\n<p><code>hexo s</code>是开启本地预览服务，打开浏览器访问 <a href=\"http://localhost:4000/\" target=\"_blank\" rel=\"noopener\">http://localhost:4000</a> 即可看到内容，很多人会碰到浏览器一直在转圈但是就是加载不出来的问题，一般情况下是因为端口占用的缘故，因为4000这个端口太常见了，解决端口冲突问题:</p>\n<blockquote>\n<p>1.按下Win+R调出命令行窗口，输入netstat -aon|findstr “4000”，找到指定行最后一列的数字（PID），我们这里是xxxx.<br>2.输入tasklist|findstr “xxxx”，发现是javaw.exe占用了4000端口。<br>3.再次输入taskkill /f /t /im javaw.exe结束该进程。</p>\n</blockquote>\n<h2 id=\"修改主题\"><a href=\"#修改主题\" class=\"headerlink\" title=\"修改主题\"></a>修改主题</h2><p>第一次初始化的时候hexo已经帮我们写了一篇名为 Hello World 的文章，但是默认主题的样式个人觉得不是很喜欢。可以从<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"noopener\">Hexo官方主题</a>  找一个自己喜欢的主题。在这里使用的是  <a href=\"https://github.com/shenliyang/hexo-theme-snippet\" target=\"_blank\" rel=\"noopener\">ASnippet</a>。</p>\n<p>下载之后，把主题放在F:\\hexo\\themes，然后再_config.yml中把修改为:</p>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">theme:</span> snippet</span><br></pre></td></tr></table></figure>\n<p>重新发布之后就可以看到新的主题的样子啦。</p>\n<p><img src=\"/images/blog-img.png\" alt=\"avatar\"></p>\n<h2 id=\"上传到github\"><a href=\"#上传到github\" class=\"headerlink\" title=\"上传到github\"></a>上传到github</h2><p>如果你一切都配置好了，发布上传很容易，一句<code>hexo d</code>就搞定，当然关键还是你要把所有东西配置好。</p>\n<p>首先，<code>ssh key</code>肯定要配置好。</p>\n<p>其次，配置<code>_config.yml</code>中有关deploy的部分：</p>\n<p>正确写法：</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">deploy</span>:</span><br><span class=\"line\">  <span class=\"attribute\">type</span>: git</span><br><span class=\"line\">  <span class=\"attribute\">repository</span>: git<span class=\"variable\">@github</span>.<span class=\"attribute\">com</span>:liuxianan/liuxianan.github.io.git</span><br><span class=\"line\">  <span class=\"attribute\">branch</span>: master</span><br></pre></td></tr></table></figure>\n<p>此时直接执行<code>hexo d</code>的话一般会报如下错误：</p>\n<figure class=\"highlight ada\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Deployer <span class=\"keyword\">not</span> found: github 或者 Deployer <span class=\"keyword\">not</span> found: git</span><br></pre></td></tr></table></figure>\n<p>原因是还需要安装一个插件：</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"keyword\">install</span> hexo-deployer-git <span class=\"comment\">--save</span></span><br></pre></td></tr></table></figure>\n<p>其它命令不确定，部署这个命令一定要用git bash，否则会提示<code>Permission denied (publickey).</code></p>\n<p>打开你的git bash，输入<code>hexo d</code>就会将本次有改动的代码全部提交，没有改动的不会。</p>\n<h2 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h2><h2 id=\"常用hexo命令\"><a href=\"#常用hexo命令\" class=\"headerlink\" title=\"常用hexo命令\"></a>常用hexo命令</h2><p>常见命令</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"type\"></span>/  hexo n <span class=\"string\">\"postName\"</span> <span class=\"meta\">#新建文章</span></span><br><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"type\">page</span> <span class=\"string\">\"pageName\"</span> <span class=\"meta\">#新建页面</span></span><br><span class=\"line\">hexo generate /hexo g <span class=\"meta\">#生成静态页面至public目录</span></span><br><span class=\"line\">hexo server / hexo s  <span class=\"meta\">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span></span><br><span class=\"line\">hexo deploy / hexo d <span class=\"meta\">#部署到GitHub</span></span><br><span class=\"line\">hexo help  <span class=\"meta\"># 查看帮助</span></span><br><span class=\"line\">hexo version  <span class=\"meta\">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>\n<p>组合命令：</p>\n<figure class=\"highlight nginx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">hexo</span> s -g <span class=\"comment\">#生成并本地预览</span></span><br><span class=\"line\">hexo d -g <span class=\"comment\">#生成并上传</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"写博客\"><a href=\"#写博客\" class=\"headerlink\" title=\"写博客\"></a>写博客</h2><p>可以直接使用命令<code>hexo n &quot;postName&quot;</code>，当然也可以直接在_posts文件夹下面创建.md文章。</p>\n<p>博客模板一般为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">postName</span> <span class=\"comment\">#文章页面上的显示名称，一般是中文</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2013</span><span class=\"bullet\">-12</span><span class=\"bullet\">-02</span> <span class=\"number\">15</span><span class=\"string\">:30:16</span> <span class=\"comment\">#文章生成时间，一般不改，当然也可以任意修改</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">默认分类</span> <span class=\"comment\">#分类</span></span><br><span class=\"line\"><span class=\"attr\">tags:</span> <span class=\"string\">[tag1,tag2,tag3]</span> <span class=\"comment\">#文章标签，可空，多标签请用格式，注意:后面有个空格</span></span><br><span class=\"line\"><span class=\"attr\">description:</span> <span class=\"string\">附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面</span></span><br><span class=\"line\"><span class=\"meta\">---</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">以下是正文</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>哈，这里推荐一个觉得不错的markdown的编辑器Typora。</p>\n</blockquote>\n<h1 id=\"扩展功能\"><a href=\"#扩展功能\" class=\"headerlink\" title=\"扩展功能\"></a>扩展功能</h1><h2 id=\"代码高亮\"><a href=\"#代码高亮\" class=\"headerlink\" title=\"代码高亮\"></a>代码高亮</h2><ul>\n<li>首先在hexo根目录下面的_config.yml  把代码的自动检测打开。</li>\n</ul>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">highlight:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  line_number:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  auto_detect:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  tab_replace:</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>然后再主题的_config.yml 指定代码高亮的样式即可。</li>\n</ul>\n<figure class=\"highlight avrasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">highlightTheme:</span> normal</span><br></pre></td></tr></table></figure>\n<h2 id=\"评论\"><a href=\"#评论\" class=\"headerlink\" title=\"评论\"></a>评论</h2><p>我们可以看到很多博客其实都是可以进行评论的，那么接下来看一下如何在博客中引入评论。这里我们使用的是<a href=\"https://livere.com/\" target=\"_blank\" rel=\"noopener\">来必力</a>。</p>\n<p>再注册成功之后，在都应的主题的_config.yml中加入如下配置即可：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">livere:</span></span><br><span class=\"line\"><span class=\"attr\">  enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">  livere_uid:</span> <span class=\"string\">xxxx</span>  <span class=\"comment\">#这里填写的是在来比力注册之后给的uuid</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> 在引入之后重新发布，这里如果页面底部出现空白不要着急，耐心等待一下，那个是来比力正在加载。</p>\n</blockquote>\n<h2 id=\"文章加密访问\"><a href=\"#文章加密访问\" class=\"headerlink\" title=\"文章加密访问\"></a>文章加密访问</h2><p>这里使用的博客加密访问的方式为<code>hexo-blog-encrypt</code>。  关于该插件的具体使用的方法可以查看<a href=\"https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md\" target=\"_blank\" rel=\"noopener\"><code>hexo-blog-encrypt</code>官方文档</a></p>\n<h2 id=\"添加博客访问统计\"><a href=\"#添加博客访问统计\" class=\"headerlink\" title=\"添加博客访问统计\"></a>添加博客访问统计</h2><ul>\n<li>首先在引入博客首页的copy-right的所在的copyright.ejs中引入js。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">\"https://dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意这里使用的主题是snippet，不同的主题copy-right所在的文件可能不一样。</p>\n</blockquote>\n<ul>\n<li>在copy-right之前加入本站访客数，然后重启即可了。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"powered-by\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fa fa-user-md\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_container_site_uv\"</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t\t本站访客数:<span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"busuanzi_value_site_uv\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"多个分支提交博客\"><a href=\"#多个分支提交博客\" class=\"headerlink\" title=\"多个分支提交博客\"></a>多个分支提交博客</h1><h2 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">branch </span> hexo</span><br></pre></td></tr></table></figure>\n<h2 id=\"更改默认分支\"><a href=\"#更改默认分支\" class=\"headerlink\" title=\"更改默认分支\"></a>更改默认分支</h2><p>在Github的username.github.io仓库上新建一个hexo分支，并切换到该分支，并在该仓库-&gt;Settings-&gt;Branches-&gt;Default branch中将默认分支设为hexo，save保存。</p>\n<h2 id=\"切换分支并拷贝文件\"><a href=\"#切换分支并拷贝文件\" class=\"headerlink\" title=\"切换分支并拷贝文件\"></a>切换分支并拷贝文件</h2><p>首先把F:/hexo下面的所有文件都复制上，然后再git bash中运行如下命令，切换到hexo分支：</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git checkout hexo</span></span><br></pre></td></tr></table></figure>\n<p>然后把刚刚复制的文件都拷贝的当前文件夹下面。</p>\n<blockquote>\n<ul>\n<li>将themes目录以内中的主题的.git目录删除（如果有），因为一个git仓库中不能包含另一个git仓库，提交主题文件夹会失败。</li>\n<li>可能有人会问，删除了themes目录中的.git不就不能<code>git pull</code>更新主题了吗，很简单，需要更新主题时在另一个地方<code>git clone</code>下来该主题的最新版本，然后将内容拷到当前主题目录即可</li>\n</ul>\n</blockquote>\n<h2 id=\"提交分支\"><a href=\"#提交分支\" class=\"headerlink\" title=\"提交分支\"></a>提交分支</h2><p>再提交分支之前，记得把本地的库和远程的库建立关联</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github<span class=\"selector-class\">.com</span>:xx/xxx<span class=\"selector-class\">.git</span>   #具体的仓库地址</span><br></pre></td></tr></table></figure>\n<p>执行<code>git add .</code>、<code>git commit -m &#39;back up hexo files&#39;</code>（引号内容可改）、<code>git push origin hexo</code>即可将博客的hexo部署环境提交到GitHub个人仓库的hexo分支。 </p>\n<h2 id=\"其他电脑\"><a href=\"#其他电脑\" class=\"headerlink\" title=\"其他电脑\"></a>其他电脑</h2><h3 id=\"克隆仓库到本地\"><a href=\"#克隆仓库到本地\" class=\"headerlink\" title=\"克隆仓库到本地\"></a>克隆仓库到本地</h3><p>至此，你的博客已经可以在其他电脑上进行同步的维护和更新了，方法很简单：</p>\n<ul>\n<li><p>将新电脑的生成的ssh key添加到GitHub账户上</p>\n</li>\n<li><p>在新电脑上克隆username.github.io仓库的hexo分支到本地，此时本地git仓库处于hexo分支</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init   <span class=\"comment\">#初始化仓库</span></span><br><span class=\"line\">git remote <span class=\"keyword\">add</span><span class=\"bash\"> origin git@github.com:xx/xxx.git   <span class=\"comment\">#具体的仓库地址</span></span></span><br><span class=\"line\"><span class=\"bash\">git fetch origin hexo   <span class=\"comment\">#把分支克隆到本地</span></span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ul>\n<li>切换到hexo目录，执行<code>npm install</code>(由于仓库有一个.gitignore文件，里面默认是忽略掉  node_modules文件夹的，也就是说仓库的hexo分支并没有存储该目录[也不需要]，所以需要install下)</li>\n</ul>\n<h3 id=\"更新博客\"><a href=\"#更新博客\" class=\"headerlink\" title=\"更新博客\"></a>更新博客</h3><p>依次执行<code>git add .</code>、<code>git commit -m &#39;back up hexo files&#39;</code>（引号内容可改）、<code>git push</code>指令，保证hexo分支版本最新</p>\n<p>执行<code>hexo d -g</code>指令（在此之前，有时可能需要执行<code>hexo clean</code>），完成后就会发现，最新改动已经更新到master分支了，两个分支互不干扰！</p>\n<blockquote>\n<p><strong> 注意： 每次换电脑进行博客更新时，不管上次在其他电脑有没有更新，最好先<code>git pull</code></strong> </p>\n</blockquote>\n<h3 id=\"提交博客\"><a href=\"#提交博客\" class=\"headerlink\" title=\"提交博客\"></a>提交博客</h3><p>​      按照之前的方法写自己博客， 然后将目录切换下username.github.io下，此时需要安装一下<code>npm install</code>， 最后执行<code>hexo g</code>、<code>hexo s</code>、<code>hexo d</code>等命令即可提交成功 </p>\n<h1 id=\"参考博文\"><a href=\"#参考博文\" class=\"headerlink\" title=\"参考博文\"></a>参考博文</h1><ul>\n<li><a href=\"https://www.cnblogs.com/liuxianan/p/build-blog-website-by-hexo-github.html\" target=\"_blank\" rel=\"noopener\">使用hexo+github搭建免费个人博客详细教程</a></li>\n<li><a href=\"https://blog.csdn.net/kunkun5love/article/details/79403176\" target=\"_blank\" rel=\"noopener\">Hexo 个性化配置(三)</a></li>\n<li><a href=\"https://www.jianshu.com/p/0b1fccce74e0\" target=\"_blank\" rel=\"noopener\">利用Hexo在多台电脑上提交和更新github pages博客</a></li>\n</ul>\n"},{"title":"FFMPEG简介","text":"功能说明Fmpeg是用于录制、转换和流化音频和视频的完整解决方案， 包括 libavcodec ，一套领先的音/视频编解码类库。FFmpeg 在Linux上开发，当可以在大多数操作系统下编译，包括Windows。 Note FFmpeg对GCC的依赖很强，所以就算是在Windows上， 用VC编译FFmpeg也不是一件轻松的事情。请尽量使用 GCC来编译FFmpeg，比较事半功倍。 包组成结构FFmpeg主要由一下几个部分组成： libavcodec：一个包含了所有FFmpeg音视频编解码器的库。为了保证最优性能和高可复用性,大多数编解码器从头开发的。 libavformat： 一个包含了所有的普通音视格式的解析器和 产生器的库。 三个实例程序，这三个实例较为复杂，基本可以作为API使用手册： ffmpeg：命令行的视频格式转换程序。ffplay：视频播放程序。（需要SDL支持）ffserver：多媒体服务器 下载使用下载地址官网地址：http://ffmpeg.org/ git地址： https://github.com/FFmpeg/FFmpeg ffmpeg命令参数介绍 基本格式 -formats 输出所有可用格式 -f fmt 指定格式(音频或视频格式) -i filename 指定输入文件名，在linux下当然也能指定:0.0(屏幕录制)或摄像头 -y 覆盖已有文件 -t duration 记录时长为t -fs limit_size 设置文件大小上限 -ss time_off 从指定的时间(s)开始， [-]hh:mm:ss[.xxx]的格式也支持 -itsoffset time_off 设置时间偏移(s)，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持 -title string 标题 -timestamp time 时间戳 -author string 作者 -copyright string 版权信息 -comment string 评论 -album string album名 -v verbose 与log相关的 -target type 设置目标文件类型(“vcd”, “svcd”, “dvd”, “dv”, “dv50”, “pal-vcd”, “ntsc-svcd”, …) -dframes number 设置要记录的帧数 常用命令音频转换 ffmpeg -i my_audio.wav my_audio.mp3 视频转换 ffmpeg -i my_video.mpeg -s 500×500 my_video.flv 从视频中截取图片 分离视频音频流 ffmpeg -i input_file -vcodec copy -an output_file_video //分离视频流 ffmpeg -i input_file -acodec copy -vn output_file_audio //分离音频流 视频解复用 ffmpeg –i test.mp4 –vcodec copy –an –f m4v test.264``ffmpeg –i test.avi –vcodec copy –an –f m4v test.264 视频转码 ffmpeg –i test.mp4 –vcodec h264 –s 352*278 –an –f m4v test.264 //转码为码流原始文件ffmpeg –i test.mp4 –vcodec h264 –bf 0 –g 25 –s 352*278 –an –f m4v test.264 //转码为码流原始文件 ffmpeg –i test.avi -vcodec mpeg4 –vtag xvid –qsame test_xvid.avi //转码为封装文件//-bf B帧数目控制，-g 关键帧间隔控制，-s 分辨率控制 视频封装 ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy output_file 视频剪切 ffmpeg –i test.avi –r 1 –f image2 image-%3d.jpeg //提取图片 ffmpeg -ss 0:1:30 -t 0:0:20 -i input.avi -vcodec copy -acodec copy output.avi //剪切视频//-r 提取图像的频率，-ss 开始时间，-t 持续时间 视频录制 ffmpeg –i rtsp://192.168.3.205:5555/test –vcodec copy out.avi 常见错误相关文章1.ffmpeg常用参数一览表","content":"<h2 id=\"功能说明\"><a href=\"#功能说明\" class=\"headerlink\" title=\"功能说明\"></a>功能说明</h2><p>Fmpeg是用于录制、转换和流化音频和视频的完整解决方案， 包括 libavcodec ，一套领先的音/视频编解码类库。FFmpeg 在Linux上开发，当可以在大多数操作系统下编译，包括Windows。</p>\n<p>Note</p>\n<ul>\n<li>FFmpeg对GCC的依赖很强，所以就算是在Windows上， 用VC编译FFmpeg也不是一件轻松的事情。请尽量使用 GCC来编译FFmpeg，比较事半功倍。</li>\n</ul>\n<h2 id=\"包组成结构\"><a href=\"#包组成结构\" class=\"headerlink\" title=\"包组成结构\"></a>包组成结构</h2><p>FFmpeg主要由一下几个部分组成：</p>\n<blockquote>\n<ul>\n<li><p>libavcodec：一个包含了所有FFmpeg音视频编解码器的库。为了保证最优性能和高可复用性,大多数编解码器从头开发的。</p>\n</li>\n<li><p>libavformat： 一个包含了所有的普通音视格式的解析器和 产生器的库。</p>\n</li>\n<li><ul>\n<li><p>三个实例程序，这三个实例较为复杂，基本可以作为API使用手册：</p>\n<p>ffmpeg：命令行的视频格式转换程序。ffplay：视频播放程序。（需要SDL支持）ffserver：多媒体服务器</p>\n</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<h2 id=\"下载使用\"><a href=\"#下载使用\" class=\"headerlink\" title=\"下载使用\"></a>下载使用</h2><h3 id=\"下载地址\"><a href=\"#下载地址\" class=\"headerlink\" title=\"下载地址\"></a>下载地址</h3><p>官网地址：<a href=\"http://ffmpeg.org/\" target=\"_blank\" rel=\"noopener\">http://ffmpeg.org/</a></p>\n<p>git地址： <a href=\"https://github.com/FFmpeg/FFmpeg\" target=\"_blank\" rel=\"noopener\">https://github.com/FFmpeg/FFmpeg</a></p>\n<h2 id=\"ffmpeg命令\"><a href=\"#ffmpeg命令\" class=\"headerlink\" title=\"ffmpeg命令\"></a>ffmpeg命令</h2><h3 id=\"参数介绍\"><a href=\"#参数介绍\" class=\"headerlink\" title=\"参数介绍\"></a>参数介绍</h3><table>\n<thead>\n<tr>\n<th>基本格式</th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>-formats</td>\n<td>输出所有可用格式</td>\n<td></td>\n</tr>\n<tr>\n<td>-f fmt</td>\n<td>指定格式(音频或视频格式)</td>\n<td></td>\n</tr>\n<tr>\n<td>-i filename</td>\n<td>指定输入文件名，在linux下当然也能指定:0.0(屏幕录制)或摄像头</td>\n<td></td>\n</tr>\n<tr>\n<td>-y</td>\n<td>覆盖已有文件</td>\n<td></td>\n</tr>\n<tr>\n<td>-t duration</td>\n<td>记录时长为t</td>\n<td></td>\n</tr>\n<tr>\n<td>-fs limit_size</td>\n<td>设置文件大小上限</td>\n<td></td>\n</tr>\n<tr>\n<td>-ss time_off</td>\n<td>从指定的时间(s)开始， [-]hh:mm:ss[.xxx]的格式也支持</td>\n<td></td>\n</tr>\n<tr>\n<td>-itsoffset time_off</td>\n<td>设置时间偏移(s)，该选项影响所有后面的输入文件。该偏移被加到输入文件的时戳，定义一个正偏移意味着相应的流被延迟了 offset秒。 [-]hh:mm:ss[.xxx]的格式也支持</td>\n<td></td>\n</tr>\n<tr>\n<td>-title string</td>\n<td>标题</td>\n<td></td>\n</tr>\n<tr>\n<td>-timestamp time</td>\n<td>时间戳</td>\n<td></td>\n</tr>\n<tr>\n<td>-author string</td>\n<td>作者</td>\n<td></td>\n</tr>\n<tr>\n<td>-copyright string</td>\n<td>版权信息</td>\n<td></td>\n</tr>\n<tr>\n<td>-comment string</td>\n<td>评论</td>\n<td></td>\n</tr>\n<tr>\n<td>-album string</td>\n<td>album名</td>\n<td></td>\n</tr>\n<tr>\n<td>-v verbose</td>\n<td>与log相关的</td>\n<td></td>\n</tr>\n<tr>\n<td>-target type</td>\n<td>设置目标文件类型(“vcd”, “svcd”, “dvd”, “dv”, “dv50”, “pal-vcd”, “ntsc-svcd”, …)</td>\n<td></td>\n</tr>\n<tr>\n<td>-dframes number</td>\n<td>设置要记录的帧数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><p><strong>音频转换</strong></p>\n<pre><code>ffmpeg -i my_audio.wav  my_audio.mp3\n</code></pre><p><strong>视频转换</strong></p>\n<pre><code>ffmpeg -i my_video.mpeg -s 500×500 my_video.flv\n</code></pre><p><strong>从视频中截取图片</strong>    </p>\n<p><strong>分离视频音频流</strong></p>\n<pre><code>ffmpeg -i input_file -vcodec copy -an output_file_video　　//分离视频流\nffmpeg -i input_file -acodec copy -vn output_file_audio　　//分离音频流\n</code></pre><p><strong>视频解复用</strong></p>\n<pre><code>ffmpeg –i test.mp4 –vcodec copy –an –f m4v test.264``ffmpeg –i test.avi –vcodec copy –an –f m4v test.264\n</code></pre><p><strong>视频转码</strong></p>\n<pre><code>ffmpeg –i test.mp4 –vcodec h264 –s 352*278 –an –f m4v test.264              //转码为码流原始文件ffmpeg –i test.mp4 –vcodec h264 –bf 0 –g 25 –s 352*278 –an –f m4v test.264  //转码为码流原始文件\nffmpeg –i test.avi -vcodec mpeg4 –vtag xvid –qsame test_xvid.avi            //转码为封装文件//-bf B帧数目控制，-g 关键帧间隔控制，-s 分辨率控制\n</code></pre><p><strong>视频封装</strong></p>\n<pre><code>ffmpeg –i video_file –i audio_file –vcodec copy –acodec copy output_file\n</code></pre><p><strong>视频剪切</strong></p>\n<pre><code>ffmpeg –i test.avi –r 1 –f image2 image-%3d.jpeg        //提取图片\nffmpeg -ss 0:1:30 -t 0:0:20 -i input.avi -vcodec copy -acodec copy output.avi    //剪切视频//-r 提取图像的频率，-ss 开始时间，-t 持续时间\n</code></pre><p><strong>视频录制</strong></p>\n<pre><code>ffmpeg –i rtsp://192.168.3.205:5555/test –vcodec copy out.avi\n</code></pre><h3 id=\"常见错误\"><a href=\"#常见错误\" class=\"headerlink\" title=\"常见错误\"></a>常见错误</h3><h2 id=\"相关文章\"><a href=\"#相关文章\" class=\"headerlink\" title=\"相关文章\"></a>相关文章</h2><p>1.<a href=\"https://blog.csdn.net/maopig/article/details/6610257\" target=\"_blank\" rel=\"noopener\">ffmpeg常用参数一览表</a></p>\n"},{"title":"Stream API","text":"Stream API Java8中有两大最为重要的改变。第一个是 Lambda 表达式 ;另外一 个则是 Stream API(java.util.stream.*) 。Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对 集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数 据库查询。也可以使用 Stream API 来并行执行操作。简而言之， Stream API 供了一种高效且易于使用的处理数据的方式。 一、什么是 Stream流(Stream) 到底是什么呢? 是数据渠道，用于操作数据源(集合、数组等)所生成的元素序列。集合讲的是数据，流讲的是计算!注意: Stream自己不会存储元素。 Stream不会改变原对象。相反，他们会返回一个持有结果的新Stream。 Stream操作是延迟执行。这意味着他们会等到需要结果的时候才执行。 二、Stream操作的三个步骤2.1 创建stream 一个数据源（如：集合或数组），获取一个流 2.2 中间操作 一个中间操作链，对数据源的数据进行处理。 2.3 终止操作 一个终止操作，执行中间操作链，并产生结果。 三、创建Stream的四种方式3.1 由Collection创建流Java8 中的 Collection 接口被扩展， 供了两个获取流的方法: default Stream&lt; E&gt; stream() : 返回一个顺序流 default Stream&lt; E&gt; parallelStream() : 返回一个并行流 案例： 123List&lt;Employee&gt; list = new ArrayList&lt;&gt;();Stream&lt;Employee&gt; stream = list.stream();Stream&lt;Employee&gt; parallelStream = list.parallelStream(); 3.2 由数组创建流通过 Arrays中的静态方法 stream() 创建数据源 。static &lt; T&gt; Stream&lt; T&gt; stream(T[] array): 返回一个流 重载形式，能够处理对应基本类型的数组: public static IntStream stream(int[] array) public static LongStream stream(long[] array) public static DoubleStream stream(double[] array) 案例： 12Integer[] num = new Integer[23];Stream&lt;Integer&gt; stream1 = Arrays.stream(num);12 3.3 由值创建流可以使用静态方法 Stream.of(), 通过显示值 创建一个流。它可以接收任意数量的参数。public static&lt; T&gt; Stream&lt; T&gt; of(T… values) : 返回一个流 案例： 1Stream&lt;Integer&gt; stream2 = Stream.of(1, 5, 7); 3.4 由函数创建流可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。 迭代：public static&lt; T&gt; Stream&lt; T&gt; iterate(final T seed, final UnaryOperator&lt; T&gt; f) 生成：public static&lt; T&gt; Stream&lt; T&gt; generate(Supplier&lt; T&gt; s) 案例： 123456789// 迭代Stream&lt;Integer&gt; stream3 = Stream.iterate(0, (x) -&gt; x + 2).limit(2);stream3.forEach(System.out::println);System.out.println(\"-------------\");// 生成Stream&lt;Double&gt; stream4 = Stream.generate(Math::random).limit(4);stream4.forEach(System.out::println);123456789 执行结果： 123456702-------------0.80093413282642290.33937273167260450.164029418307976570.189839641538307121234567 四、Stream的中间操作多个 中间操作 可以连接起来形成一个流水线，除非流水 线上触发终止操作，否则中间操作不会执行任何的处理! 而在终止操作时一次性全部处理，称为“惰性求值”。 4.1 筛选与切片 方法 描述 filter(Predicate p) 接收 Lambda ， 从流中排除某些元素。 distinct() 筛选，通过流所生成元素的 hashCode() 和 equals() 去 除重复元素 limit(long maxSize) 截断流，使其元素不超过给定数量 skip(long n) 跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素 不足 n 个，则返回一个空流。与 limit(n) 互补 案例： 定义一个集合： Employee 重写 hashcode ， equals — 去重时使用 12345678List&lt;Employee&gt; emps = Arrays.asList( new Employee(101, \"林青霞\", 28, 9889.99), new Employee(102, \"东方不败\", 29, 4329.85), new Employee(103, \"周星驰\", 40, 1233.88), new Employee(104, \"大圣\", 500, 5000.44), new Employee(105, \"张无忌\", 15, 3000.09), new Employee(102, \"东方不败\", 29, 4329.85) );12345678 执行操作： 1.内部迭代 - 迭代操作由Stream API 完成操作 12345678910111213@Testpublic void test2() &#123; // 中间操作不会做任何处理 Stream&lt;Employee&gt; stream = emps.stream() .filter((e) -&gt; &#123; System.out.println(\"惰性求值\"); return e.getAge() &lt; 30; &#125;); System.out.println(\"--------------------\"); // 终止操作，一次性执行全部功能， 称为 \"惰性求值\" stream.forEach(System.out::println);&#125;12345678910111213 执行结果： 1234567891011--------------------惰性求值Employee&#123;id=101, name='林青霞', age=28, salary=9889.99, status=null&#125;惰性求值Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;惰性求值惰性求值惰性求值Employee&#123;id=105, name='张无忌', age=15, salary=3000.09, status=null&#125;惰性求值Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;1234567891011 2.外部迭代 12345678@Testpublic void test3() &#123; Iterator&lt;Employee&gt; iterator = emps.iterator(); while (iterator.hasNext()) &#123; System.out.println(iterator.next()); &#125; &#125;12345678 执行结果： 123456Employee&#123;id=101, name='林青霞', age=28, salary=9889.99, status=null&#125;Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;Employee&#123;id=103, name='周星驰', age=40, salary=1233.88, status=null&#125;Employee&#123;id=104, name='大圣', age=500, salary=5000.44, status=null&#125;Employee&#123;id=105, name='张无忌', age=15, salary=3000.09, status=null&#125;Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;123456 3.中间操作 - 截断流 1234567@Testpublic void test4() &#123; emps.stream() .filter(employee -&gt; employee.getAge() &lt; 30) // 过滤年龄小于30的人 .limit(1) // 截取一个 .forEach(System.out::println); &#125;1234567 执行结果： 12Employee&#123;id=101, name='林青霞', age=28, salary=9889.99, status=null&#125;12 4.中间操作 - 跳过 12345678@Testpublic void test5() &#123; emps.stream() .filter(employee -&gt; employee.getAge() &lt; 30) .skip(2) .forEach(System.out::println); &#125;12345678 执行结果： 123Employee&#123;id=105, name='张无忌', age=15, salary=3000.09, status=null&#125;Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;123 5.中间操作 - 筛选去重 123456@Testpublic void test6() &#123; emps.stream() .distinct() .forEach(System.out::println); &#125;123456 执行结果： 12345Employee&#123;id=101, name='林青霞', age=28, salary=9889.99, status=null&#125;Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;Employee&#123;id=103, name='周星驰', age=40, salary=1233.88, status=null&#125;Employee&#123;id=104, name='大圣', age=500, salary=5000.44, status=null&#125;Employee&#123;id=105, name='张无忌', age=15, salary=3000.09, status=null&#125;12345 4.2 映射 方法 描述 map(Function f) 接收一个函数作为参数，该函数会被应用到每个元 素上，并将其映射成一个新的元素。 mapToDouble(ToDoubleFunction f) 接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 DoubleStream。 mapToInt(ToIntFunction f) 接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 IntStream。 mapToLong(ToLongFunction f) 接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 LongStream。 flatMap(Function f) 接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流 案例：1.map操作 1234567891011121314@Testpublic void test7() &#123; List&lt;String&gt; list = Arrays.asList(\"aaa\", \"java\", \"ccc\", \"java8\", \"hello world\"); list.stream() .map((x) -&gt; x.toUpperCase()) .forEach(System.out::println); System.out.println(\"-------------\"); emps.stream() .map(Employee::getAge) .forEach(System.out::println);&#125;1234567891011121314 执行结果： 123456789101112AAAJAVACCCJAVA8HELLO WORLD-------------2829405001529123456789101112 2.flatMap操作 先定义一个 filterCharacter(String str) 方法： 12345678private static Stream&lt;Character&gt; filterCharacter(String str) &#123; List&lt;Character&gt; characters = new ArrayList&lt;&gt;(); for (Character character : str.toCharArray()) &#123; characters.add(character); &#125; return characters.stream(); &#125;12345678 执行测试代码： 1234567891011121314151617181920@Testpublic void test8() &#123; List&lt;String&gt; list = Arrays.asList(\"aaa\", \"hello world\"); Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream() .map(LambdaStramAPI::filterCharacter); streamStream.forEach((s) -&gt; &#123; s.forEach((c) -&gt; System.out.println(c + \"\")); System.out.println(); &#125;); System.out.println(\"----------------------\"); list.stream() .flatMap(LambdaStramAPI::filterCharacter) .forEach(System.out::println);&#125;1234567891011121314151617181920 执行结果： 12345678910111213141516171819202122232425262728293031aaahelloworld----------------------aaahelloworld12345678910111213141516171819202122232425262728293031 4.3 排序 方法 描述 sorted() 产生一个新流，其中按自然顺序排序 sorted(Comparator comp) 产生一个新流，其中按比较器顺序排序 案例： 1234567891011121314@Testpublic void test9() &#123; emps.stream() .map(Employee::getSalary) .sorted() .forEach(System.out::println); System.out.println(\"-----------------\"); emps.stream() .map(Employee::getAge) .sorted(Integer::compare) .forEach(System.out::println);&#125;1234567891011121314 执行结果： 123456789101112131233.883000.094329.854329.855000.449889.99-----------------152829294050012345678910111213 五、 Stream的终止操作终止操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如:List、Integer，甚至是 void 。 5.1 查找与匹配 方法 描述 allMatch(Predicate p) 检查是否匹配所有元素 anyMatch(Predicate p) 检查是否至少匹配一个元素 noneMatch(Predicate p) 检查是否没有匹配所有元素 findFirst() 返回第一个元素 findAny() 返回当前流中的任意元素 count() 返回流中元素总数 max(Comparator c) 返回流中最大值 min(Comparator c) 返回流中最小值 forEach(Consumer c) 内部迭代(使用 Collection 接口需要用户去做迭 代，称为外部迭代。相反，Stream API 使用内部 迭代——它帮你把迭代做了) 案例：1.匹配 123456789101112131415161718@Testpublic void test10() &#123; boolean allMatch = emps.stream() .allMatch((employee -&gt; employee.getName().equals(\"林青霞\"))); System.out.println(allMatch); System.out.println(\"-----------------\"); boolean anyMatch = emps.stream() .anyMatch(employee -&gt; employee.getName().equals(\"林青霞\")); System.out.println(anyMatch); System.out.println(\"-----------------\"); boolean noneMatch = emps.stream() .noneMatch(employee -&gt; employee.getName().equals(\"林青霞\")); System.out.println(noneMatch);&#125;123456789101112131415161718 执行结果： 12345false-----------------true-----------------false12345 2.第一个元素 、 任意一个元素 123456789101112131415 @Testpublic void test12() &#123; Optional&lt;String&gt; first = emps.stream() .map(Employee::getName) .sorted() .findFirst(); // 获取第一个元素 System.out.println(first.get()); System.out.println(\"-----------------\"); Optional&lt;Employee&gt; findAny = emps.parallelStream() .filter(employee -&gt; employee.getName().equals(\"林青霞\")) .findAny(); //任意一个元素 System.out.println(findAny.get());&#125;123456789101112131415 执行结果： 123东方不败-----------------Employee&#123;id=101, name='林青霞', age=28, salary=9889.99, status=null&#125;123 3.统计总个数、 最大、 最小值 1234567891011121314151617181920// 注意： 流一旦执行终止操作后， 就不能在重复使用@Testpublic void test13() &#123; Stream&lt;Employee&gt; stream = emps.stream(); long count = stream.count(); System.out.println(count); System.out.println(\"-----------------\"); Optional&lt;Double&gt; doubleOptional = emps.stream() .map(Employee::getSalary) .max(Double::compare); //最大值 System.out.println(doubleOptional.get()); System.out.println(\"-----------------\"); Optional&lt;Employee&gt; employeeOptional = emps.stream() .min((x, y) -&gt; Double.compare(x.getSalary(), y.getSalary())); // 最小值 System.out.println(employeeOptional.get());&#125;1234567891011121314151617181920 执行结果： 123456-----------------9889.99-----------------Employee&#123;id=103, name='周星驰', age=40, salary=1233.88, status=null&#125;12345 5.2 归约备注:map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它 来进行网络搜索而出名。 方法 描述 reduce(T iden, BinaryOperator b) 可以将流中元素反复结合起来，得到一个值。 返回 T reduce(BinaryOperator b) 可以将流中元素反复结合起来，得到一个值。 返回 Optional&lt; T&gt; 案例：1.求和 12345678@Testpublic void test14() &#123; List&lt;Integer&gt; list = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10); Integer sum = list.stream() .reduce(0, (x, y) -&gt; x + y); System.out.println(sum); &#125;12345678 执行结果： 1551 2.计算次数 12345678910111213141516171819@Testpublic void test15() &#123; Optional&lt;Double&gt; doubleOptional = emps.stream() .map(Employee::getSalary) .reduce(Double::max); System.out.println(doubleOptional); System.out.println(\"-----------------\"); //查看 东方不败 出现的次数 -- 【此处还有点毛病】 Optional&lt;Integer&gt; sumOptional = emps.stream() .map(Employee::getName) .flatMap(LambdaStramAPI::filterCharacter) .map((c) -&gt; &#123; if (c.equals(\"东\")) return 1; else return 0; &#125;).reduce(Integer::sum); System.out.println(sumOptional.get());&#125;12345678910111213141516171819 执行结果： 123Optional[9889.99]-----------------0123 5.3 收集 方法 描述 collect(Collector c) 将流转换为其他形式。接收一个 Collector接口的 实现，用于给Stream中元素做汇总的方法 案例：1.收集 123456789101112131415161718192021@Testpublic void test16()&#123; List&lt;String&gt; collect = emps.stream() .map(Employee::getName) .collect(Collectors.toList()); collect.forEach(System.out::println); System.out.println(\"-------------------\"); Set&lt;String&gt; set = emps.stream() .map(Employee::getName) .collect(Collectors.toSet()); set.forEach(System.out::println); System.out.println(\"-------------------\"); HashSet&lt;String&gt; hashSet = emps.stream() .map(Employee::getName) .collect(Collectors.toCollection(HashSet::new)); hashSet.forEach(System.out::println);&#125;123456789101112131415161718192021 执行结果： 123456789101112131415161718林青霞东方不败周星驰大圣张无忌东方不败-------------------周星驰林青霞大圣东方不败张无忌-------------------周星驰林青霞大圣东方不败张无忌123456789101112131415161718 2.收集统计 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253// 收集统计 @Test public void test17()&#123; // 统计总个数 Long count = emps.stream() .collect(Collectors.counting()); System.out.println(count); System.out.println(\"-------------------\"); // 求平均值 Double avg = emps.stream() .collect(Collectors.averagingDouble(Employee::getSalary)); System.out.println(avg); System.out.println(\"-------------------\"); // 求和 Double sum = emps.stream() .collect(Collectors.summingDouble(Employee::getSalary)); System.out.println(sum); System.out.println(\"-------------------\"); //求最大值 Optional&lt;Employee&gt; max = emps.stream() .collect(Collectors.maxBy((x, y) -&gt; Double.compare(x.getSalary(), y.getSalary()))); System.out.println(max.get()); System.out.println(\"-------------------\"); //求最小值 Optional&lt;Double&gt; min = emps.stream() .map(Employee::getSalary) .collect(Collectors.minBy(Double::compare)); System.out.println(min.get()); System.out.println(\"-------------------\"); //统计分析 DoubleSummaryStatistics doubleSummaryStatistics = emps.stream() .collect(Collectors.summarizingDouble(Employee::getSalary)); System.out.println(doubleSummaryStatistics.getAverage()); System.out.println(\"-------------------\"); //拼接 String join = emps.stream() .map(Employee::getName) .collect(Collectors.joining(\",\", \"--\", \"--\")); System.out.println(join); &#125;1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253 执行结果： 123456789101112136-------------------4630.683333333333-------------------27784.1-------------------Employee&#123;id=101, name='林青霞', age=28, salary=9889.99, status=null&#125;-------------------1233.88-------------------4630.683333333333---------------------林青霞,东方不败,周星驰,大圣,张无忌,东方不败--12345678910111213 3.收集-分组 1234567// 分组@Testpublic void test18()&#123; Map&lt;String, List&lt;Employee&gt;&gt; group = emps.stream() .collect(Collectors.groupingBy(Employee::getName)); System.out.println(group);&#125;1234567 执行结果： 123456789&#123;周星驰=[Employee&#123;id=103, name='周星驰', age=40, salary=1233.88, status=null&#125;], 林青霞=[Employee&#123;id=101, name='林青霞', age=28, salary=9889.99, status=null&#125;], 大圣=[Employee&#123;id=104, name='大圣', age=500, salary=5000.44, status=null&#125;], 东方不败=[Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;, Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;], 张无忌=[Employee&#123;id=105, name='张无忌', age=15, salary=3000.09, status=null&#125;]&#125;123456789 4.收集-多级分组 1234567891011// 多级分组@Testpublic void test19()&#123; Map&lt;String, Map&lt;String, List&lt;Employee&gt;&gt;&gt; group = emps.stream() .collect(Collectors.groupingBy(Employee::getName, Collectors.groupingBy((e) -&gt; &#123; if (e.getAge() &lt; 30) return \"青年\"; else if (e.getAge() &lt; 50) return \"中年\"; else return \"老年\"; &#125;))); System.out.println(group);&#125;1234567891011 执行结果： 123456789&#123;周星驰=&#123;中年=[Employee&#123;id=103, name='周星驰', age=40, salary=1233.88, status=null&#125;]&#125;, 林青霞=&#123;青年=[Employee&#123;id=101, name='林青霞', age=28, salary=9889.99, status=null&#125;]&#125;, 大圣=&#123;老年=[Employee&#123;id=104, name='大圣', age=500, salary=5000.44, status=null&#125;]&#125;, 东方不败=&#123;青年=[Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;, Employee&#123;id=102, name='东方不败', age=29, salary=4329.85, status=null&#125;]&#125;, 张无忌=&#123;青年=[Employee&#123;id=105, name='张无忌', age=15, salary=3000.09, status=null&#125;]&#125;&#125;123456789 Collector 接口中方法的实现决定了如何对流执行收集操作(如收 集到 List、Set、Map)。但是 Collectors 实用类 供了很多静态 方法，可以方便地创建常见收集器实例，具体方法与实例如下表: 方法 返回类型 作用 toList List 把流中元素收集到List List emps= list.stream().collect(Collectors.toList()); toSet Set 把流中元素收集到Set Set emps= list.stream().collect(Collectors.toSet()); toCollection Collection 把流中元素收集到创建的集合 Collectionemps=list.stream().collect(Collectors.toCollection(ArrayList::new)); counting Long 计算流中元素的个数 long count = list.stream().collect(Collectors.counting()); summingInt Integer 对流中元素的整数属性求和 inttotal=list.stream().collect(Collectors.summingInt(Employee::getSalary)); averagingInt Double 计算流中元素Integer属性的平均 值 doubleavg= list.stream().collect(Collectors.averagingInt(Employee::getSalary)); summarizingInt IntSummaryStatistics 收集流中Integer属性的统计值。 如:平均值 IntSummaryStatisticsiss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary)); joining String 连接流中每个字符串 String str= list.stream().map(Employee::getName).collect(Collectors.joining()); maxBy Optional 根据比较器选择最大值 Optionalmax= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary))); minBy Optional 根据比较器选择最小值 Optional min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary))); reducing 归约产生的类型 从一个作为累加器的初始值 开始，利用BinaryOperator与 流中元素逐个结合，从而归 约成单个值 inttotal=list.stream().collect(Collectors.reducing(0, Employee::getSalar, Integer::sum)); collectingAndThen 转换函数返回的类型 包裹另一个收集器，对其结 果转换函数 inthow= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size)); groupingBy Map&lt;K, List&gt; 根据某属性值对流分组，属 性为K，结果为V Map&lt;Emp.Status, List&gt; map= list.stream() .collect(Collectors.groupingBy(Employee::getStatus)); partitioningBy Map&lt;Boolean, List&gt; 根据true或false进行分区 Map&lt;Boolean,List&gt;vd= list.stream().collect(Collectors.partitioningBy(Employee::getManage)); 相关源码地址：https://github.com/liudongdong0909/java8/tree/master/java8-Lambda/src/com/donggua 以上就是全文的内容，由于水平有限，文章中难免会有错误，希望大家指正。谢谢~ 参考文章JAVA8新特性——StreamAPI","content":"<h1 id=\"Stream-API\"><a href=\"#Stream-API\" class=\"headerlink\" title=\"Stream API\"></a>Stream API</h1><blockquote>\n<p>Java8中有两大最为重要的改变。第一个是 Lambda 表达式 ;另外一 个则是 Stream API(java.util.stream.*) 。<br>Stream 是 Java8 中处理集合的关键抽象概念，它可以指定你希望对 集合进行的操作，可以执行非常复杂的查找、过滤和映射数据等操作。<br>使用Stream API 对集合数据进行操作，就类似于使用 SQL 执行的数 据库查询。也可以使用 Stream API 来并行执行操作。简而言之， Stream API 供了一种高效且易于使用的处理数据的方式。</p>\n</blockquote>\n<h2 id=\"一、什么是-Stream\"><a href=\"#一、什么是-Stream\" class=\"headerlink\" title=\"一、什么是 Stream\"></a>一、什么是 Stream</h2><p>流(Stream) 到底是什么呢? 是数据渠道，用于操作数据源(集合、数组等)所生成的元素序列。集合讲的是数据，流讲的是计算!<br><strong>注意:</strong> </p>\n<ol>\n<li>Stream自己不会存储元素。 </li>\n<li>Stream不会改变原对象。相反，他们会返回一个持有结果的新Stream。 </li>\n<li>Stream操作是延迟执行。这意味着他们会等到需要结果的时候才执行。</li>\n</ol>\n<h2 id=\"二、Stream操作的三个步骤\"><a href=\"#二、Stream操作的三个步骤\" class=\"headerlink\" title=\"二、Stream操作的三个步骤\"></a>二、Stream操作的三个步骤</h2><h3 id=\"2-1-创建stream\"><a href=\"#2-1-创建stream\" class=\"headerlink\" title=\"2.1 创建stream\"></a>2.1 创建stream</h3><blockquote>\n<p>一个数据源（如：集合或数组），获取一个流</p>\n</blockquote>\n<h3 id=\"2-2-中间操作\"><a href=\"#2-2-中间操作\" class=\"headerlink\" title=\"2.2 中间操作\"></a>2.2 中间操作</h3><blockquote>\n<p>一个中间操作链，对数据源的数据进行处理。</p>\n</blockquote>\n<h3 id=\"2-3-终止操作\"><a href=\"#2-3-终止操作\" class=\"headerlink\" title=\"2.3 终止操作\"></a>2.3 终止操作</h3><blockquote>\n<p>一个终止操作，执行中间操作链，并产生结果。</p>\n</blockquote>\n<h2 id=\"三、创建Stream的四种方式\"><a href=\"#三、创建Stream的四种方式\" class=\"headerlink\" title=\"三、创建Stream的四种方式\"></a>三、创建Stream的四种方式</h2><h3 id=\"3-1-由Collection创建流\"><a href=\"#3-1-由Collection创建流\" class=\"headerlink\" title=\"3.1 由Collection创建流\"></a>3.1 由Collection创建流</h3><p>Java8 中的 Collection 接口被扩展， 供了两个获取流的方法: </p>\n<ul>\n<li>default Stream&lt; E&gt; stream() : 返回一个顺序流 </li>\n<li>default Stream&lt; E&gt; parallelStream() : 返回一个并行流</li>\n</ul>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">List</span>&lt;Employee&gt; <span class=\"built_in\">list</span> = <span class=\"literal\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">Stream&lt;Employee&gt; stream = <span class=\"built_in\">list</span>.stream();</span><br><span class=\"line\">Stream&lt;Employee&gt; parallelStream = <span class=\"built_in\">list</span>.parallelStream();</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-2-由数组创建流\"><a href=\"#3-2-由数组创建流\" class=\"headerlink\" title=\"3.2 由数组创建流\"></a>3.2 由数组创建流</h3><p>通过 Arrays中的静态方法 stream() 创建数据源 。<br>static &lt; T&gt; Stream&lt; T&gt; stream(T[] array): 返回一个流</p>\n<p>重载形式，能够处理对应基本类型的数组: </p>\n<ul>\n<li>public static IntStream stream(int[] array) </li>\n<li>public static LongStream stream(long[] array) </li>\n<li>public static DoubleStream stream(double[] array)</li>\n</ul>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight mathematica\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Integer</span>[] num = new <span class=\"keyword\">Integer</span>[<span class=\"number\">23</span>];</span><br><span class=\"line\">Stream&lt;<span class=\"keyword\">Integer</span>&gt; stream1 = <span class=\"keyword\">Arrays</span>.stream(num);<span class=\"number\">12</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-3-由值创建流\"><a href=\"#3-3-由值创建流\" class=\"headerlink\" title=\"3.3 由值创建流\"></a>3.3 由值创建流</h3><p>可以使用静态方法 Stream.of(), 通过显示值 创建一个流。它可以接收任意数量的参数。<br>public static&lt; T&gt; Stream&lt; T&gt; of(T… values) : 返回一个流</p>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">Stream&lt;Integer&gt; </span><span class=\"keyword\">stream2 </span>= <span class=\"keyword\">Stream.of(1, </span><span class=\"number\">5</span>, <span class=\"number\">7</span>)<span class=\"comment\">;</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"3-4-由函数创建流\"><a href=\"#3-4-由函数创建流\" class=\"headerlink\" title=\"3.4 由函数创建流\"></a>3.4 由函数创建流</h3><p>可以使用静态方法 Stream.iterate() 和 Stream.generate(), 创建无限流。 </p>\n<ul>\n<li>迭代：public static&lt; T&gt; Stream&lt; T&gt; iterate(final T seed, final UnaryOperator&lt; T&gt; f) </li>\n<li>生成：public static&lt; T&gt; Stream&lt; T&gt; generate(Supplier&lt; T&gt; s)</li>\n</ul>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 迭代</span></span><br><span class=\"line\"><span class=\"built_in\">Stream</span>&lt;Integer&gt; stream3 = <span class=\"built_in\">Stream</span>.iterate(<span class=\"number\">0</span>, (x) -&gt; x + <span class=\"number\">2</span>).limit(<span class=\"number\">2</span>);</span><br><span class=\"line\">stream3.forEach(System.out::<span class=\"built_in\">println</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"-------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 生成</span></span><br><span class=\"line\"><span class=\"built_in\">Stream</span>&lt;Double&gt; stream4 = <span class=\"built_in\">Stream</span>.generate(Math::<span class=\"built_in\">random</span>).limit(<span class=\"number\">4</span>);</span><br><span class=\"line\">stream4.forEach(System.out::<span class=\"built_in\">println</span>);<span class=\"number\">123456789</span></span><br></pre></td></tr></table></figure>\n<p><strong>执行结果：</strong></p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0</span><br><span class=\"line\">2</span><br><span class=\"line\">-------------</span><br><span class=\"line\">0.8009341328264229</span><br><span class=\"line\">0.3393727316726045</span><br><span class=\"line\">0.16402941830797657</span><br><span class=\"line\">0.189839641538307121234567</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、Stream的中间操作\"><a href=\"#四、Stream的中间操作\" class=\"headerlink\" title=\"四、Stream的中间操作\"></a>四、Stream的中间操作</h2><p>多个 中间操作 可以连接起来形成一个流水线，除非流水 线上触发终止操作，否则中间操作不会执行任何的处理! 而在终止操作时一次性全部处理，称为“惰性求值”。</p>\n<h3 id=\"4-1-筛选与切片\"><a href=\"#4-1-筛选与切片\" class=\"headerlink\" title=\"4.1 筛选与切片\"></a>4.1 筛选与切片</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>filter(Predicate p)</td>\n<td>接收 Lambda ， 从流中排除某些元素。</td>\n</tr>\n<tr>\n<td>distinct()</td>\n<td>筛选，通过流所生成元素的 hashCode() 和 equals() 去 除重复元素</td>\n</tr>\n<tr>\n<td>limit(long maxSize)</td>\n<td>截断流，使其元素不超过给定数量</td>\n</tr>\n<tr>\n<td>skip(long n)</td>\n<td>跳过元素，返回一个扔掉了前 n 个元素的流。若流中元素 不足 n 个，则返回一个空流。与 limit(n) 互补</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong></p>\n<p>定义一个集合： Employee 重写 hashcode ， equals — 去重时使用</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Employee&gt; emps = Arrays.asList(</span><br><span class=\"line\">          new Employee(<span class=\"number\">101</span>, <span class=\"string\">\"林青霞\"</span>, <span class=\"number\">28</span>, <span class=\"number\">9889.99</span>),</span><br><span class=\"line\">          new Employee(<span class=\"number\">102</span>, <span class=\"string\">\"东方不败\"</span>, <span class=\"number\">29</span>, <span class=\"number\">4329.85</span>),</span><br><span class=\"line\">          new Employee(<span class=\"number\">103</span>, <span class=\"string\">\"周星驰\"</span>, <span class=\"number\">40</span>, <span class=\"number\">1233.88</span>),</span><br><span class=\"line\">          new Employee(<span class=\"number\">104</span>, <span class=\"string\">\"大圣\"</span>, <span class=\"number\">500</span>, <span class=\"number\">5000.44</span>),</span><br><span class=\"line\">          new Employee(<span class=\"number\">105</span>, <span class=\"string\">\"张无忌\"</span>, <span class=\"number\">15</span>, <span class=\"number\">3000.09</span>),</span><br><span class=\"line\">          new Employee(<span class=\"number\">102</span>, <span class=\"string\">\"东方不败\"</span>, <span class=\"number\">29</span>, <span class=\"number\">4329.85</span>)</span><br><span class=\"line\">  );<span class=\"number\">12345678</span></span><br></pre></td></tr></table></figure>\n<p><strong>执行操作：</strong></p>\n<p>1.内部迭代 - 迭代操作由Stream API 完成操作</p>\n<figure class=\"highlight arduino\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> test2() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 中间操作不会做任何处理</span></span><br><span class=\"line\">    <span class=\"built_in\">Stream</span>&lt;Employee&gt; stream = emps.stream()</span><br><span class=\"line\">            .filter((e) -&gt; &#123;</span><br><span class=\"line\">                System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"惰性求值\"</span>);</span><br><span class=\"line\">                <span class=\"built_in\">return</span> e.getAge() &lt; <span class=\"number\">30</span>;</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"--------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 终止操作，一次性执行全部功能， 称为 \"惰性求值\"</span></span><br><span class=\"line\">    stream.forEach(System.out::<span class=\"built_in\">println</span>);</span><br><span class=\"line\">&#125;<span class=\"number\">12345678910111213</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--------------------</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=101, <span class=\"attribute\">name</span>=<span class=\"string\">'林青霞'</span>, <span class=\"attribute\">age</span>=28, <span class=\"attribute\">salary</span>=9889.99, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=105, <span class=\"attribute\">name</span>=<span class=\"string\">'张无忌'</span>, <span class=\"attribute\">age</span>=15, <span class=\"attribute\">salary</span>=3000.09, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">惰性求值</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;1234567891011</span><br></pre></td></tr></table></figure>\n<p>2.外部迭代</p>\n<figure class=\"highlight nimrod\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"type\">Test</span></span><br><span class=\"line\">public <span class=\"built_in\">void</span> test3() &#123;</span><br><span class=\"line\">     <span class=\"type\">Iterator</span>&lt;<span class=\"type\">Employee</span>&gt; <span class=\"keyword\">iterator</span> = emps.<span class=\"keyword\">iterator</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">while</span> (<span class=\"keyword\">iterator</span>.hasNext()) &#123;</span><br><span class=\"line\">         <span class=\"type\">System</span>.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">iterator</span>.next());</span><br><span class=\"line\">     &#125;</span><br><span class=\"line\"> &#125;<span class=\"number\">12345678</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=101, <span class=\"attribute\">name</span>=<span class=\"string\">'林青霞'</span>, <span class=\"attribute\">age</span>=28, <span class=\"attribute\">salary</span>=9889.99, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=103, <span class=\"attribute\">name</span>=<span class=\"string\">'周星驰'</span>, <span class=\"attribute\">age</span>=40, <span class=\"attribute\">salary</span>=1233.88, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=104, <span class=\"attribute\">name</span>=<span class=\"string\">'大圣'</span>, <span class=\"attribute\">age</span>=500, <span class=\"attribute\">salary</span>=5000.44, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=105, <span class=\"attribute\">name</span>=<span class=\"string\">'张无忌'</span>, <span class=\"attribute\">age</span>=15, <span class=\"attribute\">salary</span>=3000.09, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;123456</span><br></pre></td></tr></table></figure>\n<p>3.中间操作 - 截断流</p>\n<figure class=\"highlight less\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">@Test</span></span><br><span class=\"line\">public void test4() &#123;</span><br><span class=\"line\">     <span class=\"selector-tag\">emps</span><span class=\"selector-class\">.stream</span>()</span><br><span class=\"line\">             <span class=\"selector-class\">.filter</span>(employee -&gt; employee.getAge() &lt; <span class=\"number\">30</span>) <span class=\"comment\">// 过滤年龄小于30的人</span></span><br><span class=\"line\">             <span class=\"selector-class\">.limit</span>(<span class=\"number\">1</span>) <span class=\"comment\">// 截取一个</span></span><br><span class=\"line\">             <span class=\"selector-class\">.forEach</span>(System.<span class=\"attribute\">out</span>::println);</span><br><span class=\"line\"> &#125;<span class=\"selector-tag\">1234567</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=101, <span class=\"attribute\">name</span>=<span class=\"string\">'林青霞'</span>, <span class=\"attribute\">age</span>=28, <span class=\"attribute\">salary</span>=9889.99, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">12</span><br></pre></td></tr></table></figure>\n<p>4.中间操作 - 跳过</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> void test5() &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"selector-tag\">emps</span><span class=\"selector-class\">.stream</span>()</span><br><span class=\"line\">             <span class=\"selector-class\">.filter</span>(<span class=\"selector-tag\">employee</span> <span class=\"selector-tag\">-</span>&gt; <span class=\"selector-tag\">employee</span><span class=\"selector-class\">.getAge</span>() &lt; 30)</span><br><span class=\"line\">             <span class=\"selector-class\">.skip</span>(2)</span><br><span class=\"line\">             <span class=\"selector-class\">.forEach</span>(<span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-pseudo\">::println)</span>;</span><br><span class=\"line\"> &#125;12345678</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=105, <span class=\"attribute\">name</span>=<span class=\"string\">'张无忌'</span>, <span class=\"attribute\">age</span>=15, <span class=\"attribute\">salary</span>=3000.09, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">123</span><br></pre></td></tr></table></figure>\n<p>5.中间操作 - 筛选去重</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> void test6() &#123;</span><br><span class=\"line\">     <span class=\"selector-tag\">emps</span><span class=\"selector-class\">.stream</span>()</span><br><span class=\"line\">             <span class=\"selector-class\">.distinct</span>()</span><br><span class=\"line\">             <span class=\"selector-class\">.forEach</span>(<span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-pseudo\">::println)</span>;</span><br><span class=\"line\"> &#125;123456</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=101, <span class=\"attribute\">name</span>=<span class=\"string\">'林青霞'</span>, <span class=\"attribute\">age</span>=28, <span class=\"attribute\">salary</span>=9889.99, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=103, <span class=\"attribute\">name</span>=<span class=\"string\">'周星驰'</span>, <span class=\"attribute\">age</span>=40, <span class=\"attribute\">salary</span>=1233.88, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=104, <span class=\"attribute\">name</span>=<span class=\"string\">'大圣'</span>, <span class=\"attribute\">age</span>=500, <span class=\"attribute\">salary</span>=5000.44, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=105, <span class=\"attribute\">name</span>=<span class=\"string\">'张无忌'</span>, <span class=\"attribute\">age</span>=15, <span class=\"attribute\">salary</span>=3000.09, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;12345</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-2-映射\"><a href=\"#4-2-映射\" class=\"headerlink\" title=\"4.2 映射\"></a>4.2 映射</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>map(Function f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元 素上，并将其映射成一个新的元素。</td>\n</tr>\n<tr>\n<td>mapToDouble(ToDoubleFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 DoubleStream。</td>\n</tr>\n<tr>\n<td>mapToInt(ToIntFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 IntStream。</td>\n</tr>\n<tr>\n<td>mapToLong(ToLongFunction f)</td>\n<td>接收一个函数作为参数，该函数会被应用到每个元 素上，产生一个新的 LongStream。</td>\n</tr>\n<tr>\n<td>flatMap(Function f)</td>\n<td>接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong><br>1.map操作</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public <span class=\"literal\">void</span> test7() &#123;</span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"java\"</span>, <span class=\"string\">\"ccc\"</span>, <span class=\"string\">\"java8\"</span>, <span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    list.stream()</span><br><span class=\"line\">            .map<span class=\"function\"><span class=\"params\">((x) -&gt; x.toUpperCase())</span></span></span><br><span class=\"line\"><span class=\"function\">            .<span class=\"title\">forEach</span><span class=\"params\">(System.out::println)</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">System</span>.<span class=\"title\">out</span>.<span class=\"title\">println</span><span class=\"params\">(<span class=\"string\">\"-------------\"</span>)</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">emps</span>.<span class=\"title\">stream</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">            .<span class=\"title\">map</span><span class=\"params\">(Employee::getAge)</span></span></span><br><span class=\"line\"><span class=\"function\">            .<span class=\"title\">forEach</span><span class=\"params\">(System.out::println)</span>;</span></span><br><span class=\"line\"><span class=\"function\">&#125;1234567891011121314</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AAA</span><br><span class=\"line\">JAVA</span><br><span class=\"line\">CCC</span><br><span class=\"line\">JAVA8</span><br><span class=\"line\">HELLO WORLD</span><br><span class=\"line\">-------------</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">40</span><br><span class=\"line\">500</span><br><span class=\"line\">15</span><br><span class=\"line\">29123456789101112</span><br></pre></td></tr></table></figure>\n<p>2.flatMap操作</p>\n<p>先定义一个 filterCharacter(String str) 方法：</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Stream&lt;Character&gt; filterCharacter(<span class=\"keyword\">String</span> <span class=\"built_in\">str</span>) &#123;</span><br><span class=\"line\">        List&lt;Character&gt; characters = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (Character character : <span class=\"built_in\">str</span>.toCharArray()) &#123;</span><br><span class=\"line\">            characters.<span class=\"built_in\">add</span>(character);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> characters.stream();</span><br><span class=\"line\">    &#125;<span class=\"number\">12345678</span></span><br></pre></td></tr></table></figure>\n<p>执行测试代码：</p>\n<figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public <span class=\"literal\">void</span> test8() &#123;</span><br><span class=\"line\">    List&lt;String&gt; list = Arrays.asList(<span class=\"string\">\"aaa\"</span>, <span class=\"string\">\"hello world\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Stream&lt;Stream&lt;Character&gt;&gt; streamStream = list.stream()</span><br><span class=\"line\">            .map(LambdaStramAPI::filterCharacter);</span><br><span class=\"line\"></span><br><span class=\"line\">    streamStream.forEach<span class=\"function\"><span class=\"params\">((s) -&gt; &#123;</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        s.forEach((c) -&gt; System.out.println(c + <span class=\"string\">\"\"</span>));</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">        System.out.println();</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">    &#125;)</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">System</span>.<span class=\"title\">out</span>.<span class=\"title\">println</span><span class=\"params\">(<span class=\"string\">\"----------------------\"</span>)</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">    <span class=\"title\">list</span>.<span class=\"title\">stream</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\">            .<span class=\"title\">flatMap</span><span class=\"params\">(LambdaStramAPI::filterCharacter)</span></span></span><br><span class=\"line\"><span class=\"function\">            .<span class=\"title\">forEach</span><span class=\"params\">(System.out::println)</span>;</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">&#125;1234567891011121314151617181920</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a</span><br><span class=\"line\">a</span><br><span class=\"line\">a</span><br><span class=\"line\"></span><br><span class=\"line\">h</span><br><span class=\"line\">e</span><br><span class=\"line\">l</span><br><span class=\"line\">l</span><br><span class=\"line\">o</span><br><span class=\"line\"></span><br><span class=\"line\">w</span><br><span class=\"line\">o</span><br><span class=\"line\">r</span><br><span class=\"line\">l</span><br><span class=\"line\">d</span><br><span class=\"line\"></span><br><span class=\"line\">----------------------</span><br><span class=\"line\">a</span><br><span class=\"line\">a</span><br><span class=\"line\">a</span><br><span class=\"line\">h</span><br><span class=\"line\">e</span><br><span class=\"line\">l</span><br><span class=\"line\">l</span><br><span class=\"line\">o</span><br><span class=\"line\"></span><br><span class=\"line\">w</span><br><span class=\"line\">o</span><br><span class=\"line\">r</span><br><span class=\"line\">l</span><br><span class=\"line\">d12345678910111213141516171819202122232425262728293031</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-3-排序\"><a href=\"#4-3-排序\" class=\"headerlink\" title=\"4.3 排序\"></a>4.3 排序</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>sorted()</td>\n<td>产生一个新流，其中按自然顺序排序</td>\n</tr>\n<tr>\n<td>sorted(Comparator comp)</td>\n<td>产生一个新流，其中按比较器顺序排序</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong></p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@<span class=\"keyword\">Test</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> void test9() &#123;</span><br><span class=\"line\">    <span class=\"selector-tag\">emps</span><span class=\"selector-class\">.stream</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.map</span>(<span class=\"selector-tag\">Employee</span><span class=\"selector-pseudo\">::getSalary)</span></span><br><span class=\"line\">            <span class=\"selector-class\">.sorted</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.forEach</span>(<span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-pseudo\">::println)</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-class\">.println</span>(\"<span class=\"selector-tag\">-----------------</span>\");</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"selector-tag\">emps</span><span class=\"selector-class\">.stream</span>()</span><br><span class=\"line\">            <span class=\"selector-class\">.map</span>(<span class=\"selector-tag\">Employee</span><span class=\"selector-pseudo\">::getAge)</span></span><br><span class=\"line\">            <span class=\"selector-class\">.sorted</span>(<span class=\"selector-tag\">Integer</span><span class=\"selector-pseudo\">::compare)</span></span><br><span class=\"line\">            <span class=\"selector-class\">.forEach</span>(<span class=\"selector-tag\">System</span><span class=\"selector-class\">.out</span><span class=\"selector-pseudo\">::println)</span>;</span><br><span class=\"line\">&#125;1234567891011121314</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1233.88</span></span><br><span class=\"line\"><span class=\"number\">3000.09</span></span><br><span class=\"line\"><span class=\"number\">4329.85</span></span><br><span class=\"line\"><span class=\"number\">4329.85</span></span><br><span class=\"line\"><span class=\"number\">5000.44</span></span><br><span class=\"line\"><span class=\"number\">9889.99</span></span><br><span class=\"line\">-----------------</span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">28</span></span><br><span class=\"line\"><span class=\"number\">29</span></span><br><span class=\"line\"><span class=\"number\">29</span></span><br><span class=\"line\"><span class=\"number\">40</span></span><br><span class=\"line\"><span class=\"number\">50012345678910111213</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"五、-Stream的终止操作\"><a href=\"#五、-Stream的终止操作\" class=\"headerlink\" title=\"五、 Stream的终止操作\"></a>五、 Stream的终止操作</h2><p>终止操作会从流的流水线生成结果。其结果可以是任何不是流的值，例如:List、Integer，甚至是 void 。</p>\n<h3 id=\"5-1-查找与匹配\"><a href=\"#5-1-查找与匹配\" class=\"headerlink\" title=\"5.1 查找与匹配\"></a>5.1 查找与匹配</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>allMatch(Predicate p)</td>\n<td>检查是否匹配所有元素</td>\n</tr>\n<tr>\n<td>anyMatch(Predicate p)</td>\n<td>检查是否至少匹配一个元素</td>\n</tr>\n<tr>\n<td>noneMatch(Predicate p)</td>\n<td>检查是否没有匹配所有元素</td>\n</tr>\n<tr>\n<td>findFirst()</td>\n<td>返回第一个元素</td>\n</tr>\n<tr>\n<td>findAny()</td>\n<td>返回当前流中的任意元素</td>\n</tr>\n<tr>\n<td>count()</td>\n<td>返回流中元素总数</td>\n</tr>\n<tr>\n<td>max(Comparator c)</td>\n<td>返回流中最大值</td>\n</tr>\n<tr>\n<td>min(Comparator c)</td>\n<td>返回流中最小值</td>\n</tr>\n<tr>\n<td>forEach(Consumer c)</td>\n<td>内部迭代(使用 Collection 接口需要用户去做迭 代，称为外部迭代。相反，Stream API 使用内部 迭代——它帮你把迭代做了)</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong><br>1.匹配</p>\n<figure class=\"highlight pf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test10() &#123;</span><br><span class=\"line\">    boolean <span class=\"literal\">all</span>Match = emps.stream()</span><br><span class=\"line\">            .<span class=\"literal\">all</span>Match((employee -&gt; employee.getName().equals(<span class=\"string\">\"林青霞\"</span>)));</span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(<span class=\"literal\">all</span>Match);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"-----------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean <span class=\"literal\">any</span>Match = emps.stream()</span><br><span class=\"line\">            .<span class=\"literal\">any</span>Match(employee -&gt; employee.getName().equals(<span class=\"string\">\"林青霞\"</span>));</span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(<span class=\"literal\">any</span>Match);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"-----------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    boolean <span class=\"keyword\">none</span>Match = emps.stream()</span><br><span class=\"line\">            .<span class=\"keyword\">none</span>Match(employee -&gt; employee.getName().equals(<span class=\"string\">\"林青霞\"</span>));</span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">none</span>Match);</span><br><span class=\"line\">&#125;<span class=\"number\">123456789101112131415161718</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">false</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">true</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">false12345</span><br></pre></td></tr></table></figure>\n<p>2.第一个元素 、 任意一个元素</p>\n<figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> @Test</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> test12() &#123;</span><br><span class=\"line\">    Optional&lt;<span class=\"keyword\">String</span>&gt; first = emps.stream()</span><br><span class=\"line\">            .<span class=\"built_in\">map</span>(Employee::getName)</span><br><span class=\"line\">            .sorted()</span><br><span class=\"line\">            .findFirst(); <span class=\"comment\">// 获取第一个元素</span></span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(first.<span class=\"built_in\">get</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"-----------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Employee&gt; findAny = emps.parallelStream()</span><br><span class=\"line\">            .<span class=\"built_in\">filter</span>(employee -&gt; employee.getName().equals(<span class=\"string\">\"林青霞\"</span>))</span><br><span class=\"line\">            .findAny(); <span class=\"comment\">//任意一个元素</span></span><br><span class=\"line\">    System.out.<span class=\"built_in\">println</span>(findAny.<span class=\"built_in\">get</span>());</span><br><span class=\"line\">&#125;<span class=\"number\">123456789101112131415</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">东方不败</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=101, <span class=\"attribute\">name</span>=<span class=\"string\">'林青霞'</span>, <span class=\"attribute\">age</span>=28, <span class=\"attribute\">salary</span>=9889.99, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;123</span><br></pre></td></tr></table></figure>\n<p>3.统计总个数、 最大、 最小值</p>\n<figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 注意： 流一旦执行终止操作后， 就不能在重复使用</span></span><br><span class=\"line\">@<span class=\"keyword\">Test</span></span><br><span class=\"line\">public void test13() &#123;</span><br><span class=\"line\">    Stream&lt;Employee&gt; stream = emps.stream();</span><br><span class=\"line\">    long <span class=\"keyword\">count</span> = stream.<span class=\"keyword\">count</span>();</span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(<span class=\"keyword\">count</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"-----------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Double&gt; doubleOptional = emps.stream()</span><br><span class=\"line\">            .map(Employee::getSalary)</span><br><span class=\"line\">            .<span class=\"built_in\">max</span>(Double::<span class=\"keyword\">compare</span>); <span class=\"comment\">//最大值</span></span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(doubleOptional.<span class=\"built_in\">get</span>());</span><br><span class=\"line\"></span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(<span class=\"string\">\"-----------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    Optional&lt;Employee&gt; employeeOptional = emps.stream()</span><br><span class=\"line\">            .<span class=\"built_in\">min</span>((x, y) -&gt; Double.<span class=\"keyword\">compare</span>(x.getSalary(),  y.getSalary())); <span class=\"comment\">// 最小值</span></span><br><span class=\"line\">    System.<span class=\"keyword\">out</span>.println(employeeOptional.<span class=\"built_in\">get</span>());</span><br><span class=\"line\">&#125;1234567891011121314151617181920</span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">9889.99</span><br><span class=\"line\">-----------------</span><br><span class=\"line\">Employee&#123;id=103, name=<span class=\"emphasis\">'周星驰'</span>, age=40, salary=1233.88, status=null&#125;12345</span><br></pre></td></tr></table></figure>\n<h3 id=\"5-2-归约\"><a href=\"#5-2-归约\" class=\"headerlink\" title=\"5.2 归约\"></a>5.2 归约</h3><p><strong>备注:map 和 reduce 的连接通常称为 map-reduce 模式，因 Google 用它 来进行网络搜索而出名。</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>reduce(T iden, BinaryOperator b)</td>\n<td>可以将流中元素反复结合起来，得到一个值。 返回 T</td>\n</tr>\n<tr>\n<td>reduce(BinaryOperator b)</td>\n<td>可以将流中元素反复结合起来，得到一个值。 返回 Optional&lt; T&gt;</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong><br>1.求和</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\">public void test14() &#123;</span><br><span class=\"line\">     List&lt;Integer&gt; <span class=\"type\">list</span> = Arrays.asList(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     Integer sum = <span class=\"type\">list</span>.stream()</span><br><span class=\"line\">             .reduce(<span class=\"number\">0</span>, (x, y) -&gt; x + y);</span><br><span class=\"line\">     System.out.println(sum);</span><br><span class=\"line\"> &#125;<span class=\"number\">12345678</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">551</span></span><br></pre></td></tr></table></figure>\n<p>2.计算次数</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"literal\">void</span> test15() &#123;</span><br><span class=\"line\">    Optional&lt;Double&gt; doubleOptional = emps.stream()</span><br><span class=\"line\">            .<span class=\"built_in\">map</span>(Employee<span class=\"type\">::getSalary</span>)</span><br><span class=\"line\">            .reduce(Double<span class=\"type\">::max</span>);</span><br><span class=\"line\">    System.out.println(doubleOptional);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"string\">\"-----------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//查看 东方不败 出现的次数 -- 【此处还有点毛病】</span></span><br><span class=\"line\">    Optional&lt;<span class=\"built_in\">Integer</span>&gt; sumOptional = emps.stream()</span><br><span class=\"line\">            .<span class=\"built_in\">map</span>(Employee<span class=\"type\">::getName</span>)</span><br><span class=\"line\">            .flatMap(LambdaStramAPI<span class=\"type\">::filterCharacter</span>)</span><br><span class=\"line\">            .<span class=\"built_in\">map</span>((c) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (c.<span class=\"keyword\">equals</span>(<span class=\"string\">\"东\"</span>)) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;).reduce(<span class=\"built_in\">Integer</span><span class=\"type\">::sum</span>);</span><br><span class=\"line\">    System.out.println(sumOptional.get());</span><br><span class=\"line\">&#125;<span class=\"number\">12345678910111213141516171819</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight haml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Optional[9889.99]</span><br><span class=\"line\">-<span class=\"ruby\">----------------</span></span><br><span class=\"line\"><span class=\"ruby\"><span class=\"number\">0123</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"5-3-收集\"><a href=\"#5-3-收集\" class=\"headerlink\" title=\"5.3 收集\"></a>5.3 收集</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>collect(Collector c)</td>\n<td>将流转换为其他形式。接收一个 Collector接口的 实现，用于给Stream中元素做汇总的方法</td>\n</tr>\n</tbody>\n</table>\n<p><strong>案例：</strong><br>1.收集</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"literal\">void</span> test16()&#123;</span><br><span class=\"line\">   <span class=\"built_in\">List</span>&lt;<span class=\"built_in\">String</span>&gt; collect = emps.stream()</span><br><span class=\"line\">           .<span class=\"built_in\">map</span>(Employee<span class=\"type\">::getName</span>)</span><br><span class=\"line\">           .collect(Collectors.toList());</span><br><span class=\"line\">   collect.forEach(System.out<span class=\"type\">::println</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   System.out.println(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"built_in\">Set</span>&lt;<span class=\"built_in\">String</span>&gt; <span class=\"built_in\">set</span> = emps.stream()</span><br><span class=\"line\">           .<span class=\"built_in\">map</span>(Employee<span class=\"type\">::getName</span>)</span><br><span class=\"line\">           .collect(Collectors.toSet());</span><br><span class=\"line\">   <span class=\"built_in\">set</span>.forEach(System.out<span class=\"type\">::println</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   System.out.println(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">   HashSet&lt;<span class=\"built_in\">String</span>&gt; hashSet = emps.stream()</span><br><span class=\"line\">           .<span class=\"built_in\">map</span>(Employee<span class=\"type\">::getName</span>)</span><br><span class=\"line\">           .collect(Collectors.toCollection(HashSet<span class=\"type\">::new</span>));</span><br><span class=\"line\">   hashSet.forEach(System.out<span class=\"type\">::println</span>);</span><br><span class=\"line\">&#125;<span class=\"number\">123456789101112131415161718192021</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">林青霞</span><br><span class=\"line\">东方不败</span><br><span class=\"line\">周星驰</span><br><span class=\"line\">大圣</span><br><span class=\"line\">张无忌</span><br><span class=\"line\">东方不败</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">周星驰</span><br><span class=\"line\">林青霞</span><br><span class=\"line\">大圣</span><br><span class=\"line\">东方不败</span><br><span class=\"line\">张无忌</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">周星驰</span><br><span class=\"line\">林青霞</span><br><span class=\"line\">大圣</span><br><span class=\"line\">东方不败</span><br><span class=\"line\">张无忌123456789101112131415161718</span><br></pre></td></tr></table></figure>\n<p>2.收集统计</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 收集统计</span></span><br><span class=\"line\"> @Test</span><br><span class=\"line\"> <span class=\"keyword\">public</span>  <span class=\"keyword\">void</span> test17()&#123;</span><br><span class=\"line\">     <span class=\"comment\">// 统计总个数</span></span><br><span class=\"line\">     <span class=\"keyword\">Long</span> <span class=\"keyword\">count</span> = emps.stream()</span><br><span class=\"line\">             .<span class=\"keyword\">collect</span>(Collectors.counting());</span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(<span class=\"keyword\">count</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 求平均值</span></span><br><span class=\"line\">     <span class=\"keyword\">Double</span> avg = emps.stream()</span><br><span class=\"line\">             .<span class=\"keyword\">collect</span>(Collectors.averagingDouble(Employee::getSalary));</span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(avg);</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">// 求和</span></span><br><span class=\"line\">     <span class=\"keyword\">Double</span> sum = emps.stream()</span><br><span class=\"line\">             .<span class=\"keyword\">collect</span>(Collectors.summingDouble(Employee::getSalary));</span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(sum);</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//求最大值</span></span><br><span class=\"line\">     Optional&lt;Employee&gt; max = emps.stream()</span><br><span class=\"line\">             .<span class=\"keyword\">collect</span>(Collectors.maxBy((x, y) -&gt; <span class=\"keyword\">Double</span>.compare(x.getSalary(), y.getSalary())));</span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(max.get());</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//求最小值</span></span><br><span class=\"line\">     Optional&lt;<span class=\"keyword\">Double</span>&gt; min = emps.stream()</span><br><span class=\"line\">             .map(Employee::getSalary)</span><br><span class=\"line\">             .<span class=\"keyword\">collect</span>(Collectors.minBy(<span class=\"keyword\">Double</span>::compare));</span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(min.get());</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//统计分析</span></span><br><span class=\"line\">     DoubleSummaryStatistics doubleSummaryStatistics = emps.stream()</span><br><span class=\"line\">             .<span class=\"keyword\">collect</span>(Collectors.summarizingDouble(Employee::getSalary));</span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(doubleSummaryStatistics.getAverage());</span><br><span class=\"line\"></span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(<span class=\"string\">\"-------------------\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//拼接</span></span><br><span class=\"line\">     String <span class=\"keyword\">join</span> = emps.stream()</span><br><span class=\"line\">             .map(Employee::getName)</span><br><span class=\"line\">             .<span class=\"keyword\">collect</span>(Collectors.joining(<span class=\"string\">\",\"</span>, <span class=\"string\">\"--\"</span>, <span class=\"string\">\"--\"</span>));</span><br><span class=\"line\">     System.out.<span class=\"keyword\">println</span>(<span class=\"keyword\">join</span>);</span><br><span class=\"line\"> &#125;<span class=\"number\">1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight asciidoc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">6</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">4630.683333333333</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">27784.1</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">Employee&#123;id=101, name=<span class=\"emphasis\">'林青霞'</span>, age=28, salary=9889.99, status=null&#125;</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">1233.88</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">4630.683333333333</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">--林青霞,东方不败,周星驰,大圣,张无忌,东方不败--12345678910111213</span><br></pre></td></tr></table></figure>\n<p>3.收集-分组</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 分组</span></span><br><span class=\"line\">@Test</span><br><span class=\"line\"><span class=\"keyword\">public</span>  <span class=\"literal\">void</span> test18()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">List</span>&lt;Employee&gt;&gt; <span class=\"keyword\">group</span> = emps.stream()</span><br><span class=\"line\">            .collect(Collectors.groupingBy(Employee<span class=\"type\">::getName</span>));</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">group</span>);</span><br><span class=\"line\">&#125;<span class=\"number\">1234567</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">周星驰=[Employee&#123;<span class=\"attribute\">id</span>=103, <span class=\"attribute\">name</span>=<span class=\"string\">'周星驰'</span>, <span class=\"attribute\">age</span>=40, <span class=\"attribute\">salary</span>=1233.88, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;], </span><br><span class=\"line\">林青霞=[Employee&#123;<span class=\"attribute\">id</span>=101, <span class=\"attribute\">name</span>=<span class=\"string\">'林青霞'</span>, <span class=\"attribute\">age</span>=28, <span class=\"attribute\">salary</span>=9889.99, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;], </span><br><span class=\"line\">大圣=[Employee&#123;<span class=\"attribute\">id</span>=104, <span class=\"attribute\">name</span>=<span class=\"string\">'大圣'</span>, <span class=\"attribute\">age</span>=500, <span class=\"attribute\">salary</span>=5000.44, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;], </span><br><span class=\"line\">东方不败=[</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;, </span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">], </span><br><span class=\"line\">张无忌=[Employee&#123;<span class=\"attribute\">id</span>=105, <span class=\"attribute\">name</span>=<span class=\"string\">'张无忌'</span>, <span class=\"attribute\">age</span>=15, <span class=\"attribute\">salary</span>=3000.09, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;]&#125;123456789</span><br></pre></td></tr></table></figure>\n<p>4.收集-多级分组</p>\n<figure class=\"highlight lasso\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 多级分组</span></span><br><span class=\"line\">@Test</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"literal\">void</span> test19()&#123;</span><br><span class=\"line\">    <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">Map</span>&lt;<span class=\"built_in\">String</span>, <span class=\"built_in\">List</span>&lt;Employee&gt;&gt;&gt; <span class=\"keyword\">group</span> = emps.stream()</span><br><span class=\"line\">            .collect(Collectors.groupingBy(Employee<span class=\"type\">::getName</span>, Collectors.groupingBy((e) -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (e.getAge() &lt; <span class=\"number\">30</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"青年\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (e.getAge() &lt; <span class=\"number\">50</span>) <span class=\"keyword\">return</span> <span class=\"string\">\"中年\"</span>;</span><br><span class=\"line\">                <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"string\">\"老年\"</span>;</span><br><span class=\"line\">            &#125;)));</span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">group</span>);</span><br><span class=\"line\">&#125;<span class=\"number\">1234567891011</span></span><br></pre></td></tr></table></figure>\n<p>执行结果：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;周星驰=&#123;中年=[Employee&#123;<span class=\"attribute\">id</span>=103, <span class=\"attribute\">name</span>=<span class=\"string\">'周星驰'</span>, <span class=\"attribute\">age</span>=40, <span class=\"attribute\">salary</span>=1233.88, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;]&#125;, </span><br><span class=\"line\">林青霞=&#123;青年=[Employee&#123;<span class=\"attribute\">id</span>=101, <span class=\"attribute\">name</span>=<span class=\"string\">'林青霞'</span>, <span class=\"attribute\">age</span>=28, <span class=\"attribute\">salary</span>=9889.99, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;]&#125;, </span><br><span class=\"line\">大圣=&#123;老年=[Employee&#123;<span class=\"attribute\">id</span>=104, <span class=\"attribute\">name</span>=<span class=\"string\">'大圣'</span>, <span class=\"attribute\">age</span>=500, <span class=\"attribute\">salary</span>=5000.44, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;]&#125;, </span><br><span class=\"line\">东方不败=&#123;青年=[</span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;, </span><br><span class=\"line\">Employee&#123;<span class=\"attribute\">id</span>=102, <span class=\"attribute\">name</span>=<span class=\"string\">'东方不败'</span>, <span class=\"attribute\">age</span>=29, <span class=\"attribute\">salary</span>=4329.85, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;</span><br><span class=\"line\">]&#125;, </span><br><span class=\"line\">张无忌=&#123;青年=[Employee&#123;<span class=\"attribute\">id</span>=105, <span class=\"attribute\">name</span>=<span class=\"string\">'张无忌'</span>, <span class=\"attribute\">age</span>=15, <span class=\"attribute\">salary</span>=3000.09, <span class=\"attribute\">status</span>=<span class=\"literal\">null</span>&#125;]&#125;&#125;</span><br><span class=\"line\">123456789</span><br></pre></td></tr></table></figure>\n<p><strong>Collector 接口中方法的实现决定了如何对流执行收集操作(如收 集到 List、Set、Map)。但是 Collectors 实用类 供了很多静态 方法，可以方便地创建常见收集器实例，具体方法与实例如下表:</strong></p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回类型</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>toList</td>\n<td>List<t></t></td>\n<td>把流中元素收集到List</td>\n</tr>\n<tr>\n<td>List<employee> emps= list.stream().collect(Collectors.toList());</employee></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>toSet</td>\n<td>Set<t></t></td>\n<td>把流中元素收集到Set</td>\n</tr>\n<tr>\n<td>Set<employee> emps= list.stream().collect(Collectors.toSet());</employee></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>toCollection</td>\n<td>Collection<t></t></td>\n<td>把流中元素收集到创建的集合</td>\n</tr>\n<tr>\n<td>Collection<employee>emps=list.stream().collect(Collectors.toCollection(ArrayList::new));</employee></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>counting</td>\n<td>Long</td>\n<td>计算流中元素的个数</td>\n</tr>\n<tr>\n<td>long count = list.stream().collect(Collectors.counting());</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>summingInt</td>\n<td>Integer</td>\n<td>对流中元素的整数属性求和</td>\n</tr>\n<tr>\n<td>inttotal=list.stream().collect(Collectors.summingInt(Employee::getSalary));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>averagingInt</td>\n<td>Double</td>\n<td>计算流中元素Integer属性的平均 值</td>\n</tr>\n<tr>\n<td>doubleavg= list.stream().collect(Collectors.averagingInt(Employee::getSalary));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>summarizingInt</td>\n<td>IntSummaryStatistics</td>\n<td>收集流中Integer属性的统计值。 如:平均值</td>\n</tr>\n<tr>\n<td>IntSummaryStatisticsiss= list.stream().collect(Collectors.summarizingInt(Employee::getSalary));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>joining</td>\n<td>String</td>\n<td>连接流中每个字符串</td>\n</tr>\n<tr>\n<td>String str= list.stream().map(Employee::getName).collect(Collectors.joining());</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>maxBy</td>\n<td>Optional<t></t></td>\n<td>根据比较器选择最大值</td>\n</tr>\n<tr>\n<td>Optional<emp>max= list.stream().collect(Collectors.maxBy(comparingInt(Employee::getSalary)));</emp></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>minBy</td>\n<td>Optional<t></t></td>\n<td>根据比较器选择最小值</td>\n</tr>\n<tr>\n<td>Optional<emp> min = list.stream().collect(Collectors.minBy(comparingInt(Employee::getSalary)));</emp></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>reducing</td>\n<td>归约产生的类型</td>\n<td>从一个作为累加器的初始值 开始，利用BinaryOperator与 流中元素逐个结合，从而归 约成单个值</td>\n</tr>\n<tr>\n<td>inttotal=list.stream().collect(Collectors.reducing(0, Employee::getSalar, Integer::sum));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>collectingAndThen</td>\n<td>转换函数返回的类型</td>\n<td>包裹另一个收集器，对其结 果转换函数</td>\n</tr>\n<tr>\n<td>inthow= list.stream().collect(Collectors.collectingAndThen(Collectors.toList(), List::size));</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>groupingBy</td>\n<td>Map&lt;K, List<t>&gt;</t></td>\n<td>根据某属性值对流分组，属 性为K，结果为V</td>\n</tr>\n<tr>\n<td>Map&lt;Emp.Status, List<emp>&gt; map= list.stream() .collect(Collectors.groupingBy(Employee::getStatus));</emp></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>partitioningBy</td>\n<td>Map&lt;Boolean, List<t>&gt;</t></td>\n<td>根据true或false进行分区</td>\n</tr>\n<tr>\n<td>Map&lt;Boolean,List<emp>&gt;vd= list.stream().collect(Collectors.partitioningBy(Employee::getManage));</emp></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://github.com/liudongdong0909/java8/tree/master/java8-Lambda/src/com/donggua\" target=\"_blank\" rel=\"noopener\">相关源码地址：https://github.com/liudongdong0909/java8/tree/master/java8-Lambda/src/com/donggua</a></p>\n<p>以上就是全文的内容，由于水平有限，文章中难免会有错误，希望大家指正。谢谢~</p>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><p><a href=\"https://blog.csdn.net/liudongdong0909/article/details/77429875\" target=\"_blank\" rel=\"noopener\">JAVA8新特性——StreamAPI</a></p>\n"},{"title":"使用jqpaginator实现自定义分页","text":"为了实现内容丰富的分页页面，这里采用了jqpaginator和artTemplate结合的方式实现了自定义分页。 前期准备jqpaginator简介基本使用 定义存放分页内容的标签 1&lt;div id=\"paginator\" &gt;&lt;/div&gt; 初始化分页配置 123456789$('#paginator').jqPaginator(&#123; totalPages: 100, visiblePages: 10, currentPage: 1, onPageChange: function (num, type) &#123; //执行具体的分页逻辑 $('#text').html('当前第' + num + '页'); &#125;&#125;); paginator与页面上对应的存放分页内容的标签的id相一致 扩展方法jqPaginator提供了两个扩展方法，方便初始化后对组件进行操作。 初始化后，动态修改配置 123$('#id').jqPaginator('option', &#123; currentPage: 1&#125;); 销毁jqPaginator 1$('#id').jqPaginator('destroy'); artTemplate简介这里为了使页面内容更加灵活，实现方式更加简单，采用了artTemplate。下面简单介绍一下artTemplate的用法。详情可参见artTemplate官网 编写模板使用一个type=”text/html”的script标签存放模板： 12345678&lt;script id=\"test\" type=\"text/html\"&gt;&lt;h1&gt;&#123;&#123;title&#125;&#125;&lt;/h1&gt;&lt;ul&gt; &#123;&#123;each list as value i&#125;&#125; &lt;li&gt;索引 &#123;&#123;i + 1&#125;&#125; ：&#123;&#123;value&#125;&#125;&lt;/li&gt; &#123;&#123;/each&#125;&#125;&lt;/ul&gt;&lt;/script&gt; 渲染模板123456var data = &#123; title: '标签', list: ['文艺', '博客', '摄影', '电影', '民谣', '旅行', '吉他']&#125;;var html = template('test', data);document.getElementById('content').innerHTML = html; 具体示例引入相关文件 首先下载对应的jqpaginator.js 以及artTemplate.js。 然后再对应的页面中引入： 12345678&lt;%--分页插件--%&gt;&lt;script type='text/javascript' src=\"$&#123;appPath&#125;/plugins/jqPaginator/dist/jqpaginator.min.js\"&gt;&lt;/script&gt;&lt;%--模板页面--%&gt;&lt;script type='text/javascript' src=\"$&#123;appPath&#125;/common/olt/js/template.js\"&gt;&lt;/script&gt; 编写页面 首页需要编写页面的内容，这里需要进行分页显示的内容采用artTemplate的方式实现。 123456789101112&lt;!-- 课程中心的显示内容 --&gt;&lt;div id=\"fpap0010_wrapper\" class=\"tz-gallery\" &gt; &lt;div class=\"row\"&gt; &lt;div id=\"courseListHtml\"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;!-- 分页 --&gt;&lt;footer&gt; &lt;div class=\"dataTables_paginate paging_simple_numbers\" id=\"fcoz0060pages\" style=\"display: \"&gt; &lt;ul class=\"pagination\" id=\"pagination1\"&gt;&lt;/ul&gt; &lt;/div&gt;&lt;/footer&gt; 课程的模板页面： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;script id=\"coursesTemaple\" type=\"text/html\"&gt; &#123;&#123;if courseList&#125;&#125; &#123;&#123;each courseList as value &#125;&#125; &lt;div class=\"col-xs-3 col-md-3\" &gt; &lt;div class=\"thumbnail\"&gt; &#123;&#123;if value.photoPath&#125;&#125; &lt;div class=\"lightbox\"&gt; &lt;img alt=\"文件\" src=\"$&#123;appPath&#125;/files/olt/&#123;&#123;value.photoPath&#125;&#125;\" onclick=\"findTask1('&#123;&#123;value.courseId&#125;&#125;');\" style=\"width: 100%; height: 140px; cursor: pointer;\" /&gt; &lt;/div&gt; &#123;&#123;else if (!value.photoPath)&#125;&#125; &lt;div class=\"lightbox\"&gt; &lt;img alt=\"文件\" src=\"$&#123;appPath&#125;/common/olt/images/default.jpg\" onclick=\"findTask1('&#123;&#123;value.courseId&#125;&#125;');\" style=\"width: 100%; height: 140px; cursor: pointer;\" /&gt; &lt;/div&gt; &#123;&#123;/if&#125;&#125; &lt;div class=\"caption\"&gt; &#123;&#123;if (!value.countPeople)&#125;&#125; &lt;p&gt;&#123;&#123;value.courseName&#125;&#125;&amp;nbsp;(0人在学)&lt;p&gt; &#123;&#123;else if (value.countPeople)&#125;&#125; &lt;p&gt;&#123;&#123;value.courseName&#125;&#125;&amp;nbsp;(&#123;&#123;value.countPeople&#125;&#125;人在学)&lt;p&gt; &#123;&#123;/if&#125;&#125; &#123;&#123;if (!value.courseNum)&#125;&#125; &lt;div class=\"progress progress-striped active tz-progress-bar\"&gt; &lt;div class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow=\"40\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: 0%;\"&gt; &lt;/div&gt; &lt;/div&gt; &#123;&#123;else if (value.courseNum)&#125;&#125; &lt;div class=\"progress progress-striped active tz-progress-bar\" &gt; &lt;div class=\"progress-bar progress-bar-success\" role=\"progressbar\" aria-valuenow=\"40\" aria-valuemin=\"0\" aria-valuemax=\"100\" style=\"width: &#123;&#123;value.courseNum&#125;&#125;%;\"&gt; &lt;span class=\"tz-progress-span\"&gt; &#123;&#123;value.courseNum&#125;&#125;% &lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &#123;&#123;/if&#125;&#125; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &#123;&#123;/each&#125;&#125; &#123;&#123;else if !courseList&#125;&#125; 没有数据 &#123;&#123;/if&#125;&#125;&lt;/script&gt; 编写对应JS分页初始化123456789101112131415var total; //表示总页数$.jqPaginator( '#pagination1', &#123; totalPages : 1, visiblePages : 10, currentPage : 1, prev : '&lt;li class=\"prev\"&gt;&lt;a href=\"javascript:;\"&gt;上页&lt;/a&gt;&lt;/li&gt;', next : '&lt;li class=\"next\"&gt;&lt;a href=\"javascript:;\"&gt;下页&lt;/a&gt;&lt;/li&gt;', page : '&lt;li class=\"page\"&gt;&lt;a href=\"javascript:;\"&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/li&gt;', onPageChange : function(num, type) &#123; //请求课程数据 getCouserListData(num); &#125; &#125;); 请求课程数据12345678910111213141516function getCouserListData(page) &#123; $.ajax( &#123; data : &#123;page:page&#125;, url : '$&#123;appPath&#125;/olt/coz/fcoz0060_query.st?wtpage='+wtpage, type : 'POST', success : function(data) &#123; data = JSON.parse(data.resultStr); total = Math.ceil(data.recordCount / data.pageSize); $('#pagination1').jqPaginator('option', &#123; totalPages:total &#125;); courseList = data.list; showCourseListData(courseList); &#125; &#125;);&#125; 选模板1234567891011/** * 展示课程数据 * @param &#123;Object&#125; courseList */function showCourseListData(courseList) &#123; var courseListData = &#123; courseList: courseList &#125; var html = template('coursesTemaple', courseListData); document.getElementById('courseListHtml').innerHTML = html;&#125; 结果展示","content":"<p>为了实现内容丰富的分页页面，这里采用了jqpaginator和artTemplate结合的方式实现了自定义分页。</p>\n<h1 id=\"前期准备\"><a href=\"#前期准备\" class=\"headerlink\" title=\"前期准备\"></a>前期准备</h1><h2 id=\"jqpaginator简介\"><a href=\"#jqpaginator简介\" class=\"headerlink\" title=\"jqpaginator简介\"></a>jqpaginator简介</h2><h3 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h3><ul>\n<li>定义存放分页内容的标签</li>\n</ul>\n<figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;<span class=\"keyword\">div</span> <span class=\"built_in\">id</span>=<span class=\"string\">\"paginator\"</span> &gt;&lt;/<span class=\"keyword\">div</span>&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>初始化分页配置</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$(<span class=\"string\">'#paginator'</span>).jqPaginator(&#123;</span><br><span class=\"line\">    totalPages: <span class=\"number\">100</span>,</span><br><span class=\"line\">    visiblePages: <span class=\"number\">10</span>,</span><br><span class=\"line\">    currentPage: <span class=\"number\">1</span>,</span><br><span class=\"line\">    onPageChange: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">num, type</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//执行具体的分页逻辑</span></span><br><span class=\"line\">        $(<span class=\"string\">'#text'</span>).html(<span class=\"string\">'当前第'</span> + num + <span class=\"string\">'页'</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>paginator与页面上对应的存放分页内容的标签的id相一致</p>\n</blockquote>\n<h3 id=\"扩展方法\"><a href=\"#扩展方法\" class=\"headerlink\" title=\"扩展方法\"></a>扩展方法</h3><p>jqPaginator提供了两个扩展方法，方便初始化后对组件进行操作。</p>\n<ul>\n<li>初始化后，动态修改配置</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">(<span class=\"string\">'#id'</span>).jqPaginator(<span class=\"string\">'option'</span>, &#123;</span></span><br><span class=\"line\">    currentPage: 1</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p> 销毁jqPaginator</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\">(<span class=\"string\">'#id'</span>).jqPaginator(<span class=\"string\">'destroy'</span>);</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"artTemplate简介\"><a href=\"#artTemplate简介\" class=\"headerlink\" title=\"artTemplate简介\"></a>artTemplate简介</h2><p>这里为了使页面内容更加灵活，实现方式更加简单，采用了artTemplate。下面简单介绍一下artTemplate的用法。详情可参见<a href=\"http://www.jq22.com/jquery-info1097\" target=\"_blank\" rel=\"noopener\">artTemplate官网</a></p>\n<h3 id=\"编写模板\"><a href=\"#编写模板\" class=\"headerlink\" title=\"编写模板\"></a>编写模板</h3><p>使用一个type=”text/html”的script标签存放模板：</p>\n<figure class=\"highlight htmlbars\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"test\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/html\"</span>&gt;</span><span class=\"undefined\"></span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;title&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123;<span class=\"built_in\">each</span> list <span class=\"keyword\">as</span> value i&#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\">        <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>索引 &#123;&#123;i + 1&#125;&#125; ：</span><span class=\"template-variable\">&#123;&#123;value&#125;&#125;</span><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    </span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span><span class=\"xml\"></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h3 id=\"渲染模板\"><a href=\"#渲染模板\" class=\"headerlink\" title=\"渲染模板\"></a>渲染模板</h3><figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">data</span> = &#123;</span><br><span class=\"line\">    title: <span class=\"string\">'标签'</span>,</span><br><span class=\"line\">    list: [<span class=\"string\">'文艺'</span>, <span class=\"string\">'博客'</span>, <span class=\"string\">'摄影'</span>, <span class=\"string\">'电影'</span>, <span class=\"string\">'民谣'</span>, <span class=\"string\">'旅行'</span>, <span class=\"string\">'吉他'</span>]</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> html = template(<span class=\"string\">'test'</span>, <span class=\"keyword\">data</span>);</span><br><span class=\"line\">document.getElementById(<span class=\"string\">'content'</span>).innerHTML = html;</span><br></pre></td></tr></table></figure>\n<h1 id=\"具体示例\"><a href=\"#具体示例\" class=\"headerlink\" title=\"具体示例\"></a>具体示例</h1><h2 id=\"引入相关文件\"><a href=\"#引入相关文件\" class=\"headerlink\" title=\"引入相关文件\"></a>引入相关文件</h2><ul>\n<li>首先下载对应的jqpaginator.js 以及artTemplate.js。</li>\n<li>然后再对应的页面中引入：</li>\n</ul>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%--分页插件--%</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">'text/javascript'</span></span></span></span><br><span class=\"line\"><span class=\"xml\">\tsrc=\"$</span><span class=\"template-variable\">&#123;appPath&#125;</span><span class=\"xml\">/plugins/jqPaginator/dist/jqpaginator.min.js\"&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">%--模板页面--%</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">'text/javascript'</span></span></span></span><br><span class=\"line\"><span class=\"xml\">\tsrc=\"$</span><span class=\"template-variable\">&#123;appPath&#125;</span><span class=\"xml\">/common/olt/js/template.js\"&gt;</span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写页面\"><a href=\"#编写页面\" class=\"headerlink\" title=\"编写页面\"></a>编写页面</h2><ul>\n<li>首页需要编写页面的内容，这里需要进行分页显示的内容采用artTemplate的方式实现。</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 课程中心的显示内容 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fpap0010_wrapper\"</span> <span class=\"attr\">class</span>=<span class=\"string\">\"tz-gallery\"</span> &gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"row\"</span>&gt;</span></span><br><span class=\"line\">     \t <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"courseListHtml\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 分页 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">footer</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"dataTables_paginate paging_simple_numbers\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"fcoz0060pages\"</span> <span class=\"attr\">style</span>=<span class=\"string\">\"display: \"</span>&gt;</span></span><br><span class=\"line\">\t\t<span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">class</span>=<span class=\"string\">\"pagination\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"pagination1\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\">\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>课程的模板页面：</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">id</span>=<span class=\"string\">\"coursesTemaple\"</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/html\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123;<span class=\"builtin-name\">if</span> courseList&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t    &#123;&#123;<span class=\"keyword\">each</span> courseList <span class=\"keyword\">as</span> value &#125;&#125;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"col-xs-3 col-md-3\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"javascript\">               &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"thumbnail\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t    </span><span class=\"template-variable\">&#123;&#123;<span class=\"builtin-name\">if</span>  value.photoPath&#125;&#125;</span><span class=\"xml\">\t\t\t  </span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"lightbox\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t&lt;img alt=<span class=\"string\">\"文件\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\tsrc=<span class=\"string\">\"$&#123;appPath&#125;/files/olt/&#123;&#123;value.photoPath&#125;&#125;\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\t onclick=<span class=\"string\">\"findTask1('&#123;&#123;value.courseId&#125;&#125;');\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\tstyle=<span class=\"string\">\"width: 100%; height: 140px; cursor: pointer;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t</span><span class=\"template-variable\">&#123;&#123;<span class=\"builtin-name\">else</span> <span class=\"builtin-name\">if</span> (!value.photoPath)&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"lightbox\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t&lt;img alt=<span class=\"string\">\"文件\"</span> src=<span class=\"string\">\"$&#123;appPath&#125;/common/olt/images/default.jpg\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\t onclick=<span class=\"string\">\"findTask1('&#123;&#123;value.courseId&#125;&#125;');\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\tstyle=<span class=\"string\">\"width: 100%; height: 140px; cursor: pointer;\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t</span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">if</span></span>&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"caption\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t</span><span class=\"template-variable\">&#123;&#123;<span class=\"builtin-name\">if</span> (!value.countPeople)&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;value.courseName&#125;&#125;</span><span class=\"xml\">&amp;nbsp;(0人在学)<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t</span><span class=\"template-variable\">&#123;&#123;<span class=\"builtin-name\">else</span> <span class=\"builtin-name\">if</span> (value.countPeople)&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><span class=\"template-variable\">&#123;&#123;value.courseName&#125;&#125;</span><span class=\"xml\">&amp;nbsp;(</span><span class=\"template-variable\">&#123;&#123;value.countPeople&#125;&#125;</span><span class=\"xml\">人在学)<span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t</span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">if</span></span>&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t</span><span class=\"template-variable\">&#123;&#123;<span class=\"builtin-name\">if</span> (!value.courseNum)&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"progress progress-striped active tz-progress-bar\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"progress-bar progress-bar-success\"</span> role=<span class=\"string\">\"progressbar\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\t\taria-valuenow=<span class=\"string\">\"40\"</span> aria-valuemin=<span class=\"string\">\"0\"</span> aria-valuemax=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\t\tstyle=<span class=\"string\">\"width: 0%;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t</span><span class=\"template-variable\">&#123;&#123;<span class=\"builtin-name\">else</span> <span class=\"builtin-name\">if</span> (value.courseNum)&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"progress progress-striped active tz-progress-bar\"</span> &gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t&lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"progress-bar progress-bar-success\"</span> role=<span class=\"string\">\"progressbar\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\t\taria-valuenow=<span class=\"string\">\"40\"</span> aria-valuemin=<span class=\"string\">\"0\"</span> aria-valuemax=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"actionscript\">\t\t\t\t\t\t\t\t\tstyle=<span class=\"string\">\"width: &#123;&#123;value.courseNum&#125;&#125;%;\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">\t\t\t\t\t\t\t\t\t&lt;span <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"tz-progress-span\"</span>&gt; &#123;&#123;value.courseNum&#125;&#125;%  <span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t\t</span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">if</span></span>&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"undefined\">\t\t\t\t\t</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">                <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">\t\t\t<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">        </span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">each</span></span>&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    </span><span class=\"template-variable\">&#123;&#123;<span class=\"builtin-name\">else</span> <span class=\"builtin-name\">if</span> !courseList&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"undefined\">                    没有数据</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\">    </span><span class=\"template-tag\">&#123;&#123;/<span class=\"name\"><span class=\"builtin-name\">if</span></span>&#125;&#125;</span><span class=\"xml\"></span></span></span><br><span class=\"line\"><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"编写对应JS\"><a href=\"#编写对应JS\" class=\"headerlink\" title=\"编写对应JS\"></a>编写对应JS</h2><h3 id=\"分页初始化\"><a href=\"#分页初始化\" class=\"headerlink\" title=\"分页初始化\"></a>分页初始化</h3><figure class=\"highlight stata\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> <span class=\"keyword\">total</span>; <span class=\"comment\">//表示总页数</span></span><br><span class=\"line\">$.jqPaginator(</span><br><span class=\"line\">\t'#pagination1',</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\ttotalPages : 1,</span><br><span class=\"line\">\t\tvisiblePages : 10,</span><br><span class=\"line\">\t\tcurrentPage : 1,</span><br><span class=\"line\">\t\tprev : '&lt;<span class=\"keyword\">li</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"prev\"</span>&gt;&lt;a href=<span class=\"string\">\"javascript:;\"</span>&gt;上页&lt;/a&gt;&lt;/<span class=\"keyword\">li</span>&gt;',</span><br><span class=\"line\">\t\tnext : '&lt;<span class=\"keyword\">li</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"next\"</span>&gt;&lt;a href=<span class=\"string\">\"javascript:;\"</span>&gt;下页&lt;/a&gt;&lt;/<span class=\"keyword\">li</span>&gt;',</span><br><span class=\"line\">\t\tpage : '&lt;<span class=\"keyword\">li</span> <span class=\"keyword\">class</span>=<span class=\"string\">\"page\"</span>&gt;&lt;a href=<span class=\"string\">\"javascript:;\"</span>&gt;&#123;&#123;page&#125;&#125;&lt;/a&gt;&lt;/<span class=\"keyword\">li</span>&gt;',</span><br><span class=\"line\">\t\tonPageChange : function(num, <span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\">\t\t    <span class=\"comment\">//请求课程数据</span></span><br><span class=\"line\">\t\t\tgetCouserListData(num);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n<h3 id=\"请求课程数据\"><a href=\"#请求课程数据\" class=\"headerlink\" title=\"请求课程数据\"></a>请求课程数据</h3><figure class=\"highlight xl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getCouserListData(<span class=\"built_in\">page</span>) &#123;</span><br><span class=\"line\">\t$.ajax( &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">data</span> : &#123;<span class=\"built_in\">page</span>:<span class=\"built_in\">page</span>&#125;,</span><br><span class=\"line\">\t\turl : <span class=\"string\">'$&#123;appPath&#125;/olt/coz/fcoz0060_query.st?wtpage='</span>+wtpage,</span><br><span class=\"line\">\t\ttype : <span class=\"string\">'POST'</span>,</span><br><span class=\"line\">\t\tsuccess : function(<span class=\"keyword\">data</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">data</span> = JSON.parse(<span class=\"keyword\">data</span>.resultStr);</span><br><span class=\"line\">\t\t\ttotal = Math.<span class=\"built_in\">ceil</span>(<span class=\"keyword\">data</span>.recordCount / <span class=\"keyword\">data</span>.pageSize);</span><br><span class=\"line\">\t\t\t$(<span class=\"string\">'#pagination1'</span>).jqPaginator(<span class=\"string\">'option'</span>, &#123;</span><br><span class=\"line\">\t\t\t    totalPages:total</span><br><span class=\"line\">\t\t\t&#125;);</span><br><span class=\"line\">\t\t\tcourseList = <span class=\"keyword\">data</span>.list;</span><br><span class=\"line\">\t\t\tshowCourseListData(courseList);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"选模板\"><a href=\"#选模板\" class=\"headerlink\" title=\"选模板\"></a>选模板</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 展示课程数据</span></span><br><span class=\"line\"><span class=\"comment\"> * @param &#123;Object&#125; courseList</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showCourseListData</span>(<span class=\"params\">courseList</span>) </span>&#123;</span><br><span class=\"line\">     <span class=\"keyword\">var</span> courseListData = &#123;</span><br><span class=\"line\">\t\t courseList: courseList</span><br><span class=\"line\">\t &#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> html = template(<span class=\"string\">'coursesTemaple'</span>, courseListData);</span><br><span class=\"line\">\t\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">'courseListHtml'</span>).innerHTML = html;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h1 id=\"结果展示\"><a href=\"#结果展示\" class=\"headerlink\" title=\"结果展示\"></a>结果展示</h1><p><img src=\"/images/plugins/page.png\" alt=\"acatar\"></p>\n"},{"title":"快速搭建小程序项目","text":"小程序搭建 开发工具安装微信公众平台提供了winddows64,windows32,mac三个操作系统下的安装包，我们选择合适自己下载即可。（微信开发者工具下载链接） 备注： 小程序的开发工具除了使用官方提供的微信开发者工具之外，还可以使用SublimeText,或者是WebStrom等，然后配合使用微信开发者工具进行调试操作。 快速创建项目在根据提示安装完成之后，我们需要用微信扫描二维码登录微信开发者工具。然后选择小程序项目 然后我们选择小程序存放的位置，填写对应的demo，选择体验小程序，并且勾选建立普通快速启动模板。 这里我们先使用无appId的方式即体验模式，虽然无法进行代码真机预览和上传等操作，部分 API 无法正常调用，但是不影响我们正常的开发。项目创建完如下图所示 关于开发工具再此不做详细说明，详情可以参考小程序开发工具介绍 项目结构介绍小程序文件类型小程序中有且只有以下4中类型的文件： json 后缀的 JSON 配置文件 wxml 后缀的 WXML 模板文件 wxss 后缀的 WXSS 样式文件 js 后缀的 JS 脚本逻辑文件 包结构小程序的默认的包结构如下所示 1234567891011121314151617+- pages +- indexs - index.js - index.json - index.wsml - index.wxss +- logs - logs.js - logs.json - logs.wsml - logs.wxss+- utils - util.jsapp.jsapp.jsonapp.wxssproject.config.json 所有的配置遵循就近原则 包结构说明1.app.json 小程序逻辑（必须） app.json中的App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。 2.app.json 小程序公共设置（必须） app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。 3.app.wxss 全局样式文件 在app.wxss中可以定义一些全局属性的样式，这样相同的养生石在单独的页面中就无需在配置了。 4.project.config.json 是工具配置文件。 所有对当前开发工具做的操作都会保存到project.config.json文件中，当我们重新安装工具或者是更换电脑时，只需导入项目的代码即可恢复我们之前对工具的一些设置。 5.pages 小程序模板存放的文件夹 在小程序中所有的模板都在此文件中，并且每一个页面对应中有4个文件 文件类型 必填 作用 js 是 页面逻辑 wxml 是 页面结构 wxss 否 页面样式表 json 否 页面配置 为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。 页面中的wxss样式配置如果与app.wxss有相同的，那么采取就近原则，优先使用页面的样式。 小程序的页面是可以嵌套的，对应的可以有二级页面，三级页面等等，但是最多只能支持5级页面，这一点主要是从小程序的性能方面考虑，从而做的限制。 编写简单页面移动端的分辨率与rpx在开始编写页面之前我们首先要了解一下分辨率的概念，因为小程序是移动端的开发，在不同的机型中是需要进行适配的，所以要注意像素的使用。 pt 逻辑分辨率，pt的大小与屏幕尺寸与关系，简单可以理解为长度和视觉单位 px 物理分辨率，与屏幕尺寸没有关系，用于描述一个单位中像素点的多少 reader 设备像素比 一个pt包含多少个px，人类视觉极限为@2x ppi(dpi） 每一寸包含的px 从上述图中可以看出1个pt可以有1个px构成也可以有2个，甚至是3个… 小程序推荐的使用的单位是rpx。他和px之间的关系为 1rpx = 1px 。 唯一的区别就是rpx可以根据屏幕进行适配，而px不可以。 扩展 不是所有的单位都适合rpx当需要的元素大小适应屏幕尺寸，就选择rpx作为单位，否者使用px作为单位。一般来说文字不建议使用rpx；建议margin-top，margint-bottom 使用rpx,因为屏幕是可以进行垂直滚动的，而margin-left，margin-right使用px，当然这个不是绝对的也是根据具体问题具体分析的。 为什么使用ip6的物理分辨率来设计UI?小程序的模拟器采用的是逻辑分辨率。在设计时采用的就是根据iphone6的屏幕来设计的。所以存在:1px = 1rpx=2pt。方便开发，所以在调试时使用iphone6模拟器进行调试。 为什么iphone plus 的设备相素比大于iphone6的，但是图像并没有更清晰呢？从理论上来说同一个单位的包含的物理像素点多，显示的图像会更细腻，更清晰，但是人类的极限的2备的像素比，所以虽然iphone6 plus 的像素比为3备的像素比但是我们视觉上并没有太大的感觉。 创建页面下图是我们将要实现的一个页面。 创建文件首先创建一个空的项目，建立小程序中必须的文件app.json，app.wxss以及pages文件夹,以及。然在pages下面创建welcome文件夹，然后建立对应welcome.wxml,welcome.wxss文件。 创建完之后我们需要把页面注册的小程序中，也就是配置到app.json的pages中。否则是不可以预览这个页面的。 12345&#123; \"pages\": [ \"pages/welcome/welcome\" ]&#125; 小程序中规定，pages下面的第一个页面，默认为显示的第一个页面 创建页面的一个快捷方式就是在直接在 app.json的pages数组中加入“pages/xxx/xxx”。在保存之后会在pages生成对应的xxx文件下面生成xxx.wxml、xxx.wxss、xxx.js以及xxx.json。 编写welcome.wxml小程序中有一个基本的视图容器view,类似于html里面的div,用来分割页面中的不同部分。文字可以直接写也可使用text标签包围。 1234567&lt;view class='container'&gt; &lt;image class=\"welcome-avatar\" src='/images/welcome.jpg'&gt;&lt;/image&gt; &lt;text class=\"welcome-title\"&gt;Cheryl Demo&lt;/text&gt; &lt;view class='moto-container'&gt; &lt;text class='moto'&gt;开启小程序之旅 &lt;/text&gt; &lt;/view&gt;&lt;/view&gt; text标签的相关Tips 使用text包围的文字可以添加自定义样式，也可在手机中可以长按选中。 可以识别转移字符,例如\\n识别为换行 各个操作系统的空格标准并不一致。 组件内只支持 嵌套。 在编写完页面之后，编写对应的wxss文件。 1234567891011121314151617181920212223242526272829303132333435363738/* pages/welcome/welcome.wxss */.container&#123; display:flex;/变成弹性模型/ flex-direction: column;/垂直布局/ align-items: center;/* 居中对齐 */&#125;.welcome-avatar&#123; width: 200rpx; height: 200rpx; margin-top: 160rpx; /*图片显示成圆形 */ border-radius: 500px; &#125;.welcome-title&#123; font-size: 22px; font-weight: bold; margin-top: 40rpx; color: gray;&#125;.moto-container&#123; border: 1px solid #FF99FF; border-radius: 5px; margin-top: 60rpx; background-color: #FF99FF;&#125;.moto&#123; font-size: 20px; color: #ffffff; padding: 20px;&#125;page&#123; background-color: #FFCCFF;&#125; 在小程序中不需要引入 wxss,因为app.json的pages中注册页面的时候无需指明具体的文件，所以pages可以自动的把welcome中4中不同类型的文件关联在一起。 在wxml中样式可以使用class也可以使用style设置，建议静态样式放在wxss中有class指明，动态样式放在style。 可能遇到的问题在设置页面背景色的时候，如果我们在.container{}中设定了 background-color,那么会出现如下的结果 [解决方法] 指定height:1334rpx;但是如果换在其他模拟器中还是会出现上述问题。 指定height:100% 也无法实现预期的效果，原因的container中是有元素扩充起来的。 注意小程序默认在我们编写的骨架外面包裹了一个page标签，可以通过这个标签来设置整屏的颜色。","content":"<h1 id=\"小程序搭建\"><a href=\"#小程序搭建\" class=\"headerlink\" title=\"小程序搭建\"></a>小程序搭建</h1><hr>\n<h2 id=\"开发工具安装\"><a href=\"#开发工具安装\" class=\"headerlink\" title=\"开发工具安装\"></a>开发工具安装</h2><p>微信公众平台提供了winddows64,windows32,mac三个操作系统下的安装包，我们选择合适自己下载即可。（<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html\" target=\"_blank\" rel=\"noopener\">微信开发者工具下载链接</a>）</p>\n<blockquote>\n<p>备注： 小程序的开发工具除了使用官方提供的微信开发者工具之外，还可以使用SublimeText,或者是WebStrom等，然后配合使用微信开发者工具进行调试操作。</p>\n</blockquote>\n<h2 id=\"快速创建项目\"><a href=\"#快速创建项目\" class=\"headerlink\" title=\"快速创建项目\"></a>快速创建项目</h2><p>在根据提示安装完成之后，我们需要用微信扫描二维码登录微信开发者工具。然后选择小程序项目</p>\n<p><img src=\"/images/miniprogram/choose.png\" alt=\"avatar\"></p>\n<p>然后我们选择小程序存放的位置，填写对应的demo，选择体验小程序，并且勾选建立普通快速启动模板。</p>\n<p><img src=\"/images/miniprogram/newDemo.png\" alt=\"avatar\"></p>\n<p>这里我们先使用无appId的方式即体验模式，虽然无法进行代码真机预览和上传等操作，部分 API 无法正常调用，但是不影响我们正常的开发。项目创建完如下图所示</p>\n<p><img src=\"/images/miniprogram/demo-detail.png\" alt=\"avatar\"></p>\n<blockquote>\n<p>关于开发工具再此不做详细说明，详情可以参考<a href=\"https://developers.weixin.qq.com/miniprogram/dev/devtools/page.html#%E5%90%AF%E5%8A%A8%E9%A1%B5\" target=\"_blank\" rel=\"noopener\">小程序开发工具介绍</a></p>\n</blockquote>\n<h2 id=\"项目结构介绍\"><a href=\"#项目结构介绍\" class=\"headerlink\" title=\"项目结构介绍\"></a>项目结构介绍</h2><h3 id=\"小程序文件类型\"><a href=\"#小程序文件类型\" class=\"headerlink\" title=\"小程序文件类型\"></a>小程序文件类型</h3><p>小程序中有且只有以下4中类型的文件：</p>\n<ul>\n<li>json 后缀的 JSON 配置文件</li>\n<li>wxml 后缀的 WXML 模板文件</li>\n<li>wxss 后缀的 WXSS 样式文件</li>\n<li>js 后缀的 JS 脚本逻辑文件</li>\n</ul>\n<h3 id=\"包结构\"><a href=\"#包结构\" class=\"headerlink\" title=\"包结构\"></a>包结构</h3><p>小程序的默认的包结构如下所示</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+- pages</span><br><span class=\"line\">\t+- indexs</span><br><span class=\"line\">\t\t- index.js</span><br><span class=\"line\">\t\t- index.json</span><br><span class=\"line\">\t\t- index.wsml</span><br><span class=\"line\">\t\t- index.wxss</span><br><span class=\"line\">\t+- logs</span><br><span class=\"line\">\t\t- logs.js</span><br><span class=\"line\">\t\t- logs.json</span><br><span class=\"line\">\t\t- logs.wsml</span><br><span class=\"line\">\t\t- logs.wxss</span><br><span class=\"line\">+- utils</span><br><span class=\"line\">\t- util.js</span><br><span class=\"line\">app.js</span><br><span class=\"line\">app.json</span><br><span class=\"line\">app.wxss</span><br><span class=\"line\">project<span class=\"selector-class\">.config</span><span class=\"selector-class\">.json</span></span><br></pre></td></tr></table></figure>\n<p>所有的配置遵循就近原则</p>\n<h3 id=\"包结构说明\"><a href=\"#包结构说明\" class=\"headerlink\" title=\"包结构说明\"></a>包结构说明</h3><p>1.app.json 小程序逻辑（必须）</p>\n<blockquote>\n<p>app.json中的App() 函数用来注册一个小程序。接受一个 object 参数，其指定小程序的生命周期函数等。</p>\n</blockquote>\n<p>2.app.json 小程序公共设置（必须）</p>\n<blockquote>\n<p>app.json文件用来对微信小程序进行全局配置，决定页面文件的路径、窗口表现、设置网络超时时间、设置多 tab 等。</p>\n</blockquote>\n<p>3.app.wxss 全局样式文件 </p>\n<blockquote>\n<p>在app.wxss中可以定义一些全局属性的样式，这样相同的养生石在单独的页面中就无需在配置了。</p>\n</blockquote>\n<p>4.project.config.json 是工具配置文件。</p>\n<blockquote>\n<p>所有对当前开发工具做的操作都会保存到project.config.json文件中，当我们重新安装工具或者是更换电脑时，只需导入项目的代码即可恢复我们之前对工具的一些设置。</p>\n</blockquote>\n<p>5.pages 小程序模板存放的文件夹</p>\n<blockquote>\n<p>在小程序中所有的模板都在此文件中，并且每一个页面对应中有4个文件</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>文件类型</th>\n<th>必填</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>js</td>\n<td>是</td>\n<td>页面逻辑</td>\n</tr>\n<tr>\n<td>wxml</td>\n<td>是</td>\n<td>页面结构</td>\n</tr>\n<tr>\n<td>wxss</td>\n<td>否</td>\n<td>页面样式表</td>\n</tr>\n<tr>\n<td>json</td>\n<td>否</td>\n<td>页面配置</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<ul>\n<li>为了方便开发者减少配置项，描述页面的四个文件必须具有相同的路径与文件名。  </li>\n<li>页面中的wxss样式配置如果与app.wxss有相同的，那么采取就近原则，优先使用页面的样式。 </li>\n<li>小程序的页面是可以嵌套的，对应的可以有二级页面，三级页面等等，但是最多只能支持5级页面，这一点主要是从小程序的性能方面考虑，从而做的限制。  </li>\n</ul>\n</blockquote>\n<h1 id=\"编写简单页面\"><a href=\"#编写简单页面\" class=\"headerlink\" title=\"编写简单页面\"></a>编写简单页面</h1><h2 id=\"移动端的分辨率与rpx\"><a href=\"#移动端的分辨率与rpx\" class=\"headerlink\" title=\"移动端的分辨率与rpx\"></a>移动端的分辨率与rpx</h2><p>在开始编写页面之前我们首先要了解一下分辨率的概念，因为小程序是移动端的开发，在不同的机型中是需要进行适配的，所以要注意像素的使用。</p>\n<p><img src=\"/images/miniprogram/resolution.png\" alt=\"avatar\"></p>\n<ul>\n<li>pt  逻辑分辨率，pt的大小与屏幕尺寸与关系，简单可以理解为长度和视觉单位</li>\n<li>px  物理分辨率，与屏幕尺寸没有关系，用于描述一个单位中像素点的多少</li>\n<li>reader 设备像素比 一个pt包含多少个px，人类视觉极限为@2x</li>\n<li>ppi(dpi） 每一寸包含的px</li>\n</ul>\n<p>从上述图中可以看出1个pt可以有1个px构成也可以有2个，甚至是3个…</p>\n<p>小程序推荐的使用的单位是rpx。他和px之间的关系为 1rpx = 1px 。 唯一的区别就是rpx可以根据屏幕进行适配，而px不可以。</p>\n<h3 id=\"扩展\"><a href=\"#扩展\" class=\"headerlink\" title=\"扩展\"></a>扩展</h3><ul>\n<li>不是所有的单位都适合rpx<br>当需要的元素大小适应屏幕尺寸，就选择rpx作为单位，否者使用px作为单位。一般来说文字不建议使用rpx；建议margin-top，margint-bottom 使用rpx,因为屏幕是可以进行垂直滚动的，而margin-left，margin-right使用px，当然这个不是绝对的也是根据具体问题具体分析的。</li>\n<li>为什么使用ip6的物理分辨率来设计UI?<br>小程序的模拟器采用的是逻辑分辨率。在设计时采用的就是根据iphone6的屏幕来设计的。所以存在:1px = 1rpx=2pt。方便开发，所以在调试时使用iphone6模拟器进行调试。</li>\n<li>为什么iphone plus 的设备相素比大于iphone6的，但是图像并没有更清晰呢？<br>从理论上来说同一个单位的包含的物理像素点多，显示的图像会更细腻，更清晰，但是人类的极限的2备的像素比，所以虽然iphone6 plus 的像素比为3备的像素比但是我们视觉上并没有太大的感觉。</li>\n</ul>\n<h2 id=\"创建页面\"><a href=\"#创建页面\" class=\"headerlink\" title=\"创建页面\"></a>创建页面</h2><p>下图是我们将要实现的一个页面。<br><img src=\"/images/miniprogram/welcome.png\" alt=\"avatar\"></p>\n<h3 id=\"创建文件\"><a href=\"#创建文件\" class=\"headerlink\" title=\"创建文件\"></a>创建文件</h3><p>首先创建一个空的项目，建立小程序中必须的文件app.json，app.wxss以及pages文件夹,以及。然在pages下面创建welcome文件夹，然后建立对应welcome.wxml,welcome.wxss文件。</p>\n<p><img src=\"/images/miniprogram/2-package.png\" alt=\"avatar\"></p>\n<p>创建完之后我们需要把页面注册的小程序中，也就是配置到app.json的pages中。否则是不可以预览这个页面的。</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"pages\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"pages/welcome/welcome\"</span>   </span><br><span class=\"line\">   ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<ul>\n<li>小程序中规定，pages下面的第一个页面，默认为显示的第一个页面  </li>\n<li>创建页面的一个快捷方式就是在直接在 app.json的pages数组中加入“pages/xxx/xxx”。在保存之后会在pages生成对应的xxx文件下面生成xxx.wxml、xxx.wxss、xxx.js以及xxx.json。</li>\n</ul>\n</blockquote>\n<h3 id=\"编写welcome-wxml\"><a href=\"#编写welcome-wxml\" class=\"headerlink\" title=\"编写welcome.wxml\"></a>编写welcome.wxml</h3><p>小程序中有一个基本的视图容器view,类似于html里面的div,用来分割页面中的不同部分。文字可以直接写也可使用text标签包围。</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'container'</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">image</span> <span class=\"attr\">class</span>=<span class=\"string\">\"welcome-avatar\"</span> <span class=\"attr\">src</span>=<span class=\"string\">'/images/welcome.jpg'</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">image</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">\"welcome-title\"</span>&gt;</span>Cheryl  Demo<span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">view</span> <span class=\"attr\">class</span>=<span class=\"string\">'moto-container'</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">text</span> <span class=\"attr\">class</span>=<span class=\"string\">'moto'</span>&gt;</span>开启小程序之旅 <span class=\"tag\">&lt;/<span class=\"name\">text</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">view</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>text标签的相关Tips  </li>\n</ul>\n<blockquote>\n<ul>\n<li>使用text包围的文字可以添加自定义样式，也可在手机中可以长按选中。</li>\n<li>可以识别转移字符,例如\\n识别为换行   </li>\n<li>各个操作系统的空格标准并不一致。  </li>\n<li><text> 组件内只支持 <text> 嵌套。  </text></text></li>\n</ul>\n</blockquote>\n<p>在编写完页面之后，编写对应的wxss文件。</p>\n<figure class=\"highlight mipsasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* pages/welcome/welcome.wxss */</span></span><br><span class=\"line\">.container&#123;</span><br><span class=\"line\"><span class=\"symbol\">  display:</span>flex<span class=\"comment\">;/变成弹性模型/</span></span><br><span class=\"line\">  flex-<span class=\"keyword\">direction: </span>column<span class=\"comment\">;/垂直布局/</span></span><br><span class=\"line\">  align-items: center<span class=\"comment\">;/* 居中对齐 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.welcome-avatar&#123;</span><br><span class=\"line\"><span class=\"symbol\">  width:</span> <span class=\"number\">200</span>rpx<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">  height:</span> <span class=\"number\">200</span>rpx<span class=\"comment\">;</span></span><br><span class=\"line\">  margin-top: <span class=\"number\">160</span>rpx<span class=\"comment\">;</span></span><br><span class=\"line\">  <span class=\"comment\">/*图片显示成圆形  */</span></span><br><span class=\"line\">  <span class=\"keyword\">border-radius: </span><span class=\"number\">500</span>px<span class=\"comment\">; </span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.welcome-title&#123;</span><br><span class=\"line\">  font-size: <span class=\"number\">22</span>px<span class=\"comment\">;</span></span><br><span class=\"line\">  font-weight: <span class=\"keyword\">bold; </span></span><br><span class=\"line\">  margin-top: <span class=\"number\">40</span>rpx<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">  color:</span>  gray<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.moto-container&#123;</span><br><span class=\"line\"><span class=\"symbol\">  border:</span> <span class=\"number\">1</span>px solid <span class=\"comment\">#FF99FF;</span></span><br><span class=\"line\">  <span class=\"keyword\">border-radius: </span><span class=\"number\">5</span>px<span class=\"comment\">;</span></span><br><span class=\"line\">  margin-top: <span class=\"number\">60</span>rpx<span class=\"comment\">;</span></span><br><span class=\"line\">  <span class=\"keyword\">background-color: </span><span class=\"comment\">#FF99FF;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.moto&#123;</span><br><span class=\"line\">  font-size: <span class=\"number\">20</span>px<span class=\"comment\">;</span></span><br><span class=\"line\"><span class=\"symbol\">  color:</span> <span class=\"comment\">#ffffff;</span></span><br><span class=\"line\"><span class=\"symbol\">  padding:</span> <span class=\"number\">20</span>px<span class=\"comment\">;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">page&#123;</span><br><span class=\"line\">  <span class=\"keyword\">background-color: </span><span class=\"comment\">#FFCCFF;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在小程序中不需要引入 wxss,因为app.json的pages中注册页面的时候无需指明具体的文件，所以pages可以自动的把welcome中4中不同类型的文件关联在一起。</p>\n<blockquote>\n<p>在wxml中样式可以使用class也可以使用style设置，建议静态样式放在wxss中有class指明，动态样式放在style。</p>\n</blockquote>\n<ul>\n<li>可能遇到的问题<br>在设置页面背景色的时候，如果我们在.container{}中设定了 background-color,那么会出现如下的结果<br><img src=\"F:/hexo/source/_posts/minipogram/images/miniprogram/2-error.png\" alt=\"avatar\"></li>\n</ul>\n<p>[解决方法]  </p>\n<ul>\n<li>指定height:1334rpx;但是如果换在其他模拟器中还是会出现上述问题。  </li>\n<li>指定height:100% 也无法实现预期的效果，原因的container中是有元素扩充起来的。  </li>\n<li>注意小程序默认在我们编写的骨架外面包裹了一个page标签，可以通过这个标签来设置整屏的颜色。</li>\n</ul>\n"},{"title":"git 命令","text":"初始化本地仓库12345git initgit add README.mdgit commit -m \"first commit\"git remote add origin https://github.com/xx/xx.gitgit push -u origin master 在github上面创建远程仓库的时候，不要创建readme.md,即可用上述命令创建成功 【问题】 因为本地创建了readme.md，导致提交的时候造成了冲突 gitignore文件 项目初始化的时候添加.gitignore 因为是点开头，没有文件名，没办法直接在windows目录下直接创建，必须通过右键Git Bash，按照linux的方式来新建.gitignore文件。具体步骤如下： 在需要创建 .gitignore 文件的文件夹, 右键选择Git Bash 进入命令行，进入项目所在目录。 输入 touch .gitignore 在文件夹就生成了一个“.gitignore”文件。 然后在”.gitignore” 文件里输入你要忽略的文件夹及其文件就可以了。 在添加.gitignore文件的时候，参照 gitignore 原则 查看查看commitscommits，它在git中扮演了一个重要角色，我们平常用的一些操作git clone ,git commit 都会产生commits，通俗的讲这个就是版本号。使用如下命令 1git reflog 回退push 成功后回退我们在使用Git进行版本控制时，有可能会出现这种情况。git push后发现提交的内容不是想要的，这时候我们怎么做呢，提交上去的内容是没有删除按钮的（比如github，或码云）。所以我们需要一些手段将提交上去内容撤销下来。 命令详解首先将本地的内容回退到自己想要的版本。回退版本我一般使用。在这里我们要明确的一点是git reset可以看成不产生commits，只是改变了当前HEAD指向的commits。 1git reset 其中这条命令中又分为两种 git reset –sort git reset –hard 前者表示只是改变了HEAD的指向，本地代码不会变化，我们使用git status依然可以看到，同时也可以git commit提交。 ​ 后者直接回改变本地源码，不仅仅指向变化了，代码也回到了那个版本时的代码，所以使用是一定要小心，想清楚。 如果只是回退到上个版本可以使用 12git reset -–soft xx版本号xxxx git reset –-hard xx版本号xxx 也可以使用下面的命令 12git reset –soft HEAD~1 git reset –hard HEAD~1 因为前面说了HEAD就代表当前，所以上一个版本其实就是当前-1 当我们使用下面的命令时，发现并没有发生什么变化，因为HEAD表示的就是当前版本。 1git reset HEAD 示例 git reset –soft HEAD~1 我们可以知道其实HEAD已经指向上一个commits了，我们可以是用git reflog验证下 我们再使用git status看看，发现没，代码还在缓存区中 这时候就好办了，我们选择很多，可以直接修改代码，再commit，也可以取消git add 命令，指令如下 git rm –cached xxx文件名xxxgit rm 至于这两者的区别看这里吧[GIT]代码在GIT ADD之后如何取消 ok 到现在为止，本地的版本已经达到我们想要的了，现在只需要改变远程仓库的版本了，对的，我们只需要在git commit 后，再使用 git push origin 分支名 就可以将新的代码覆盖掉远程仓库版本代码，这样子就达到了撤销远程仓库代码一样的效果，但是这里有点点问题，先接着看吧 提交失败，因为当前分支的版本低于远程分支的版本，所以要想覆盖掉它，必须使用force git push origin 分支 –forceok，大功告成 分支把分支推送到远端 https://blog.csdn.net/kakadiablo/article/details/79517985 创建分支删除分支 删除本地分支 1git branch -D &lt;BranchName&gt; 删除远程分支 1git push origin --delete &lt;BranchName&gt; 查看远程分支 使用如下git命令查看所有远程分支： git branch -r 查看远程和本地所有分支： git branch -a 其中远程分支是红色的 查看本地分支 git branch 在输出结果中，前面带* 的是当前分支。 拉取远程分支并创建本地分支方法一使用如下命令： git checkout -b 本地分支名x origin/远程分支名x 使用该方式会在本地新建分支x，并自动切换到该本地分支x。 采用此种方法建立的本地分支会和远程分支建立映射关系。 方式二使用如下命令： git fetch origin 远程分支名x:本地分支名x 使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。 采用此种方法建立的本地分支不会和远程分支建立映射关系。 本地分支和远程分支https://blog.csdn.net/carfge/article/details/79691360 建立映射关系的作用建立映射关系（或者为跟踪关系track）。这样使用git pull或者git push时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。git branch -vv输出： 上面的本地分支和远程分支都有映射关系，如果没有，就需要手动建立：git branch -u origin/分支名，或者git branch --set-upstream-to origin/分支名origin 为git地址的标志，可以建立当前分支与远程分支的映射关系。 撤销本映射关系git branch --unset-upstream之后可以再次用git branch -vv 查看本地分支和远程分支映射关系 本地分支只能跟踪远程的同名分支吗 答案是否定的，本地分支可以与远程不同名的分支建立映射关系 ​ 操作和之前的一样，只是可以指定和本地分支名不同的远程分支名，然后使用git branch -vv 查看映射关系，可以发现建立映射成功。 常见问题远程库‘origin’不存在 【 问题描述】 fatal: ‘origin’ does not appear to be a git repository ​ fatal: Could not read from remote repository. ​ Please make sure you have the correct access rights and the repository exists. 【 解决方案】 首先,检查你的起源是设定的运行 1git remote -v ​ ​ 显示 orgin git@github.com:chaorwin/chaorwin.git (fetch) orgin git@github.com:chaorwin/chaorwin.git (push) “origin” 不存在 ​ 2.重命名它,或改变URL,删除它,然后添加正确的一个。 ​ git remote remove orgin ​ 3. 增加一个 ​ git remot add origin git@github.com:chaorwin/chaorwin.git ​ 4. git push origin master 文件大小超过限制问题描述: github RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054 出现此问题有可能是上传大小限制执行如下命令: 12git config http.postBuffer 524288000//524288000算法： 1024*1024*500(500M) 在更改了文件大小之后，可能会出现如下错误： curl 56 OpenSSL SSL_read:SSL_ERROR_sysCALL 因为服务器的SSL证书没有经过第三方机构的签署，所以才报错。解决方案如下：第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为”ture”，并同时调用正常的git clone命令。完整的命令如下： 12env GIT_SSL_NO_VERIFY=true git clone https://&lt;host_name/git/project.git12 第二步，在克隆完毕的仓库中将http.sslVerify设置为”false”。完整的命令如下： 1git config http.sslVerify \"false\" 参考文章 git常见命令思维导图","content":"<h1 id=\"初始化本地仓库\"><a href=\"#初始化本地仓库\" class=\"headerlink\" title=\"初始化本地仓库\"></a>初始化本地仓库</h1><figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br><span class=\"line\">git <span class=\"keyword\">add</span><span class=\"bash\"> README.md</span></span><br><span class=\"line\"><span class=\"bash\">git commit -m <span class=\"string\">\"first commit\"</span></span></span><br><span class=\"line\"><span class=\"bash\">git remote add origin https://github.com/xx/xx.git</span></span><br><span class=\"line\"><span class=\"bash\">git push -u origin master</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在github上面创建远程仓库的时候，不要创建readme.md,即可用上述命令创建成功</p>\n</blockquote>\n<p>【问题】</p>\n<ul>\n<li>因为本地创建了readme.md，导致提交的时候造成了冲突</li>\n</ul>\n<h2 id=\"gitignore文件\"><a href=\"#gitignore文件\" class=\"headerlink\" title=\"gitignore文件\"></a>gitignore文件</h2><ul>\n<li><p>项目初始化的时候添加.gitignore</p>\n<p>因为是点开头，没有文件名，没办法直接在windows目录下直接创建，必须通过右键Git Bash，按照linux的方式来新建.gitignore文件。具体步骤如下：</p>\n<ol>\n<li>在需要创建 .gitignore 文件的文件夹, 右键选择Git Bash 进入命令行，进入项目所在目录。</li>\n<li>输入 touch .gitignore 在文件夹就生成了一个“.gitignore”文件。</li>\n<li>然后在”.gitignore” 文件里输入你要忽略的文件夹及其文件就可以了。</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>在添加.gitignore文件的时候，参照 <a href=\"https://blog.csdn.net/qq_34581118/article/details/78437992?locationNum=4&amp;fps=1\" target=\"_blank\" rel=\"noopener\">gitignore 原则</a></p>\n</blockquote>\n<h1 id=\"查看\"><a href=\"#查看\" class=\"headerlink\" title=\"查看\"></a>查看</h1><h2 id=\"查看commits\"><a href=\"#查看commits\" class=\"headerlink\" title=\"查看commits\"></a>查看commits</h2><p><strong>commits</strong>，它在git中扮演了一个重要角色，我们平常用的一些操作git clone ,git commit 都会产生commits，通俗的讲这个就是版本号。使用如下命令</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git reflog</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"回退\"><a href=\"#回退\" class=\"headerlink\" title=\"回退\"></a>回退</h1><h2 id=\"push-成功后回退\"><a href=\"#push-成功后回退\" class=\"headerlink\" title=\"push 成功后回退\"></a>push 成功后回退</h2><p>我们在使用Git进行版本控制时，有可能会出现这种情况。git push后发现提交的内容不是想要的，这时候我们怎么做呢，提交上去的内容是没有删除按钮的（比如github，或码云）。所以我们需要一些手段将提交上去内容撤销下来。 </p>\n<h3 id=\"命令详解\"><a href=\"#命令详解\" class=\"headerlink\" title=\"命令详解\"></a>命令详解</h3><p>首先将本地的内容回退到自己想要的版本。回退版本我一般使用。在这里我们要明确的一点是git reset可以看成不产生commits，只是改变了当前HEAD指向的commits。</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git reset</span></span><br></pre></td></tr></table></figure>\n<p>其中这条命令中又分为两种 </p>\n<ul>\n<li><p>git reset –sort</p>\n</li>\n<li><p>git reset –hard</p>\n</li>\n</ul>\n<p>  前者表示只是改变了HEAD的指向，本地代码不会变化，我们使用git status依然可以看到，同时也可以git commit提交。</p>\n<p>​    后者直接回改变本地源码，不仅仅指向变化了，代码也回到了那个版本时的代码，所以使用是一定要小心，想清楚。 </p>\n<p>  如果只是回退到上个版本可以使用</p>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">reset</span> -–soft xx版本号xxxx </span><br><span class=\"line\">git <span class=\"built_in\">reset</span> –-hard xx版本号xxx</span><br></pre></td></tr></table></figure>\n<p>也可以使用下面的命令</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">reset</span> –soft <span class=\"keyword\">HEAD</span>~<span class=\"number\">1</span> </span><br><span class=\"line\">git <span class=\"keyword\">reset</span> –hard <span class=\"keyword\">HEAD</span>~<span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>因为前面说了HEAD就代表当前，所以上一个版本其实就是当前-1</p>\n</blockquote>\n<p>当我们使用下面的命令时，发现并没有发生什么变化，因为HEAD表示的就是当前版本。</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"keyword\">reset</span> <span class=\"keyword\">HEAD</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><blockquote>\n<p>git reset –soft HEAD~1</p>\n</blockquote>\n<p>   我们可以知道其实HEAD已经指向上一个commits了，我们可以是用git reflog验证下</p>\n<p>   我们再使用git status看看，发现没，代码还在缓存区中 </p>\n<p>   这时候就好办了，我们选择很多，可以直接修改代码，再commit，也可以取消git add 命令，指令如下</p>\n<blockquote>\n<p>git rm –cached xxx文件名xxx<br>git rm</p>\n</blockquote>\n<p>   至于这两者的区别看这里吧<a href=\"https://broadeno.wordpress.com/2008/10/27/git%E4%BB%A3%E7%A0%81%E5%9C%A8git-add%E4%B9%8B%E5%90%8E%E5%A6%82%E4%BD%95%E5%8F%96%E6%B6%88/\" target=\"_blank\" rel=\"noopener\">[GIT]代码在GIT ADD之后如何取消</a><br>   ok 到现在为止，本地的版本已经达到我们想要的了，现在只需要改变远程仓库的版本了，对的，我们只需要在git commit 后，再使用 git push origin 分支名 就可以将新的代码覆盖掉远程仓库版本代码，这样子就达到了撤销远程仓库代码一样的效果，但是这里有点点问题，先接着看吧 </p>\n<p>提交失败，因为当前分支的版本低于远程分支的版本，所以要想覆盖掉它，必须使用force</p>\n<blockquote>\n<p>git push origin 分支 –force<br>ok，大功告成</p>\n</blockquote>\n<h2 id=\"分支\"><a href=\"#分支\" class=\"headerlink\" title=\"分支\"></a>分支</h2><p>把分支推送到远端</p>\n<p><a href=\"https://blog.csdn.net/kakadiablo/article/details/79517985\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/kakadiablo/article/details/79517985</a></p>\n<h3 id=\"创建分支\"><a href=\"#创建分支\" class=\"headerlink\" title=\"创建分支\"></a>创建分支</h3><h3 id=\"删除分支\"><a href=\"#删除分支\" class=\"headerlink\" title=\"删除分支\"></a>删除分支</h3><ul>\n<li>删除本地分支</li>\n</ul>\n<figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">git</span> <span class=\"keyword\">branch </span>-D &lt;<span class=\"keyword\">BranchName&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除远程分支</li>\n</ul>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">push</span> <span class=\"built_in\">origin</span> --<span class=\"built_in\">delete</span> &lt;BranchName&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"查看远程分支\"><a href=\"#查看远程分支\" class=\"headerlink\" title=\"查看远程分支\"></a>查看远程分支</h3><ul>\n<li>使用如下git命令查看所有远程分支：</li>\n</ul>\n<p><code>git branch -r</code></p>\n<ul>\n<li>查看远程和本地所有分支：</li>\n</ul>\n<p><code>git branch -a</code></p>\n<blockquote>\n<p>其中远程分支是红色的</p>\n</blockquote>\n<ul>\n<li>查看本地分支 </li>\n</ul>\n<p><code>git branch</code> </p>\n<blockquote>\n<p>在输出结果中，前面带<code>*</code> 的是当前分支。</p>\n</blockquote>\n<h3 id=\"拉取远程分支并创建本地分支\"><a href=\"#拉取远程分支并创建本地分支\" class=\"headerlink\" title=\"拉取远程分支并创建本地分支\"></a>拉取远程分支并创建本地分支</h3><h4 id=\"方法一\"><a href=\"#方法一\" class=\"headerlink\" title=\"方法一\"></a>方法一</h4><p>使用如下命令：</p>\n<p><code>git checkout -b 本地分支名x origin/远程分支名x</code></p>\n<p>使用该方式会在本地新建分支x，并自动切换到该本地分支x。</p>\n<p>采用此种方法建立的本地分支会和远程分支建立映射关系。</p>\n<h4 id=\"方式二\"><a href=\"#方式二\" class=\"headerlink\" title=\"方式二\"></a>方式二</h4><p>使用如下命令：</p>\n<p><code>git fetch origin 远程分支名x:本地分支名x</code></p>\n<p>使用该方式会在本地新建分支x，但是不会自动切换到该本地分支x，需要手动checkout。</p>\n<p>采用此种方法建立的本地分支不会和远程分支建立映射关系。</p>\n<h3 id=\"本地分支和远程分支\"><a href=\"#本地分支和远程分支\" class=\"headerlink\" title=\"本地分支和远程分支\"></a>本地分支和远程分支</h3><p><a href=\"https://blog.csdn.net/carfge/article/details/79691360\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/carfge/article/details/79691360</a></p>\n<h4 id=\"建立映射关系的作用\"><a href=\"#建立映射关系的作用\" class=\"headerlink\" title=\"建立映射关系的作用\"></a>建立映射关系的作用</h4><h4 id=\"建立映射关系（或者为跟踪关系track）。\"><a href=\"#建立映射关系（或者为跟踪关系track）。\" class=\"headerlink\" title=\"建立映射关系（或者为跟踪关系track）。\"></a>建立映射关系（或者为跟踪关系track）。</h4><p>这样使用git pull或者git push时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。<br><code>git branch -vv</code><br>输出：<br><img src=\"https://img-blog.csdn.net/20180208101910427?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvemhhbmd4aWFveWFuZzA=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70\" alt=\"这里写图片描述\"></p>\n<p>上面的本地分支和远程分支都有映射关系，如果没有，就需要手动建立：<br><code>git branch -u origin/分支名</code>，<br>或者<br><code>git branch --set-upstream-to origin/分支名</code><br><code>origin</code> 为git地址的标志，可以建立当前分支与远程分支的映射关系。</p>\n<h4 id=\"撤销本映射关系\"><a href=\"#撤销本映射关系\" class=\"headerlink\" title=\"撤销本映射关系\"></a>撤销本映射关系</h4><p><code>git branch --unset-upstream</code><br>之后可以再次用<code>git branch -vv</code> 查看本地分支和远程分支映射关系</p>\n<h4 id=\"本地分支只能跟踪远程的同名分支吗\"><a href=\"#本地分支只能跟踪远程的同名分支吗\" class=\"headerlink\" title=\"本地分支只能跟踪远程的同名分支吗\"></a>本地分支只能跟踪远程的同名分支吗</h4><ul>\n<li>答案是否定的，本地分支可以与远程不同名的分支建立映射关系</li>\n</ul>\n<p>​       操作和之前的一样，只是可以指定和本地分支名不同的远程分支名，然后使用<code>git branch -vv</code> 查看映射关系，可以发现建立映射成功。</p>\n<h1 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h1><h2 id=\"远程库‘origin’不存在\"><a href=\"#远程库‘origin’不存在\" class=\"headerlink\" title=\"远程库‘origin’不存在\"></a>远程库‘origin’不存在</h2><p> 【 问题描述】</p>\n<blockquote>\n<p>  fatal: ‘origin’ does not appear to be a git repository</p>\n<p>​    fatal: Could not read from remote repository.</p>\n<p>​    Please make sure you have the correct access rights and the repository exists.</p>\n</blockquote>\n<p>  【 解决方案】</p>\n<ul>\n<li><p>首先,检查你的起源是设定的运行</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">git remote -v</span></span><br></pre></td></tr></table></figure>\n<p>​                         </p>\n</li>\n</ul>\n<p>​                           显示<br>                         orgin    <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:chaorwin/chaorwin.git (fetch)<br>                         orgin    <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:chaorwin/chaorwin.git (push)<br>                          “origin” 不存在</p>\n<p>​                       2.重命名它,或改变URL,删除它,然后添加正确的一个。</p>\n<p>​                            git remote remove orgin</p>\n<p>​                      3. 增加一个</p>\n<p>​                            git remot add origin <a href=\"mailto:git@github.com\" target=\"_blank\" rel=\"noopener\">git@github.com</a>:chaorwin/chaorwin.git</p>\n<p>​                      4. git push origin master</p>\n<h2 id=\"文件大小超过限制\"><a href=\"#文件大小超过限制\" class=\"headerlink\" title=\"文件大小超过限制\"></a>文件大小超过限制</h2><p>问题描述: </p>\n<blockquote>\n<p> github RPC failed; curl 56 OpenSSL SSL_read: SSL_ERROR_SYSCALL, errno 10054</p>\n</blockquote>\n<p>出现此问题有可能是上传大小限制<br>执行如下命令:</p>\n<figure class=\"highlight dns\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config http.postBuffer <span class=\"number\">524288000</span></span><br><span class=\"line\">//<span class=\"number\">524288000</span>算法： <span class=\"number\">1024*1024</span>*<span class=\"number\">500</span>(<span class=\"number\">500</span>M)</span><br></pre></td></tr></table></figure>\n<p>在更改了文件大小之后，可能会出现如下错误：</p>\n<blockquote>\n<p> curl 56 OpenSSL SSL_read:SSL_ERROR_sysCALL</p>\n</blockquote>\n<p>因为服务器的SSL证书没有经过第三方机构的签署，所以才报错。解决方案如下：<br>第一步，克隆远程仓库时，用env命令设置GIT_SSL_NO_VERIFY环境变量为”ture”，并同时调用正常的git clone命令。完整的命令如下：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env <span class=\"attr\">GIT_SSL_NO_VERIFY=</span><span class=\"literal\">true</span> git <span class=\"keyword\">clone</span> <span class=\"title\">https</span>://<span class=\"tag\">&lt;host_name/git/project.git</span></span><br><span class=\"line\"><span class=\"tag\">12</span></span><br></pre></td></tr></table></figure>\n<p>第二步，在克隆完毕的仓库中将http.sslVerify设置为”false”。完整的命令如下：</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git<span class=\"built_in\"> config </span>http.sslVerify <span class=\"string\">\"false\"</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h1><ul>\n<li><a href=\"http://img.blog.csdn.net/20160613140756568\" target=\"_blank\" rel=\"noopener\">git常见命令思维导图</a></li>\n</ul>\n"},{"title":"使用OFFICE把office文档转换为pdf文档","text":"一、所需要的资源 jar包 iText-2.1.5.jar 、 jacob.jar dll 文件 jacob-1.17-M2-x64.dll 、 jacob-1.17-M2-x32.dll 二、使用前准备 把dll文件放在%JAVA_HOME%\\bin下（注意系统是32位还是64位），也可以放在C:\\Windows\\System32下，如果是64位应该放在C:\\Windows\\SysWOW64 下。建议放在项目使用的jdk的bin目录下 如果是在eclipse下开发，需要重新引入jdk（Preference/Java/Installed JREs） 开发时将jacab.jar包放在项目lib下并add到liabraries中即可。 当前电脑获取服务器必须安装office软件，否则无法进行文档转换操作。 三、编写office转换的工具类import java.awt.Color;import java.io.File;import java.io.FileNotFoundException;import java.io.FileOutputStream;import java.io.IOException;import java.util.Date;import com.jacob.activeX.ActiveXComponent;import com.jacob.com.Dispatch;import com.lowagie.text.Document;import com.lowagie.text.DocumentException;import com.lowagie.text.Element;import com.lowagie.text.Font;import com.lowagie.text.FontFactory;import com.lowagie.text.Image;import com.lowagie.text.PageSize;import com.lowagie.text.Phrase;import com.lowagie.text.pdf.ColumnText;import com.lowagie.text.pdf.PdfContentByte;import com.lowagie.text.pdf.PdfWriter;/** * 这是一个工具类，主要是为了使Office2003-2007全部格式的文档(.doc|.docx|.xls|.xlsx|.ppt|.pptx) * 转化为pdf文件&lt;br&gt; * @date 2017-02-21 * */public class Office2PDFUtil &#123; /*********************************************** 调用服务器office安装来转换 *******************************************************/ private static final int wdFormatPDF = 17; private static final int xlTypePDF = 0; private static final int ppSaveAsPDF = 32; private static final int msoTrue = -1; private static final int msofalse = 0; //直接调用这个方法即可 public static boolean convert2PDF(String inputFile, String pdfFile) &#123; String suffix = getFileSufix(inputFile); File file = new File(inputFile); if(!file.exists())&#123; System.out.println(\"文件不存在！\"); return false; &#125; if(suffix.equals(\"pdf\"))&#123; System.out.println(\"PDF not need to convert!\"); return false; &#125; if(suffix.equals(\"doc\")||suffix.equals(\"docx\")||suffix.equals(\"txt\"))&#123; return word2PDF(inputFile,pdfFile); &#125;else if(suffix.equals(\"ppt\")||suffix.equals(\"pptx\"))&#123; return ppt2PDF(inputFile,pdfFile); &#125;else if(suffix.equals(\"xls\")||suffix.equals(\"xlsx\"))&#123; return excel2PDF(inputFile,pdfFile); &#125;else if(suffix.equals(\"png\") || suffix.equals(\"jpg\") || suffix.equals(\"jpeg\") || suffix.equals(\"gif\"))&#123; return img2PDF(inputFile,pdfFile); &#125;else&#123; System.out.println(\"文件格式不支持转换!\"); return false; &#125; &#125; public static String getFileSufix(String fileName)&#123; int splitIndex = fileName.lastIndexOf(\".\"); return fileName.substring(splitIndex + 1); &#125; public static boolean word2PDF(String inputFile,String pdfFile)&#123; try&#123; //打开word应用程序 ActiveXComponent app = new ActiveXComponent(\"Word.Application\"); //设置word不可见 app.setProperty(\"Visible\", false); //获得word中所有打开的文档,返回Documents对象 Dispatch docs = app.getProperty(\"Documents\").toDispatch(); //调用Documents对象中Open方法打开文档，并返回打开的文档对象Document Dispatch doc = Dispatch.call(docs, \"Open\", inputFile, false, true ).toDispatch(); //调用Document对象的SaveAs方法，将文档保存为pdf格式 /* Dispatch.call(doc, \"SaveAs\", pdfFile, wdFormatPDF //word保存为pdf格式宏，值为17 ); */ Dispatch.call(doc, \"ExportAsFixedFormat\", pdfFile, wdFormatPDF //word保存为pdf格式宏，值为17 ); //关闭文档 Dispatch.call(doc, \"Close\",false); //关闭word应用程序 app.invoke(\"Quit\", 0); return true; &#125;catch(Exception e)&#123; return false; &#125; &#125; /** *excel转换的时候如果有多个工作簿或者数据量太大的时候转换还是存在问题的 * */ public static boolean excel2PDF(String inputFile,String pdfFile)&#123; try&#123; ActiveXComponent app = new ActiveXComponent(\"Excel.Application\"); app.setProperty(\"Visible\", false); Dispatch excels = app.getProperty(\"Workbooks\").toDispatch(); Dispatch excel = Dispatch.call(excels, \"Open\", inputFile, false, true ).toDispatch(); Dispatch.call(excel, \"ExportAsFixedFormat\", xlTypePDF, pdfFile ); Dispatch.call(excel, \"Close\",false); app.invoke(\"Quit\"); return true; &#125;catch(Exception e)&#123; return false; &#125; &#125; public static boolean ppt2PDF(String inputFile,String pdfFile)&#123; try&#123; ActiveXComponent app = new ActiveXComponent(\"PowerPoint.Application\"); //app.setProperty(\"Visible\", msofalse); Dispatch ppts = app.getProperty(\"Presentations\").toDispatch(); Dispatch ppt = Dispatch.call(ppts, \"Open\", inputFile, true,//ReadOnly true,//Untitled指定文件是否有标题 false//WithWindow指定文件是否可见 ).toDispatch(); Dispatch.call(ppt, \"SaveAs\", pdfFile, ppSaveAsPDF ); Dispatch.call(ppt, \"Close\"); app.invoke(\"Quit\"); return true; &#125;catch(Exception e)&#123; return false; &#125; &#125; /******************************************* 图片转pdf *****************************************/ private static void handleText(PdfWriter writer, String content, String color, float x, float y, float z) &#123; PdfContentByte canvas = writer.getDirectContent(); Phrase phrase = new Phrase(content); if (color != null) &#123; phrase = new Phrase(content, FontFactory.getFont( FontFactory.COURIER, 12, Font.NORMAL, new Color(255, 0, 0))); &#125; ColumnText.showTextAligned(canvas, Element.ALIGN_UNDEFINED, phrase, x, y, z); &#125; public static Boolean img2PDF(String imagePath, String mOutputPdfFileName) &#123; Document doc = new Document(PageSize.A4, 20, 20, 20, 20); try &#123; PdfWriter writer = PdfWriter.getInstance(doc, new FileOutputStream( mOutputPdfFileName)); doc.open(); doc.newPage(); Image png1 = Image.getInstance(imagePath); float heigth = png1.getHeight(); float width = png1.getWidth(); int percent = getPercent2(heigth, width); png1.setAlignment(Image.MIDDLE); png1.setAlignment(Image.TEXTWRAP); png1.scalePercent(percent + 3); doc.add(png1); handleText(writer, \"This is a test\", \"red\", 400, 725, 0); doc.close(); &#125; catch (FileNotFoundException e) &#123; e.printStackTrace(); &#125; catch (DocumentException e) &#123; e.printStackTrace(); &#125; catch (IOException e) &#123; e.printStackTrace(); &#125; File mOutputPdfFile = new File(mOutputPdfFileName); if (!mOutputPdfFile.exists()) &#123; mOutputPdfFile.deleteOnExit(); return false; &#125; return true; &#125; public int getPercent1(float h, float w) &#123; int p = 0; float p2 = 0.0f; if (h &gt; w) &#123; p2 = 297 / h * 100; &#125; else &#123; p2 = 210 / w * 100; &#125; p = Math.round(p2); return p; &#125; private static int getPercent2(float h, float w) &#123; int p = 0; float p2 = 0.0f; p2 = 530 / w * 100; p = Math.round(p2); return p; &#125; /** * 测试方法 */ public static void main(String[] args) &#123; Office2PDFUtil office2pdf = new Office2PDFUtil(); office2pdf.convert2PDF(\"C:/Users/cheryl/Desktop/视屏/g.txt\", \"C:/Users/cheryl/Desktop/视屏/g_\" + new Date().getTime() + \".pdf\" ); &#125; &#125; 四、在普通的action中的使用12//注意srcfilePath，与destFilePath 都是文件在硬盘中的绝对位置convertResult = Office2PDFUtil.convert2PDF(srcfilePath, destFilePath); 五、使用到的相关知识 使用jacob处理office文档 使用iText处理 转换之后的pdf文件","content":"<h2 id=\"一、所需要的资源\"><a href=\"#一、所需要的资源\" class=\"headerlink\" title=\"一、所需要的资源\"></a>一、所需要的资源</h2><ul>\n<li><p>jar包</p>\n<p><a href=\"/files/pdf/iText-2.1.5.jar\"> iText-2.1.5.jar</a> 、 <a href=\"/files/pdf/jacob.jar\">jacob.jar</a> </p>\n</li>\n<li><p>dll 文件</p>\n<p> <a href=\"/files/pdf/jacob-1.17-M2-x64.dl\">jacob-1.17-M2-x64.dll</a> 、  <a href=\"/files/pdf/jacob-1.17-M2-x32.dll\">jacob-1.17-M2-x32.dll</a>  </p>\n</li>\n</ul>\n<h2 id=\"二、使用前准备\"><a href=\"#二、使用前准备\" class=\"headerlink\" title=\"二、使用前准备\"></a>二、使用前准备</h2><ul>\n<li>把dll文件放在%JAVA_HOME%\\bin下（注意系统是32位还是64位），也可以放在C:\\Windows\\System32下，如果是64位应该放在C:\\Windows\\SysWOW64 下。建议放在项目使用的jdk的bin目录下</li>\n<li>如果是在eclipse下开发，需要重新引入jdk（Preference/Java/Installed JREs）</li>\n<li>开发时将jacab.jar包放在项目lib下并add到liabraries中即可。</li>\n<li>当前电脑获取服务器必须安装office软件，否则无法进行文档转换操作。</li>\n</ul>\n<h2 id=\"三、编写office转换的工具类\"><a href=\"#三、编写office转换的工具类\" class=\"headerlink\" title=\"三、编写office转换的工具类\"></a>三、编写office转换的工具类</h2> <figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.awt.Color;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.File;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileNotFoundException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.FileOutputStream;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Date;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jacob.activeX.ActiveXComponent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.jacob.com.Dispatch;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.Document;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.DocumentException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.Element;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.Font;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.FontFactory;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.Image;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.PageSize;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.Phrase;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.pdf.ColumnText;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.pdf.PdfContentByte;</span><br><span class=\"line\"><span class=\"keyword\">import</span> com.lowagie.<span class=\"built_in\">text</span>.pdf.PdfWriter;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * 这是一个工具类，主要是为了使Office2003-2007全部格式的文档(.doc|.docx|.xls|.xlsx|.ppt|.pptx)</span></span><br><span class=\"line\"><span class=\"comment\"> * 转化为pdf文件&lt;br&gt;</span></span><br><span class=\"line\"><span class=\"comment\"> * @date 2017-02-21</span></span><br><span class=\"line\"><span class=\"comment\"> * </span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> class Office2PDFUtil &#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"comment\">/*********************************************** 调用服务器office安装来转换 *******************************************************/</span></span><br><span class=\"line\">\t</span><br><span class=\"line\">\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> wdFormatPDF = <span class=\"number\">17</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> xlTypePDF = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> ppSaveAsPDF = <span class=\"number\">32</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> msoTrue = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"built_in\">int</span> msofalse = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t<span class=\"comment\">//直接调用这个方法即可</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> convert2PDF(<span class=\"keyword\">String</span> inputFile, <span class=\"keyword\">String</span> pdfFile) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">String</span> suffix =  getFileSufix(inputFile);</span><br><span class=\"line\">\t\t\tFile file = <span class=\"keyword\">new</span> File(inputFile);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(!file.exists())&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"文件不存在！\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(suffix.equals(<span class=\"string\">\"pdf\"</span>))&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"PDF not need to convert!\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span>(suffix.equals(<span class=\"string\">\"doc\"</span>)||suffix.equals(<span class=\"string\">\"docx\"</span>)||suffix.equals(<span class=\"string\">\"txt\"</span>))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> word2PDF(inputFile,pdfFile);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(suffix.equals(<span class=\"string\">\"ppt\"</span>)||suffix.equals(<span class=\"string\">\"pptx\"</span>))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> ppt2PDF(inputFile,pdfFile);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(suffix.equals(<span class=\"string\">\"xls\"</span>)||suffix.equals(<span class=\"string\">\"xlsx\"</span>))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> excel2PDF(inputFile,pdfFile);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(suffix.equals(<span class=\"string\">\"png\"</span>) || suffix.equals(<span class=\"string\">\"jpg\"</span>) || suffix.equals(<span class=\"string\">\"jpeg\"</span>) || suffix.equals(<span class=\"string\">\"gif\"</span>))&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> img2PDF(inputFile,pdfFile);</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">\t\t\t\tSystem.out.<span class=\"built_in\">println</span>(<span class=\"string\">\"文件格式不支持转换!\"</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">String</span> getFileSufix(<span class=\"keyword\">String</span> fileName)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">int</span> splitIndex = fileName.lastIndexOf(<span class=\"string\">\".\"</span>);</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> fileName.substring(splitIndex + <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> word2PDF(<span class=\"keyword\">String</span> inputFile,<span class=\"keyword\">String</span> pdfFile)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//打开word应用程序</span></span><br><span class=\"line\">\t\t\tActiveXComponent app = <span class=\"keyword\">new</span> ActiveXComponent(<span class=\"string\">\"Word.Application\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//设置word不可见</span></span><br><span class=\"line\">\t\t\tapp.setProperty(<span class=\"string\">\"Visible\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//获得word中所有打开的文档,返回Documents对象</span></span><br><span class=\"line\">\t\t\tDispatch docs = app.getProperty(<span class=\"string\">\"Documents\"</span>).toDispatch();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//调用Documents对象中Open方法打开文档，并返回打开的文档对象Document</span></span><br><span class=\"line\">\t\t\tDispatch doc = Dispatch.call(docs,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">\"Open\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\tinputFile,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">false</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">true</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t).toDispatch();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//调用Document对象的SaveAs方法，将文档保存为pdf格式</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\tDispatch.call(doc,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t\"SaveAs\",</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\tpdfFile,</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\twdFormatPDF\t\t//word保存为pdf格式宏，值为17</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t);</span></span><br><span class=\"line\"><span class=\"comment\">\t\t\t\t\t\t*/</span></span><br><span class=\"line\">\t\t\tDispatch.call(doc,</span><br><span class=\"line\">\t\t\t\t\t<span class=\"string\">\"ExportAsFixedFormat\"</span>,</span><br><span class=\"line\">\t\t\t\t\tpdfFile,</span><br><span class=\"line\">\t\t\t\t\twdFormatPDF\t\t<span class=\"comment\">//word保存为pdf格式宏，值为17</span></span><br><span class=\"line\">\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//关闭文档</span></span><br><span class=\"line\">\t\t\tDispatch.call(doc, <span class=\"string\">\"Close\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//关闭word应用程序</span></span><br><span class=\"line\">\t\t\tapp.invoke(<span class=\"string\">\"Quit\"</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">        <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">        *excel转换的时候如果有多个工作簿或者数据量太大的时候转换还是存在问题的</span></span><br><span class=\"line\"><span class=\"comment\">        *</span></span><br><span class=\"line\"><span class=\"comment\">        */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> excel2PDF(<span class=\"keyword\">String</span> inputFile,<span class=\"keyword\">String</span> pdfFile)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\t\tActiveXComponent app = <span class=\"keyword\">new</span> ActiveXComponent(<span class=\"string\">\"Excel.Application\"</span>);</span><br><span class=\"line\">\t\t\tapp.setProperty(<span class=\"string\">\"Visible\"</span>, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t\tDispatch excels = app.getProperty(<span class=\"string\">\"Workbooks\"</span>).toDispatch();</span><br><span class=\"line\">\t\t\tDispatch excel = Dispatch.call(excels,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">\"Open\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\tinputFile,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">false</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">true</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t).toDispatch();</span><br><span class=\"line\">\t\t\tDispatch.call(excel,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"ExportAsFixedFormat\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\txlTypePDF,\t\t</span><br><span class=\"line\">\t\t\t\t\t\tpdfFile</span><br><span class=\"line\">\t\t\t\t\t\t);</span><br><span class=\"line\">\t\t\tDispatch.call(excel, <span class=\"string\">\"Close\"</span>,<span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t\tapp.invoke(<span class=\"string\">\"Quit\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"built_in\">boolean</span> ppt2PDF(<span class=\"keyword\">String</span> inputFile,<span class=\"keyword\">String</span> pdfFile)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t\t\tActiveXComponent app = <span class=\"keyword\">new</span> ActiveXComponent(<span class=\"string\">\"PowerPoint.Application\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//app.setProperty(\"Visible\", msofalse);</span></span><br><span class=\"line\">\t\t\tDispatch ppts = app.getProperty(<span class=\"string\">\"Presentations\"</span>).toDispatch();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tDispatch ppt = Dispatch.call(ppts,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"string\">\"Open\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\tinputFile,</span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">true</span>,<span class=\"comment\">//ReadOnly</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">true</span>,<span class=\"comment\">//Untitled指定文件是否有标题</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t<span class=\"keyword\">false</span><span class=\"comment\">//WithWindow指定文件是否可见</span></span><br><span class=\"line\">\t\t\t\t\t\t\t\t\t\t).toDispatch();</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tDispatch.call(ppt,</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"SaveAs\"</span>,</span><br><span class=\"line\">\t\t\t\t\t\tpdfFile,</span><br><span class=\"line\">\t\t\t\t\t\tppSaveAsPDF\t</span><br><span class=\"line\">\t\t\t\t\t\t);</span><br><span class=\"line\">\t\t\t\t\t</span><br><span class=\"line\">\t\t\tDispatch.call(ppt, <span class=\"string\">\"Close\"</span>);</span><br><span class=\"line\">\t\t\t</span><br><span class=\"line\">\t\t\tapp.invoke(<span class=\"string\">\"Quit\"</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t&#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t\t<span class=\"comment\">/******************************************* 图片转pdf *****************************************/</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> handleText(PdfWriter writer, <span class=\"keyword\">String</span> content, <span class=\"keyword\">String</span> <span class=\"built_in\">color</span>,</span><br><span class=\"line\">\t            <span class=\"built_in\">float</span> x, <span class=\"built_in\">float</span> y, <span class=\"built_in\">float</span> z) &#123;</span><br><span class=\"line\">\t        PdfContentByte canvas = writer.getDirectContent();</span><br><span class=\"line\">\t        Phrase phrase = <span class=\"keyword\">new</span> Phrase(content);</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (<span class=\"built_in\">color</span> != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t            phrase = <span class=\"keyword\">new</span> Phrase(content, FontFactory.getFont(</span><br><span class=\"line\">\t                    FontFactory.COURIER, <span class=\"number\">12</span>, Font.NORMAL, <span class=\"keyword\">new</span> Color(<span class=\"number\">255</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>)));</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t        ColumnText.showTextAligned(canvas, Element.ALIGN_UNDEFINED, phrase, x,</span><br><span class=\"line\">\t                y, z);</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> Boolean img2PDF(<span class=\"keyword\">String</span> imagePath, <span class=\"keyword\">String</span> mOutputPdfFileName) &#123;</span><br><span class=\"line\">\t        Document doc = <span class=\"keyword\">new</span> Document(PageSize.A4, <span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">20</span>, <span class=\"number\">20</span>);</span><br><span class=\"line\">\t        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t            PdfWriter writer = PdfWriter.getInstance(doc, <span class=\"keyword\">new</span> FileOutputStream(</span><br><span class=\"line\">\t                    mOutputPdfFileName));</span><br><span class=\"line\">\t            doc.<span class=\"built_in\">open</span>();</span><br><span class=\"line\"></span><br><span class=\"line\">\t            doc.newPage();</span><br><span class=\"line\">\t            Image png1 = Image.getInstance(imagePath);</span><br><span class=\"line\">\t            <span class=\"built_in\">float</span> heigth = png1.getHeight();</span><br><span class=\"line\">\t            <span class=\"built_in\">float</span> <span class=\"built_in\">width</span> = png1.getWidth();</span><br><span class=\"line\">\t            <span class=\"built_in\">int</span> percent = getPercent2(heigth, <span class=\"built_in\">width</span>);</span><br><span class=\"line\">\t            png1.setAlignment(Image.MIDDLE);</span><br><span class=\"line\">\t            png1.setAlignment(Image.TEXTWRAP);</span><br><span class=\"line\">\t            png1.scalePercent(percent + <span class=\"number\">3</span>);</span><br><span class=\"line\">\t            doc.<span class=\"built_in\">add</span>(png1);</span><br><span class=\"line\">\t            handleText(writer, <span class=\"string\">\"This is a test\"</span>, <span class=\"string\">\"red\"</span>, <span class=\"number\">400</span>, <span class=\"number\">725</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">\t            doc.close();</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">\t            e.printStackTrace();</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">catch</span> (DocumentException e) &#123;</span><br><span class=\"line\">\t            e.printStackTrace();</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">\t            e.printStackTrace();</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t        File mOutputPdfFile = <span class=\"keyword\">new</span> File(mOutputPdfFileName);</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (!mOutputPdfFile.exists()) &#123;</span><br><span class=\"line\">\t            mOutputPdfFile.deleteOnExit();</span><br><span class=\"line\">\t            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">public</span> <span class=\"built_in\">int</span> getPercent1(<span class=\"built_in\">float</span> h, <span class=\"built_in\">float</span> w) &#123;</span><br><span class=\"line\">\t        <span class=\"built_in\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t        <span class=\"built_in\">float</span> p2 = <span class=\"number\">0.0</span>f;</span><br><span class=\"line\">\t        <span class=\"keyword\">if</span> (h &gt; w) &#123;</span><br><span class=\"line\">\t            p2 = <span class=\"number\">297</span> / h * <span class=\"number\">100</span>;</span><br><span class=\"line\">\t        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t            p2 = <span class=\"number\">210</span> / w * <span class=\"number\">100</span>;</span><br><span class=\"line\">\t        &#125;</span><br><span class=\"line\">\t        p = Math.<span class=\"built_in\">round</span>(p2);</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"built_in\">int</span> getPercent2(<span class=\"built_in\">float</span> h, <span class=\"built_in\">float</span> w) &#123;</span><br><span class=\"line\">\t        <span class=\"built_in\">int</span> p = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t        <span class=\"built_in\">float</span> p2 = <span class=\"number\">0.0</span>f;</span><br><span class=\"line\">\t        p2 = <span class=\"number\">530</span> / w * <span class=\"number\">100</span>;</span><br><span class=\"line\">\t        p = Math.<span class=\"built_in\">round</span>(p2);</span><br><span class=\"line\">\t        <span class=\"keyword\">return</span> p;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">       * 测试方法</span></span><br><span class=\"line\"><span class=\"comment\">       */</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> main(<span class=\"keyword\">String</span>[] args) &#123;</span><br><span class=\"line\">\t\t\tOffice2PDFUtil office2pdf = <span class=\"keyword\">new</span> Office2PDFUtil();</span><br><span class=\"line\">\t\t\toffice2pdf.convert2PDF(<span class=\"string\">\"C:/Users/cheryl/Desktop/视屏/g.txt\"</span>, <span class=\"string\">\"C:/Users/cheryl/Desktop/视屏/g_\"</span> + <span class=\"keyword\">new</span> Date().getTime() + <span class=\"string\">\".pdf\"</span> );</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"四、在普通的action中的使用\"><a href=\"#四、在普通的action中的使用\" class=\"headerlink\" title=\"四、在普通的action中的使用\"></a>四、在普通的action中的使用</h2><figure class=\"highlight makefile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//注意srcfilePath，与destFilePath 都是文件在硬盘中的绝对位置</span><br><span class=\"line\">convertResult = Office2PDFUtil.convert2PDF(srcfilePath, destFilePath);</span><br></pre></td></tr></table></figure>\n<h2 id=\"五、使用到的相关知识\"><a href=\"#五、使用到的相关知识\" class=\"headerlink\" title=\"五、使用到的相关知识\"></a>五、使用到的相关知识</h2><ol>\n<li>使用jacob处理office文档</li>\n<li>使用iText处理 转换之后的pdf文件</li>\n</ol>\n"},{"title":"mysql数据库自动建表","text":"根据项目需要对于车辆轨迹数据想要根据月份自动创建表，每个月创建一张表，需要数据库自动创建，并根据当前年和月动态生成表名称。具体的实现方法如下所示。 创建存储过程 点击查询–》新建查询–&gt; 输入以下代码，然后在函数中就可以查看到建立的存储过程。 123456789101112131415161718192021222324252627282930313233343536BEGINdeclare i int;set i=0;while i&lt;12 do set @sql_create_table_gpscartrail = concat( &apos;CREATE TABLE IF NOT EXISTS gps_实时轨迹_&apos;, date_format(date_add(curdate(), interval i month),&apos;%Y%m&apos;), &quot;( `OID` varchar(32) NOT NULL, `设备ID` varchar(32) DEFAULT NULL, `设备序列号` varchar(32) DEFAULT NULL, `SIM卡号` varchar(32) NOT NULL, `经度` int(11) DEFAULT NULL, `纬度` int(11) DEFAULT NULL, `速度` int(11) NOT NULL, `方向` int(11) NOT NULL, `高程` int(11) DEFAULT NULL, `报警标志` varchar(32) DEFAULT NULL, `上报时间` datetime DEFAULT NULL, `系统时间` varchar(32) NOT NULL, `状态` varchar(32) NOT NULL, `备注` text, `数据状态` varchar(8) DEFAULT NULL, `里程` varchar(14) DEFAULT NULL, `纠偏经度` double(11,6) DEFAULT NULL, `纠偏纬度` double(11,6) DEFAULT NULL, PRIMARY KEY (`OID`,`上报时间`)) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;gps实时轨迹&apos;PARTITION BY HASH(day(上报时间)) PARTITIONS 31&quot;); PREPARE sql_create_table_gpscartrail FROM @sql_create_table_gpscartrail; EXECUTE sql_create_table_gpscartrail; set i=i+1;end while;END 为了提高检索效率，这里使用分区的方法：PARTITION BY HASH(day(上报时间)) PARTITIONS 100 利用哈希表的形式把每个表分为31个区。 创建执行存储过程的事件开启事件 先查看事件是否开启 1show variables like '%scheduler%'; MySQL事件调度器event_scheduler负责调用事件，它默认是关闭的。这个调度器不断地监视一个事件是否要调用， 要创建事件，必须打开调度器。 如果未开启则需要开启，可以使用下面任意命令执行： 12set GLOBAL event_scheduler = 1;SET GLOBAL event_scheduler = ON; 使用工具 创建事件，调用刚刚创建的create_gps_car_trails_every_mon存储过程。 123BEGIN CALL create_gps_car_trails_every_mon();END 设置时间状态为enable，如下图所示： 设定执行时间：表示每一年执行一次，开始时间是 2017-02-01 01:00:00 保存计划就建立完毕，效果如图：建立了12张gpstrail表 根据年和月份。 直接执行语句 创建事件也可不按照上面操作，执行sql语句即可 1234567891011CREATE EVENT event_create_gps_car_trails_every_mon1 ON SCHEDULE EVERY 1 QUARTER STARTS DATE_ADD( DATE_ADD( DATE_SUB( CURDATE(), INTERVAL DAY (CURDATE()) - 1 DAY ), INTERVAL 1 MONTH ), INTERVAL 1 HOUR) ON COMPLETION PRESERVE ENABLE DO CALL create_gps_car_trails_every_mon ();","content":"<p>根据项目需要对于车辆轨迹数据想要根据月份自动创建表，每个月创建一张表，需要数据库自动创建，并根据当前年和月动态生成表名称。具体的实现方法如下所示。</p>\n<h1 id=\"创建存储过程\"><a href=\"#创建存储过程\" class=\"headerlink\" title=\"创建存储过程\"></a>创建存储过程</h1><ul>\n<li>点击查询–》新建查询–&gt; 输入以下代码，然后在函数中就可以查看到建立的存储过程。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\">declare i int;</span><br><span class=\"line\">set i=0;</span><br><span class=\"line\">while i&lt;12 do  </span><br><span class=\"line\">    set @sql_create_table_gpscartrail = concat(  </span><br><span class=\"line\">&apos;CREATE TABLE IF NOT EXISTS gps_实时轨迹_&apos;, date_format(date_add(curdate(), interval i month),&apos;%Y%m&apos;),  </span><br><span class=\"line\">&quot;(  </span><br><span class=\"line\">   `OID` varchar(32) NOT NULL,</span><br><span class=\"line\">  `设备ID` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `设备序列号` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `SIM卡号` varchar(32) NOT NULL,</span><br><span class=\"line\">  `经度` int(11) DEFAULT NULL,</span><br><span class=\"line\">  `纬度` int(11) DEFAULT NULL,</span><br><span class=\"line\">  `速度` int(11) NOT NULL,</span><br><span class=\"line\">  `方向` int(11) NOT NULL,</span><br><span class=\"line\">  `高程` int(11) DEFAULT NULL,</span><br><span class=\"line\">  `报警标志` varchar(32) DEFAULT NULL,</span><br><span class=\"line\">  `上报时间` datetime DEFAULT NULL,</span><br><span class=\"line\">  `系统时间` varchar(32) NOT NULL,</span><br><span class=\"line\">  `状态` varchar(32) NOT NULL,</span><br><span class=\"line\">  `备注` text,</span><br><span class=\"line\">  `数据状态` varchar(8) DEFAULT NULL,</span><br><span class=\"line\">  `里程` varchar(14) DEFAULT NULL,</span><br><span class=\"line\">  `纠偏经度` double(11,6) DEFAULT NULL,</span><br><span class=\"line\">  `纠偏纬度` double(11,6) DEFAULT NULL,</span><br><span class=\"line\">  PRIMARY KEY (`OID`,`上报时间`)</span><br><span class=\"line\">) ENGINE=InnoDB DEFAULT CHARSET=utf8 COMMENT=&apos;gps实时轨迹&apos;</span><br><span class=\"line\">PARTITION BY HASH(day(上报时间)) </span><br><span class=\"line\">PARTITIONS 31</span><br><span class=\"line\">&quot;);  </span><br><span class=\"line\">  </span><br><span class=\"line\">PREPARE sql_create_table_gpscartrail FROM @sql_create_table_gpscartrail;     </span><br><span class=\"line\">EXECUTE sql_create_table_gpscartrail;  </span><br><span class=\"line\">set i=i+1;</span><br><span class=\"line\">end while;</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了提高检索效率，这里使用分区的方法：PARTITION BY HASH(day(上报时间))        <em>PARTITIONS 100</em>   利用哈希表的形式把每个表分为31个区。</p>\n</blockquote>\n<h1 id=\"创建执行存储过程的事件\"><a href=\"#创建执行存储过程的事件\" class=\"headerlink\" title=\"创建执行存储过程的事件\"></a>创建执行存储过程的事件</h1><h2 id=\"开启事件\"><a href=\"#开启事件\" class=\"headerlink\" title=\"开启事件\"></a>开启事件</h2><ul>\n<li>先查看事件是否开启  </li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">show</span> <span class=\"keyword\">variables</span> <span class=\"keyword\">like</span> <span class=\"string\">'%scheduler%'</span>;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p> MySQL事件调度器event_scheduler负责调用事件，它默认是关闭的。这个调度器不断地监视一个事件是否要调用， 要创建事件，必须打开调度器。</p>\n</blockquote>\n<ul>\n<li>如果未开启则需要开启，可以使用下面任意命令执行：</li>\n</ul>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">GLOBAL</span> event_scheduler = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"keyword\">SET</span> <span class=\"keyword\">GLOBAL</span> event_scheduler = <span class=\"keyword\">ON</span>;</span><br></pre></td></tr></table></figure>\n<h2 id=\"使用工具\"><a href=\"#使用工具\" class=\"headerlink\" title=\"使用工具\"></a>使用工具</h2><ul>\n<li><p>创建事件，调用刚刚创建的create_gps_car_trails_every_mon存储过程。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BEGIN</span><br><span class=\"line\"> CALL create_gps_car_trails_every_mon();</span><br><span class=\"line\">END</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>设置时间状态为enable，如下图所示：</p>\n</li>\n</ul>\n<p><img src=\"/images/database/mysql1.png\" alt=\"image\"></p>\n<ul>\n<li>设定执行时间：表示每一年执行一次，开始时间是 2017-02-01 01:00:00</li>\n</ul>\n<p><img src=\"/images/database/mysql2.png\" alt=\"img\"></p>\n<ul>\n<li>保存计划就建立完毕，效果如图：建立了12张gpstrail表 根据年和月份。</li>\n</ul>\n<p><img src=\"/images/database/mysql3.png\" alt=\"img\"></p>\n<h2 id=\"直接执行语句\"><a href=\"#直接执行语句\" class=\"headerlink\" title=\"直接执行语句\"></a>直接执行语句</h2><ul>\n<li>创建事件也可不按照上面操作，执行sql语句即可</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">CREATE EVENT event_create_gps_car_trails_every_mon1 ON SCHEDULE EVERY 1 QUARTER STARTS DATE_ADD(</span><br><span class=\"line\">\tDATE_ADD(</span><br><span class=\"line\">\t\tDATE_SUB(</span><br><span class=\"line\">\t\t\tCURDATE(),</span><br><span class=\"line\">\t\t\tINTERVAL DAY (CURDATE()) - 1 DAY</span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t\tINTERVAL 1 MONTH</span><br><span class=\"line\">\t),</span><br><span class=\"line\">\tINTERVAL 1 HOUR</span><br><span class=\"line\">) ON COMPLETION PRESERVE ENABLE DO</span><br><span class=\"line\">\tCALL create_gps_car_trails_every_mon ();</span><br></pre></td></tr></table></figure>\n"},{"title":"maven中jar的相关处理","text":"引入外部jar包引入项目lib文件夹下的jar包 首先在在dependency中设定scope 为system，并且指定systemPath。 1234567&lt;dependency&gt; &lt;groupId&gt;com.hope.cloud&lt;/groupId&gt; &lt;!--自定义--&gt; &lt;artifactId&gt;cloud&lt;/artifactId&gt; &lt;!--自定义--&gt; &lt;version&gt;1.0&lt;/version&gt; &lt;!--自定义--&gt; &lt;scope&gt;system&lt;/scope&gt; &lt;!--system，类似provided，需要显式提供依赖的jar以后，Maven就不会在Repository中查找它--&gt; &lt;systemPath&gt;$&#123;basedir&#125;/lib/cloud.jar&lt;/systemPath&gt; &lt;!--项目根目录下的lib文件夹下--&gt;&lt;/dependency&gt; 编译阶段指定外部lib 123456789101112&lt;plugin&gt;&lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;&lt;version&gt;2.3.2&lt;/version&gt;&lt;configuration&gt;&lt;source&gt;1.8&lt;/source&gt;&lt;target&gt;1.8&lt;/target&gt;&lt;encoding&gt;UTF-8&lt;/encoding&gt;&lt;compilerArguments&gt;&lt;extdirs&gt;lib&lt;/extdirs&gt;&lt;!--指定外部lib--&gt;&lt;/compilerArguments&gt;&lt;/configuration&gt;&lt;/plugin&gt; 将第三方jar包引入本地maven库 cmd 进入jar包所在路径，执行以下命令 1mvn install:install-file -Dfile=cloud.jar -DgroupId=com.hope.cloud -DartifactId=cloud -Dversion=1.0 -Dpackaging=jar 引入依赖 12345&lt;dependency&gt;&lt;groupId&gt;com.hope.cloud&lt;/groupId&gt;&lt;artifactId&gt;cloud&lt;/artifactId&gt;&lt;version&gt;1.0&lt;/version&gt;&lt;/dependency&gt; 将所有引用的jar包打包到一个jar中java的jar包太多了，有时候我们为了方便执行，希望把所有引用的jar包打包到一起。maven可以做到吗？ 肯定是可以的，需要使用maven-assembly-plugin这个maven插件，使用方法说明如下： 首先在pom文件的build节点中添加这个插件的引用 在configuration /archive /manifest 节点中指明jar包中main方法所在类 在executions / execution 中设置make-assembly。 代码示例如下： 123456789101112131415161718192021222324252627&lt;build&gt;&lt;plugins&gt;&lt;plugin&gt; &lt;artifactId&gt;maven-assembly-plugin&lt;/artifactId&gt; &lt;configuration&gt; &lt;archive&gt; &lt;manifest&gt; &lt;!--这里要替换成jar包main方法所在类--&gt; &lt;mainClass&gt;cn.outofmemory.MainClass&lt;/mainClass&gt; &lt;/manifest&gt; &lt;/archive&gt; &lt;descriptorRefs&gt; &lt;descriptorRef&gt;jar-with-dependencies&lt;/descriptorRef&gt; &lt;/descriptorRefs&gt; &lt;/configuration&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;make-assembly&lt;/id&gt; &lt;!-- this is used for inheritance merges --&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;!-- 指定在打包节点执行jar包合并操作 --&gt; &lt;goals&gt; &lt;goal&gt;single&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; &lt;/plugins&gt;&lt;/build&gt; ##","content":"<h1 id=\"引入外部jar包\"><a href=\"#引入外部jar包\" class=\"headerlink\" title=\"引入外部jar包\"></a>引入外部jar包</h1><h2 id=\"引入项目lib文件夹下的jar包\"><a href=\"#引入项目lib文件夹下的jar包\" class=\"headerlink\" title=\"引入项目lib文件夹下的jar包\"></a>引入项目lib文件夹下的jar包</h2><ul>\n<li>首先在在dependency中设定scope 为system，并且指定systemPath。</li>\n</ul>\n<figure class=\"highlight dust\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hope.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span>  <span class=\"comment\">&lt;!--自定义--&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span>    <span class=\"comment\">&lt;!--自定义--&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span> <span class=\"comment\">&lt;!--自定义--&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">scope</span>&gt;</span>system<span class=\"tag\">&lt;/<span class=\"name\">scope</span>&gt;</span> <span class=\"comment\">&lt;!--system，类似provided，需要显式提供依赖的jar以后，Maven就不会在Repository中查找它--&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\">    <span class=\"tag\">&lt;<span class=\"name\">systemPath</span>&gt;</span>$</span><span class=\"template-variable\">&#123;basedir&#125;</span><span class=\"xml\">/lib/cloud.jar<span class=\"tag\">&lt;/<span class=\"name\">systemPath</span>&gt;</span> <span class=\"comment\">&lt;!--项目根目录下的lib文件夹下--&gt;</span></span></span><br><span class=\"line\"><span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>编译阶段指定外部lib</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-compiler-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>2.3.2<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">source</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">source</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">target</span>&gt;</span>1.8<span class=\"tag\">&lt;/<span class=\"name\">target</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">encoding</span>&gt;</span>UTF-8<span class=\"tag\">&lt;/<span class=\"name\">encoding</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">compilerArguments</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">extdirs</span>&gt;</span>lib<span class=\"tag\">&lt;/<span class=\"name\">extdirs</span>&gt;</span><span class=\"comment\">&lt;!--指定外部lib--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">compilerArguments</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"将第三方jar包引入本地maven库\"><a href=\"#将第三方jar包引入本地maven库\" class=\"headerlink\" title=\"将第三方jar包引入本地maven库\"></a>将第三方jar包引入本地maven库</h2><ul>\n<li>cmd 进入jar包所在路径，执行以下命令</li>\n</ul>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn install:install-file <span class=\"attribute\">-Dfile</span>=cloud.jar <span class=\"attribute\">-DgroupId</span>=com.hope.cloud <span class=\"attribute\">-DartifactId</span>=cloud <span class=\"attribute\">-Dversion</span>=1.0 <span class=\"attribute\">-Dpackaging</span>=jar</span><br></pre></td></tr></table></figure>\n<ul>\n<li>引入依赖</li>\n</ul>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">dependency</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">groupId</span>&gt;</span>com.hope.cloud<span class=\"tag\">&lt;/<span class=\"name\">groupId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>cloud<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">version</span>&gt;</span>1.0<span class=\"tag\">&lt;/<span class=\"name\">version</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"将所有引用的jar包打包到一个jar中\"><a href=\"#将所有引用的jar包打包到一个jar中\" class=\"headerlink\" title=\"将所有引用的jar包打包到一个jar中\"></a>将所有引用的jar包打包到一个jar中</h1><p>java的jar包太多了，有时候我们为了方便执行，希望把所有引用的jar包打包到一起。maven可以做到吗？</p>\n<p>肯定是可以的，需要使用maven-assembly-plugin这个maven插件，使用方法说明如下：</p>\n<ul>\n<li>首先在pom文件的build节点中添加这个插件的引用</li>\n<li>在configuration /archive /manifest 节点中指明jar包中main方法所在类</li>\n<li>在executions / execution 中设置make-assembly。</li>\n</ul>\n<p>代码示例如下：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">build</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">artifactId</span>&gt;</span>maven-assembly-plugin<span class=\"tag\">&lt;/<span class=\"name\">artifactId</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">      <span class=\"comment\">&lt;!--这里要替换成jar包main方法所在类--&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">mainClass</span>&gt;</span>cn.outofmemory.MainClass<span class=\"tag\">&lt;/<span class=\"name\">mainClass</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">manifest</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">archive</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">descriptorRef</span>&gt;</span>jar-with-dependencies<span class=\"tag\">&lt;/<span class=\"name\">descriptorRef</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">descriptorRefs</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">configuration</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">id</span>&gt;</span>make-assembly<span class=\"tag\">&lt;/<span class=\"name\">id</span>&gt;</span> <span class=\"comment\">&lt;!-- this is used for inheritance merges --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">phase</span>&gt;</span>package<span class=\"tag\">&lt;/<span class=\"name\">phase</span>&gt;</span> <span class=\"comment\">&lt;!-- 指定在打包节点执行jar包合并操作 --&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">goal</span>&gt;</span>single<span class=\"tag\">&lt;/<span class=\"name\">goal</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">goals</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">execution</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">executions</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">plugin</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">plugins</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">build</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>## </p>\n"},{"title":"计算两个经纬度之间的距离","text":"计算两个经纬度之间的距离本文使用的是距离公式是有google地图提供的。 公式说明 对上面的公式解释如下：1.Lat1 Lng1 表示A点经纬度，Lat2 Lng2 表示B点经纬度；2.a=Lat1 – Lat2 为两点纬度之差 b=Lng1 -Lng2 为两点经度之差；3.6378.137为地球半径，单位为千米；计算出来的结果单位为千米，若将半径改为米为单位则计算的结果单位为米。计算精度与谷歌地图的距离精度差不多，相差范围在0.2米以下。 代码示例123456789101112131415161718192021222324252627private static final double EARTH_RADIUS = 6378.137;// 地球半径,单位千米//将角度换算成弧度private static double rad(double d) &#123; return d * Math.PI / 180.0;&#125;/*** 用来比较是否在规定考勤范围* @param lat1第一个纬度* @param lng1第一个经度* @param lat2第二个纬度* @param lng2第二个经度* @return 两个经纬度的距离（km）*/public static double getDistance(double lat1, double lng1, double lat2,double lng2) &#123; double radLat1 = rad(lat1); double radLat2 = rad(lat2); double a = radLat1 - radLat2; double b = rad(lng1) - rad(lng2); double s = 2 * Math.asin(Math.sqrt(Math.pow(Math.sin(a / 2), 2) + Math.cos(radLat1) * Math.cos(radLat2) * Math.pow(Math.sin(b / 2), 2))); s = s * EARTH_RADIUS; //此处加上double类型转换是因为对于在几百的距离差值之前计算为0，无法达到预期效果 s = (double)Math.round(s * 10000) / 10000; s = s * 10000/ 10000; return s;&#125; 顺带提一下百度地图提供的计算两地经纬度的方法，很简单的一句话调用，可以自行去看百度地图API试试，计算结果单位：米 123var map = new BMap.Map(\"allmap\");var pointA = new BMap.Point(106.486654,29.490295); // 点坐标Avar pointB = new BMap.Point(106.581515,29.615467); // 点坐标B 参考文章 地理空间距离计算及优化 根据两点经纬度计算距离","content":"<h1 id=\"计算两个经纬度之间的距离\"><a href=\"#计算两个经纬度之间的距离\" class=\"headerlink\" title=\"计算两个经纬度之间的距离\"></a>计算两个经纬度之间的距离</h1><p>本文使用的是距离公式是有google地图提供的。</p>\n<h3 id=\"公式说明\"><a href=\"#公式说明\" class=\"headerlink\" title=\"公式说明\"></a>公式说明</h3><p> <img src=\"http://img849.ph.126.net/GNSrkddcKlz3MbknMDS1zA==/2693715527121896352.bmp\" alt=\"关于经纬度求距离 - cza55007 - NO.1.LY\"></p>\n<p>对上面的公式解释如下：<br>1.Lat1 Lng1 表示A点经纬度，Lat2 Lng2 表示B点经纬度；<br>2.a=Lat1 – Lat2 为两点纬度之差  b=Lng1 -Lng2 为两点经度之差；<br>3.6378.137为地球半径，单位为千米；<br>计算出来的结果单位为千米，若将半径改为米为单位则计算的结果单位为米。<br>计算精度与谷歌地图的距离精度差不多，相差范围在0.2米以下。</p>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><figure class=\"highlight processing\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">double</span> EARTH_RADIUS = <span class=\"number\">6378.137</span>;<span class=\"comment\">// 地球半径,单位千米</span></span><br><span class=\"line\"><span class=\"comment\">//将角度换算成弧度</span></span><br><span class=\"line\"><span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> rad(<span class=\"keyword\">double</span> d) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> d * Math.<span class=\"literal\">PI</span> / <span class=\"number\">180.0</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* 用来比较是否在规定考勤范围</span></span><br><span class=\"line\"><span class=\"comment\">* @param lat1第一个纬度</span></span><br><span class=\"line\"><span class=\"comment\">* @param lng1第一个经度</span></span><br><span class=\"line\"><span class=\"comment\">* @param lat2第二个纬度</span></span><br><span class=\"line\"><span class=\"comment\">* @param lng2第二个经度</span></span><br><span class=\"line\"><span class=\"comment\">* @return 两个经纬度的距离（km）</span></span><br><span class=\"line\"><span class=\"comment\">*/</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">double</span> getDistance(<span class=\"keyword\">double</span> lat1, <span class=\"keyword\">double</span> lng1, <span class=\"keyword\">double</span> lat2,<span class=\"keyword\">double</span> lng2) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> radLat1 = rad(lat1);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> radLat2 = rad(lat2);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> a = radLat1 - radLat2;</span><br><span class=\"line\">    <span class=\"keyword\">double</span> b = rad(lng1) - rad(lng2);</span><br><span class=\"line\">    <span class=\"keyword\">double</span> s = <span class=\"number\">2</span> * Math.<span class=\"built_in\">asin</span>(Math.<span class=\"built_in\">sqrt</span>(Math.<span class=\"built_in\">pow</span>(Math.<span class=\"built_in\">sin</span>(a / <span class=\"number\">2</span>), <span class=\"number\">2</span>)</span><br><span class=\"line\">    + Math.<span class=\"built_in\">cos</span>(radLat1) * Math.<span class=\"built_in\">cos</span>(radLat2)</span><br><span class=\"line\">    * Math.<span class=\"built_in\">pow</span>(Math.<span class=\"built_in\">sin</span>(b / <span class=\"number\">2</span>), <span class=\"number\">2</span>)));</span><br><span class=\"line\">    s = s * EARTH_RADIUS;</span><br><span class=\"line\">    <span class=\"comment\">//此处加上double类型转换是因为对于在几百的距离差值之前计算为0，无法达到预期效果</span></span><br><span class=\"line\">    s = (<span class=\"keyword\">double</span>)Math.<span class=\"built_in\">round</span>(s * <span class=\"number\">10000</span>) / <span class=\"number\">10000</span>;</span><br><span class=\"line\">    s = s * <span class=\"number\">10000</span>/ <span class=\"number\">10000</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>顺带提一下百度地图提供的计算两地经纬度的方法，很简单的一句话调用，可以自行去看百度地图API试试，计算结果单位：米</p>\n<figure class=\"highlight haxe\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> map = <span class=\"keyword\">new</span> <span class=\"type\">BMap</span>.Map(<span class=\"string\">\"allmap\"</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> pointA = <span class=\"keyword\">new</span> <span class=\"type\">BMap</span>.Point(<span class=\"number\">106.486654</span>,<span class=\"number\">29.490295</span>);  <span class=\"comment\">// 点坐标A</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> pointB = <span class=\"keyword\">new</span> <span class=\"type\">BMap</span>.Point(<span class=\"number\">106.581515</span>,<span class=\"number\">29.615467</span>);  <span class=\"comment\">// 点坐标B</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h2><ul>\n<li><a href=\"https://blog.csdn.net/u011001084/article/details/52980834\" target=\"_blank\" rel=\"noopener\">地理空间距离计算及优化</a></li>\n<li><a href=\"https://blog.csdn.net/b_h_l/article/details/8657040\" target=\"_blank\" rel=\"noopener\">根据两点经纬度计算距离</a></li>\n</ul>\n"}]}